

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Jul 03 14:56:54 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK5,global,class=CODE,delta=2,noexec
     7                           	psect	idataBANK8,global,class=CODE,delta=2,noexec
     8                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    18                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,noexec
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,noexec
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1,noexec
    21                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1,noexec
    22                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1,noexec
    23                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1,noexec
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	intentry,global,class=CODE,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   112                           	dabs	1,0x7E,2
   113  0000                     
   114                           ; Version 2.20
   115                           ; Generated 09/04/2020 GMT
   116                           ; 
   117                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   118                           ; All rights reserved.
   119                           ; 
   120                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   121                           ; 
   122                           ; Redistribution and use in source and binary forms, with or without modification, are
   123                           ; permitted provided that the following conditions are met:
   124                           ; 
   125                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   126                           ;        conditions and the following disclaimer.
   127                           ; 
   128                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   129                           ;        of conditions and the following disclaimer in the documentation and/or other
   130                           ;        materials provided with the distribution.
   131                           ; 
   132                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   133                           ;        software without specific prior written permission.
   134                           ; 
   135                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   136                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   137                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   138                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   139                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   140                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   141                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   142                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   143                           ; 
   144                           ; 
   145                           ; Code-generator required, PIC16F1825 Definitions
   146                           ; 
   147                           ; SFR Addresses
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000E                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  008C                     	;# 
   177  008E                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  010C                     	;# 
   193  010E                     	;# 
   194  0111                     	;# 
   195  0112                     	;# 
   196  0113                     	;# 
   197  0114                     	;# 
   198  0115                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  0118                     	;# 
   202  0119                     	;# 
   203  011A                     	;# 
   204  011B                     	;# 
   205  011D                     	;# 
   206  011E                     	;# 
   207  018C                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020C                     	;# 
   227  020E                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0294                     	;# 
   248  0295                     	;# 
   249  0295                     	;# 
   250  0296                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  029B                     	;# 
   256  029C                     	;# 
   257  029D                     	;# 
   258  029E                     	;# 
   259  0311                     	;# 
   260  0311                     	;# 
   261  0312                     	;# 
   262  0313                     	;# 
   263  0318                     	;# 
   264  0318                     	;# 
   265  0319                     	;# 
   266  031A                     	;# 
   267  038C                     	;# 
   268  038E                     	;# 
   269  0391                     	;# 
   270  0392                     	;# 
   271  0393                     	;# 
   272  039A                     	;# 
   273  039C                     	;# 
   274  039D                     	;# 
   275  039E                     	;# 
   276  039F                     	;# 
   277  0415                     	;# 
   278  0416                     	;# 
   279  0417                     	;# 
   280  041C                     	;# 
   281  041D                     	;# 
   282  041E                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000E                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0016                     	;# 
   314  0017                     	;# 
   315  0018                     	;# 
   316  0019                     	;# 
   317  001A                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  008C                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009A                     	;# 
   333  009B                     	;# 
   334  009B                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  010C                     	;# 
   339  010E                     	;# 
   340  0111                     	;# 
   341  0112                     	;# 
   342  0113                     	;# 
   343  0114                     	;# 
   344  0115                     	;# 
   345  0116                     	;# 
   346  0117                     	;# 
   347  0118                     	;# 
   348  0119                     	;# 
   349  011A                     	;# 
   350  011B                     	;# 
   351  011D                     	;# 
   352  011E                     	;# 
   353  018C                     	;# 
   354  018E                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020C                     	;# 
   373  020E                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0291                     	;# 
   390  0291                     	;# 
   391  0292                     	;# 
   392  0293                     	;# 
   393  0294                     	;# 
   394  0295                     	;# 
   395  0295                     	;# 
   396  0296                     	;# 
   397  0298                     	;# 
   398  0298                     	;# 
   399  0299                     	;# 
   400  029A                     	;# 
   401  029B                     	;# 
   402  029C                     	;# 
   403  029D                     	;# 
   404  029E                     	;# 
   405  0311                     	;# 
   406  0311                     	;# 
   407  0312                     	;# 
   408  0313                     	;# 
   409  0318                     	;# 
   410  0318                     	;# 
   411  0319                     	;# 
   412  031A                     	;# 
   413  038C                     	;# 
   414  038E                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  039A                     	;# 
   419  039C                     	;# 
   420  039D                     	;# 
   421  039E                     	;# 
   422  039F                     	;# 
   423  0415                     	;# 
   424  0416                     	;# 
   425  0417                     	;# 
   426  041C                     	;# 
   427  041D                     	;# 
   428  041E                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0013                     	;# 
   457  0015                     	;# 
   458  0016                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001C                     	;# 
   466  001E                     	;# 
   467  001F                     	;# 
   468  008C                     	;# 
   469  008E                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0097                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009A                     	;# 
   479  009B                     	;# 
   480  009B                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009E                     	;# 
   484  010C                     	;# 
   485  010E                     	;# 
   486  0111                     	;# 
   487  0112                     	;# 
   488  0113                     	;# 
   489  0114                     	;# 
   490  0115                     	;# 
   491  0116                     	;# 
   492  0117                     	;# 
   493  0118                     	;# 
   494  0119                     	;# 
   495  011A                     	;# 
   496  011B                     	;# 
   497  011D                     	;# 
   498  011E                     	;# 
   499  018C                     	;# 
   500  018E                     	;# 
   501  0191                     	;# 
   502  0191                     	;# 
   503  0192                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0193                     	;# 
   507  0194                     	;# 
   508  0195                     	;# 
   509  0196                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019D                     	;# 
   516  019E                     	;# 
   517  019F                     	;# 
   518  020C                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0291                     	;# 
   536  0291                     	;# 
   537  0292                     	;# 
   538  0293                     	;# 
   539  0294                     	;# 
   540  0295                     	;# 
   541  0295                     	;# 
   542  0296                     	;# 
   543  0298                     	;# 
   544  0298                     	;# 
   545  0299                     	;# 
   546  029A                     	;# 
   547  029B                     	;# 
   548  029C                     	;# 
   549  029D                     	;# 
   550  029E                     	;# 
   551  0311                     	;# 
   552  0311                     	;# 
   553  0312                     	;# 
   554  0313                     	;# 
   555  0318                     	;# 
   556  0318                     	;# 
   557  0319                     	;# 
   558  031A                     	;# 
   559  038C                     	;# 
   560  038E                     	;# 
   561  0391                     	;# 
   562  0392                     	;# 
   563  0393                     	;# 
   564  039A                     	;# 
   565  039C                     	;# 
   566  039D                     	;# 
   567  039E                     	;# 
   568  039F                     	;# 
   569  0415                     	;# 
   570  0416                     	;# 
   571  0417                     	;# 
   572  041C                     	;# 
   573  041D                     	;# 
   574  041E                     	;# 
   575  0FE4                     	;# 
   576  0FE5                     	;# 
   577  0FE6                     	;# 
   578  0FE7                     	;# 
   579  0FE8                     	;# 
   580  0FE9                     	;# 
   581  0FEA                     	;# 
   582  0FEB                     	;# 
   583  0FED                     	;# 
   584  0FEE                     	;# 
   585  0FEF                     	;# 
   586  0000                     	;# 
   587  0001                     	;# 
   588  0002                     	;# 
   589  0003                     	;# 
   590  0004                     	;# 
   591  0005                     	;# 
   592  0006                     	;# 
   593  0007                     	;# 
   594  0008                     	;# 
   595  0009                     	;# 
   596  000A                     	;# 
   597  000B                     	;# 
   598  000C                     	;# 
   599  000E                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0013                     	;# 
   603  0015                     	;# 
   604  0016                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001C                     	;# 
   612  001E                     	;# 
   613  001F                     	;# 
   614  008C                     	;# 
   615  008E                     	;# 
   616  0091                     	;# 
   617  0092                     	;# 
   618  0093                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0097                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009B                     	;# 
   627  009C                     	;# 
   628  009D                     	;# 
   629  009E                     	;# 
   630  010C                     	;# 
   631  010E                     	;# 
   632  0111                     	;# 
   633  0112                     	;# 
   634  0113                     	;# 
   635  0114                     	;# 
   636  0115                     	;# 
   637  0116                     	;# 
   638  0117                     	;# 
   639  0118                     	;# 
   640  0119                     	;# 
   641  011A                     	;# 
   642  011B                     	;# 
   643  011D                     	;# 
   644  011E                     	;# 
   645  018C                     	;# 
   646  018E                     	;# 
   647  0191                     	;# 
   648  0191                     	;# 
   649  0192                     	;# 
   650  0193                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0194                     	;# 
   654  0195                     	;# 
   655  0196                     	;# 
   656  0199                     	;# 
   657  019A                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019C                     	;# 
   661  019D                     	;# 
   662  019E                     	;# 
   663  019F                     	;# 
   664  020C                     	;# 
   665  020E                     	;# 
   666  0211                     	;# 
   667  0211                     	;# 
   668  0212                     	;# 
   669  0212                     	;# 
   670  0213                     	;# 
   671  0213                     	;# 
   672  0214                     	;# 
   673  0214                     	;# 
   674  0215                     	;# 
   675  0215                     	;# 
   676  0215                     	;# 
   677  0216                     	;# 
   678  0216                     	;# 
   679  0217                     	;# 
   680  0217                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0294                     	;# 
   686  0295                     	;# 
   687  0295                     	;# 
   688  0296                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029B                     	;# 
   694  029C                     	;# 
   695  029D                     	;# 
   696  029E                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  038C                     	;# 
   706  038E                     	;# 
   707  0391                     	;# 
   708  0392                     	;# 
   709  0393                     	;# 
   710  039A                     	;# 
   711  039C                     	;# 
   712  039D                     	;# 
   713  039E                     	;# 
   714  039F                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000E                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0015                     	;# 
   750  0016                     	;# 
   751  0016                     	;# 
   752  0017                     	;# 
   753  0018                     	;# 
   754  0019                     	;# 
   755  001A                     	;# 
   756  001B                     	;# 
   757  001C                     	;# 
   758  001E                     	;# 
   759  001F                     	;# 
   760  008C                     	;# 
   761  008E                     	;# 
   762  0091                     	;# 
   763  0092                     	;# 
   764  0093                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0098                     	;# 
   769  0099                     	;# 
   770  009A                     	;# 
   771  009B                     	;# 
   772  009B                     	;# 
   773  009C                     	;# 
   774  009D                     	;# 
   775  009E                     	;# 
   776  010C                     	;# 
   777  010E                     	;# 
   778  0111                     	;# 
   779  0112                     	;# 
   780  0113                     	;# 
   781  0114                     	;# 
   782  0115                     	;# 
   783  0116                     	;# 
   784  0117                     	;# 
   785  0118                     	;# 
   786  0119                     	;# 
   787  011A                     	;# 
   788  011B                     	;# 
   789  011D                     	;# 
   790  011E                     	;# 
   791  018C                     	;# 
   792  018E                     	;# 
   793  0191                     	;# 
   794  0191                     	;# 
   795  0192                     	;# 
   796  0193                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020E                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0291                     	;# 
   828  0291                     	;# 
   829  0292                     	;# 
   830  0293                     	;# 
   831  0294                     	;# 
   832  0295                     	;# 
   833  0295                     	;# 
   834  0296                     	;# 
   835  0298                     	;# 
   836  0298                     	;# 
   837  0299                     	;# 
   838  029A                     	;# 
   839  029B                     	;# 
   840  029C                     	;# 
   841  029D                     	;# 
   842  029E                     	;# 
   843  0311                     	;# 
   844  0311                     	;# 
   845  0312                     	;# 
   846  0313                     	;# 
   847  0318                     	;# 
   848  0318                     	;# 
   849  0319                     	;# 
   850  031A                     	;# 
   851  038C                     	;# 
   852  038E                     	;# 
   853  0391                     	;# 
   854  0392                     	;# 
   855  0393                     	;# 
   856  039A                     	;# 
   857  039C                     	;# 
   858  039D                     	;# 
   859  039E                     	;# 
   860  039F                     	;# 
   861  0415                     	;# 
   862  0416                     	;# 
   863  0417                     	;# 
   864  041C                     	;# 
   865  041D                     	;# 
   866  041E                     	;# 
   867  0FE4                     	;# 
   868  0FE5                     	;# 
   869  0FE6                     	;# 
   870  0FE7                     	;# 
   871  0FE8                     	;# 
   872  0FE9                     	;# 
   873  0FEA                     	;# 
   874  0FEB                     	;# 
   875  0FED                     	;# 
   876  0FEE                     	;# 
   877  0FEF                     	;# 
   878  0000                     	;# 
   879  0001                     	;# 
   880  0002                     	;# 
   881  0003                     	;# 
   882  0004                     	;# 
   883  0005                     	;# 
   884  0006                     	;# 
   885  0007                     	;# 
   886  0008                     	;# 
   887  0009                     	;# 
   888  000A                     	;# 
   889  000B                     	;# 
   890  000C                     	;# 
   891  000E                     	;# 
   892  0011                     	;# 
   893  0012                     	;# 
   894  0013                     	;# 
   895  0015                     	;# 
   896  0016                     	;# 
   897  0016                     	;# 
   898  0017                     	;# 
   899  0018                     	;# 
   900  0019                     	;# 
   901  001A                     	;# 
   902  001B                     	;# 
   903  001C                     	;# 
   904  001E                     	;# 
   905  001F                     	;# 
   906  008C                     	;# 
   907  008E                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0095                     	;# 
   912  0096                     	;# 
   913  0097                     	;# 
   914  0098                     	;# 
   915  0099                     	;# 
   916  009A                     	;# 
   917  009B                     	;# 
   918  009B                     	;# 
   919  009C                     	;# 
   920  009D                     	;# 
   921  009E                     	;# 
   922  010C                     	;# 
   923  010E                     	;# 
   924  0111                     	;# 
   925  0112                     	;# 
   926  0113                     	;# 
   927  0114                     	;# 
   928  0115                     	;# 
   929  0116                     	;# 
   930  0117                     	;# 
   931  0118                     	;# 
   932  0119                     	;# 
   933  011A                     	;# 
   934  011B                     	;# 
   935  011D                     	;# 
   936  011E                     	;# 
   937  018C                     	;# 
   938  018E                     	;# 
   939  0191                     	;# 
   940  0191                     	;# 
   941  0192                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  019A                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019C                     	;# 
   953  019D                     	;# 
   954  019E                     	;# 
   955  019F                     	;# 
   956  020C                     	;# 
   957  020E                     	;# 
   958  0211                     	;# 
   959  0211                     	;# 
   960  0212                     	;# 
   961  0212                     	;# 
   962  0213                     	;# 
   963  0213                     	;# 
   964  0214                     	;# 
   965  0214                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0216                     	;# 
   970  0216                     	;# 
   971  0217                     	;# 
   972  0217                     	;# 
   973  0291                     	;# 
   974  0291                     	;# 
   975  0292                     	;# 
   976  0293                     	;# 
   977  0294                     	;# 
   978  0295                     	;# 
   979  0295                     	;# 
   980  0296                     	;# 
   981  0298                     	;# 
   982  0298                     	;# 
   983  0299                     	;# 
   984  029A                     	;# 
   985  029B                     	;# 
   986  029C                     	;# 
   987  029D                     	;# 
   988  029E                     	;# 
   989  0311                     	;# 
   990  0311                     	;# 
   991  0312                     	;# 
   992  0313                     	;# 
   993  0318                     	;# 
   994  0318                     	;# 
   995  0319                     	;# 
   996  031A                     	;# 
   997  038C                     	;# 
   998  038E                     	;# 
   999  0391                     	;# 
  1000  0392                     	;# 
  1001  0393                     	;# 
  1002  039A                     	;# 
  1003  039C                     	;# 
  1004  039D                     	;# 
  1005  039E                     	;# 
  1006  039F                     	;# 
  1007  0415                     	;# 
  1008  0416                     	;# 
  1009  0417                     	;# 
  1010  041C                     	;# 
  1011  041D                     	;# 
  1012  041E                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000E                     	;# 
  1038  0011                     	;# 
  1039  0012                     	;# 
  1040  0013                     	;# 
  1041  0015                     	;# 
  1042  0016                     	;# 
  1043  0016                     	;# 
  1044  0017                     	;# 
  1045  0018                     	;# 
  1046  0019                     	;# 
  1047  001A                     	;# 
  1048  001B                     	;# 
  1049  001C                     	;# 
  1050  001E                     	;# 
  1051  001F                     	;# 
  1052  008C                     	;# 
  1053  008E                     	;# 
  1054  0091                     	;# 
  1055  0092                     	;# 
  1056  0093                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0098                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  010C                     	;# 
  1069  010E                     	;# 
  1070  0111                     	;# 
  1071  0112                     	;# 
  1072  0113                     	;# 
  1073  0114                     	;# 
  1074  0115                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  0118                     	;# 
  1078  0119                     	;# 
  1079  011A                     	;# 
  1080  011B                     	;# 
  1081  011D                     	;# 
  1082  011E                     	;# 
  1083  018C                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0193                     	;# 
  1091  0194                     	;# 
  1092  0195                     	;# 
  1093  0196                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019D                     	;# 
  1100  019E                     	;# 
  1101  019F                     	;# 
  1102  020C                     	;# 
  1103  020E                     	;# 
  1104  0211                     	;# 
  1105  0211                     	;# 
  1106  0212                     	;# 
  1107  0212                     	;# 
  1108  0213                     	;# 
  1109  0213                     	;# 
  1110  0214                     	;# 
  1111  0214                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0215                     	;# 
  1115  0216                     	;# 
  1116  0216                     	;# 
  1117  0217                     	;# 
  1118  0217                     	;# 
  1119  0291                     	;# 
  1120  0291                     	;# 
  1121  0292                     	;# 
  1122  0293                     	;# 
  1123  0294                     	;# 
  1124  0295                     	;# 
  1125  0295                     	;# 
  1126  0296                     	;# 
  1127  0298                     	;# 
  1128  0298                     	;# 
  1129  0299                     	;# 
  1130  029A                     	;# 
  1131  029B                     	;# 
  1132  029C                     	;# 
  1133  029D                     	;# 
  1134  029E                     	;# 
  1135  0311                     	;# 
  1136  0311                     	;# 
  1137  0312                     	;# 
  1138  0313                     	;# 
  1139  0318                     	;# 
  1140  0318                     	;# 
  1141  0319                     	;# 
  1142  031A                     	;# 
  1143  038C                     	;# 
  1144  038E                     	;# 
  1145  0391                     	;# 
  1146  0392                     	;# 
  1147  0393                     	;# 
  1148  039A                     	;# 
  1149  039C                     	;# 
  1150  039D                     	;# 
  1151  039E                     	;# 
  1152  039F                     	;# 
  1153  0415                     	;# 
  1154  0416                     	;# 
  1155  0417                     	;# 
  1156  041C                     	;# 
  1157  041D                     	;# 
  1158  041E                     	;# 
  1159  0FE4                     	;# 
  1160  0FE5                     	;# 
  1161  0FE6                     	;# 
  1162  0FE7                     	;# 
  1163  0FE8                     	;# 
  1164  0FE9                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEF                     	;# 
  1170  0000                     	;# 
  1171  0001                     	;# 
  1172  0002                     	;# 
  1173  0003                     	;# 
  1174  0004                     	;# 
  1175  0005                     	;# 
  1176  0006                     	;# 
  1177  0007                     	;# 
  1178  0008                     	;# 
  1179  0009                     	;# 
  1180  000A                     	;# 
  1181  000B                     	;# 
  1182  000C                     	;# 
  1183  000E                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0013                     	;# 
  1187  0015                     	;# 
  1188  0016                     	;# 
  1189  0016                     	;# 
  1190  0017                     	;# 
  1191  0018                     	;# 
  1192  0019                     	;# 
  1193  001A                     	;# 
  1194  001B                     	;# 
  1195  001C                     	;# 
  1196  001E                     	;# 
  1197  001F                     	;# 
  1198  008C                     	;# 
  1199  008E                     	;# 
  1200  0091                     	;# 
  1201  0092                     	;# 
  1202  0093                     	;# 
  1203  0095                     	;# 
  1204  0096                     	;# 
  1205  0097                     	;# 
  1206  0098                     	;# 
  1207  0099                     	;# 
  1208  009A                     	;# 
  1209  009B                     	;# 
  1210  009B                     	;# 
  1211  009C                     	;# 
  1212  009D                     	;# 
  1213  009E                     	;# 
  1214  010C                     	;# 
  1215  010E                     	;# 
  1216  0111                     	;# 
  1217  0112                     	;# 
  1218  0113                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  0118                     	;# 
  1224  0119                     	;# 
  1225  011A                     	;# 
  1226  011B                     	;# 
  1227  011D                     	;# 
  1228  011E                     	;# 
  1229  018C                     	;# 
  1230  018E                     	;# 
  1231  0191                     	;# 
  1232  0191                     	;# 
  1233  0192                     	;# 
  1234  0193                     	;# 
  1235  0193                     	;# 
  1236  0193                     	;# 
  1237  0194                     	;# 
  1238  0195                     	;# 
  1239  0196                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020C                     	;# 
  1249  020E                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0294                     	;# 
  1270  0295                     	;# 
  1271  0295                     	;# 
  1272  0296                     	;# 
  1273  0298                     	;# 
  1274  0298                     	;# 
  1275  0299                     	;# 
  1276  029A                     	;# 
  1277  029B                     	;# 
  1278  029C                     	;# 
  1279  029D                     	;# 
  1280  029E                     	;# 
  1281  0311                     	;# 
  1282  0311                     	;# 
  1283  0312                     	;# 
  1284  0313                     	;# 
  1285  0318                     	;# 
  1286  0318                     	;# 
  1287  0319                     	;# 
  1288  031A                     	;# 
  1289  038C                     	;# 
  1290  038E                     	;# 
  1291  0391                     	;# 
  1292  0392                     	;# 
  1293  0393                     	;# 
  1294  039A                     	;# 
  1295  039C                     	;# 
  1296  039D                     	;# 
  1297  039E                     	;# 
  1298  039F                     	;# 
  1299  0415                     	;# 
  1300  0416                     	;# 
  1301  0417                     	;# 
  1302  041C                     	;# 
  1303  041D                     	;# 
  1304  041E                     	;# 
  1305  0FE4                     	;# 
  1306  0FE5                     	;# 
  1307  0FE6                     	;# 
  1308  0FE7                     	;# 
  1309  0FE8                     	;# 
  1310  0FE9                     	;# 
  1311  0FEA                     	;# 
  1312  0FEB                     	;# 
  1313  0FED                     	;# 
  1314  0FEE                     	;# 
  1315  0FEF                     	;# 
  1316  0000                     	;# 
  1317  0001                     	;# 
  1318  0002                     	;# 
  1319  0003                     	;# 
  1320  0004                     	;# 
  1321  0005                     	;# 
  1322  0006                     	;# 
  1323  0007                     	;# 
  1324  0008                     	;# 
  1325  0009                     	;# 
  1326  000A                     	;# 
  1327  000B                     	;# 
  1328  000C                     	;# 
  1329  000E                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0013                     	;# 
  1333  0015                     	;# 
  1334  0016                     	;# 
  1335  0016                     	;# 
  1336  0017                     	;# 
  1337  0018                     	;# 
  1338  0019                     	;# 
  1339  001A                     	;# 
  1340  001B                     	;# 
  1341  001C                     	;# 
  1342  001E                     	;# 
  1343  001F                     	;# 
  1344  008C                     	;# 
  1345  008E                     	;# 
  1346  0091                     	;# 
  1347  0092                     	;# 
  1348  0093                     	;# 
  1349  0095                     	;# 
  1350  0096                     	;# 
  1351  0097                     	;# 
  1352  0098                     	;# 
  1353  0099                     	;# 
  1354  009A                     	;# 
  1355  009B                     	;# 
  1356  009B                     	;# 
  1357  009C                     	;# 
  1358  009D                     	;# 
  1359  009E                     	;# 
  1360  010C                     	;# 
  1361  010E                     	;# 
  1362  0111                     	;# 
  1363  0112                     	;# 
  1364  0113                     	;# 
  1365  0114                     	;# 
  1366  0115                     	;# 
  1367  0116                     	;# 
  1368  0117                     	;# 
  1369  0118                     	;# 
  1370  0119                     	;# 
  1371  011A                     	;# 
  1372  011B                     	;# 
  1373  011D                     	;# 
  1374  011E                     	;# 
  1375  018C                     	;# 
  1376  018E                     	;# 
  1377  0191                     	;# 
  1378  0191                     	;# 
  1379  0192                     	;# 
  1380  0193                     	;# 
  1381  0193                     	;# 
  1382  0193                     	;# 
  1383  0194                     	;# 
  1384  0195                     	;# 
  1385  0196                     	;# 
  1386  0199                     	;# 
  1387  019A                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019C                     	;# 
  1391  019D                     	;# 
  1392  019E                     	;# 
  1393  019F                     	;# 
  1394  020C                     	;# 
  1395  020E                     	;# 
  1396  0211                     	;# 
  1397  0211                     	;# 
  1398  0212                     	;# 
  1399  0212                     	;# 
  1400  0213                     	;# 
  1401  0213                     	;# 
  1402  0214                     	;# 
  1403  0214                     	;# 
  1404  0215                     	;# 
  1405  0215                     	;# 
  1406  0215                     	;# 
  1407  0216                     	;# 
  1408  0216                     	;# 
  1409  0217                     	;# 
  1410  0217                     	;# 
  1411  0291                     	;# 
  1412  0291                     	;# 
  1413  0292                     	;# 
  1414  0293                     	;# 
  1415  0294                     	;# 
  1416  0295                     	;# 
  1417  0295                     	;# 
  1418  0296                     	;# 
  1419  0298                     	;# 
  1420  0298                     	;# 
  1421  0299                     	;# 
  1422  029A                     	;# 
  1423  029B                     	;# 
  1424  029C                     	;# 
  1425  029D                     	;# 
  1426  029E                     	;# 
  1427  0311                     	;# 
  1428  0311                     	;# 
  1429  0312                     	;# 
  1430  0313                     	;# 
  1431  0318                     	;# 
  1432  0318                     	;# 
  1433  0319                     	;# 
  1434  031A                     	;# 
  1435  038C                     	;# 
  1436  038E                     	;# 
  1437  0391                     	;# 
  1438  0392                     	;# 
  1439  0393                     	;# 
  1440  039A                     	;# 
  1441  039C                     	;# 
  1442  039D                     	;# 
  1443  039E                     	;# 
  1444  039F                     	;# 
  1445  0415                     	;# 
  1446  0416                     	;# 
  1447  0417                     	;# 
  1448  041C                     	;# 
  1449  041D                     	;# 
  1450  041E                     	;# 
  1451  0FE4                     	;# 
  1452  0FE5                     	;# 
  1453  0FE6                     	;# 
  1454  0FE7                     	;# 
  1455  0FE8                     	;# 
  1456  0FE9                     	;# 
  1457  0FEA                     	;# 
  1458  0FEB                     	;# 
  1459  0FED                     	;# 
  1460  0FEE                     	;# 
  1461  0FEF                     	;# 
  1462  0000                     	;# 
  1463  0001                     	;# 
  1464  0002                     	;# 
  1465  0003                     	;# 
  1466  0004                     	;# 
  1467  0005                     	;# 
  1468  0006                     	;# 
  1469  0007                     	;# 
  1470  0008                     	;# 
  1471  0009                     	;# 
  1472  000A                     	;# 
  1473  000B                     	;# 
  1474  000C                     	;# 
  1475  000E                     	;# 
  1476  0011                     	;# 
  1477  0012                     	;# 
  1478  0013                     	;# 
  1479  0015                     	;# 
  1480  0016                     	;# 
  1481  0016                     	;# 
  1482  0017                     	;# 
  1483  0018                     	;# 
  1484  0019                     	;# 
  1485  001A                     	;# 
  1486  001B                     	;# 
  1487  001C                     	;# 
  1488  001E                     	;# 
  1489  001F                     	;# 
  1490  008C                     	;# 
  1491  008E                     	;# 
  1492  0091                     	;# 
  1493  0092                     	;# 
  1494  0093                     	;# 
  1495  0095                     	;# 
  1496  0096                     	;# 
  1497  0097                     	;# 
  1498  0098                     	;# 
  1499  0099                     	;# 
  1500  009A                     	;# 
  1501  009B                     	;# 
  1502  009B                     	;# 
  1503  009C                     	;# 
  1504  009D                     	;# 
  1505  009E                     	;# 
  1506  010C                     	;# 
  1507  010E                     	;# 
  1508  0111                     	;# 
  1509  0112                     	;# 
  1510  0113                     	;# 
  1511  0114                     	;# 
  1512  0115                     	;# 
  1513  0116                     	;# 
  1514  0117                     	;# 
  1515  0118                     	;# 
  1516  0119                     	;# 
  1517  011A                     	;# 
  1518  011B                     	;# 
  1519  011D                     	;# 
  1520  011E                     	;# 
  1521  018C                     	;# 
  1522  018E                     	;# 
  1523  0191                     	;# 
  1524  0191                     	;# 
  1525  0192                     	;# 
  1526  0193                     	;# 
  1527  0193                     	;# 
  1528  0193                     	;# 
  1529  0194                     	;# 
  1530  0195                     	;# 
  1531  0196                     	;# 
  1532  0199                     	;# 
  1533  019A                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  020C                     	;# 
  1541  020E                     	;# 
  1542  0211                     	;# 
  1543  0211                     	;# 
  1544  0212                     	;# 
  1545  0212                     	;# 
  1546  0213                     	;# 
  1547  0213                     	;# 
  1548  0214                     	;# 
  1549  0214                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0294                     	;# 
  1562  0295                     	;# 
  1563  0295                     	;# 
  1564  0296                     	;# 
  1565  0298                     	;# 
  1566  0298                     	;# 
  1567  0299                     	;# 
  1568  029A                     	;# 
  1569  029B                     	;# 
  1570  029C                     	;# 
  1571  029D                     	;# 
  1572  029E                     	;# 
  1573  0311                     	;# 
  1574  0311                     	;# 
  1575  0312                     	;# 
  1576  0313                     	;# 
  1577  0318                     	;# 
  1578  0318                     	;# 
  1579  0319                     	;# 
  1580  031A                     	;# 
  1581  038C                     	;# 
  1582  038E                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000E                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0013                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  001E                     	;# 
  1635  001F                     	;# 
  1636  008C                     	;# 
  1637  008E                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0093                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0098                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010E                     	;# 
  1654  0111                     	;# 
  1655  0112                     	;# 
  1656  0113                     	;# 
  1657  0114                     	;# 
  1658  0115                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  0118                     	;# 
  1662  0119                     	;# 
  1663  011A                     	;# 
  1664  011B                     	;# 
  1665  011D                     	;# 
  1666  011E                     	;# 
  1667  018C                     	;# 
  1668  018E                     	;# 
  1669  0191                     	;# 
  1670  0191                     	;# 
  1671  0192                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0194                     	;# 
  1676  0195                     	;# 
  1677  0196                     	;# 
  1678  0199                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020C                     	;# 
  1687  020E                     	;# 
  1688  0211                     	;# 
  1689  0211                     	;# 
  1690  0212                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0213                     	;# 
  1694  0214                     	;# 
  1695  0214                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0215                     	;# 
  1699  0216                     	;# 
  1700  0216                     	;# 
  1701  0217                     	;# 
  1702  0217                     	;# 
  1703  0291                     	;# 
  1704  0291                     	;# 
  1705  0292                     	;# 
  1706  0293                     	;# 
  1707  0294                     	;# 
  1708  0295                     	;# 
  1709  0295                     	;# 
  1710  0296                     	;# 
  1711  0298                     	;# 
  1712  0298                     	;# 
  1713  0299                     	;# 
  1714  029A                     	;# 
  1715  029B                     	;# 
  1716  029C                     	;# 
  1717  029D                     	;# 
  1718  029E                     	;# 
  1719  0311                     	;# 
  1720  0311                     	;# 
  1721  0312                     	;# 
  1722  0313                     	;# 
  1723  0318                     	;# 
  1724  0318                     	;# 
  1725  0319                     	;# 
  1726  031A                     	;# 
  1727  038C                     	;# 
  1728  038E                     	;# 
  1729  0391                     	;# 
  1730  0392                     	;# 
  1731  0393                     	;# 
  1732  039A                     	;# 
  1733  039C                     	;# 
  1734  039D                     	;# 
  1735  039E                     	;# 
  1736  039F                     	;# 
  1737  0415                     	;# 
  1738  0416                     	;# 
  1739  0417                     	;# 
  1740  041C                     	;# 
  1741  041D                     	;# 
  1742  041E                     	;# 
  1743  0FE4                     	;# 
  1744  0FE5                     	;# 
  1745  0FE6                     	;# 
  1746  0FE7                     	;# 
  1747  0FE8                     	;# 
  1748  0FE9                     	;# 
  1749  0FEA                     	;# 
  1750  0FEB                     	;# 
  1751  0FED                     	;# 
  1752  0FEE                     	;# 
  1753  0FEF                     	;# 
  1754  0000                     	;# 
  1755  0001                     	;# 
  1756  0002                     	;# 
  1757  0003                     	;# 
  1758  0004                     	;# 
  1759  0005                     	;# 
  1760  0006                     	;# 
  1761  0007                     	;# 
  1762  0008                     	;# 
  1763  0009                     	;# 
  1764  000A                     	;# 
  1765  000B                     	;# 
  1766  000C                     	;# 
  1767  000E                     	;# 
  1768  0011                     	;# 
  1769  0012                     	;# 
  1770  0013                     	;# 
  1771  0015                     	;# 
  1772  0016                     	;# 
  1773  0016                     	;# 
  1774  0017                     	;# 
  1775  0018                     	;# 
  1776  0019                     	;# 
  1777  001A                     	;# 
  1778  001B                     	;# 
  1779  001C                     	;# 
  1780  001E                     	;# 
  1781  001F                     	;# 
  1782  008C                     	;# 
  1783  008E                     	;# 
  1784  0091                     	;# 
  1785  0092                     	;# 
  1786  0093                     	;# 
  1787  0095                     	;# 
  1788  0096                     	;# 
  1789  0097                     	;# 
  1790  0098                     	;# 
  1791  0099                     	;# 
  1792  009A                     	;# 
  1793  009B                     	;# 
  1794  009B                     	;# 
  1795  009C                     	;# 
  1796  009D                     	;# 
  1797  009E                     	;# 
  1798  010C                     	;# 
  1799  010E                     	;# 
  1800  0111                     	;# 
  1801  0112                     	;# 
  1802  0113                     	;# 
  1803  0114                     	;# 
  1804  0115                     	;# 
  1805  0116                     	;# 
  1806  0117                     	;# 
  1807  0118                     	;# 
  1808  0119                     	;# 
  1809  011A                     	;# 
  1810  011B                     	;# 
  1811  011D                     	;# 
  1812  011E                     	;# 
  1813  018C                     	;# 
  1814  018E                     	;# 
  1815  0191                     	;# 
  1816  0191                     	;# 
  1817  0192                     	;# 
  1818  0193                     	;# 
  1819  0193                     	;# 
  1820  0193                     	;# 
  1821  0194                     	;# 
  1822  0195                     	;# 
  1823  0196                     	;# 
  1824  0199                     	;# 
  1825  019A                     	;# 
  1826  019B                     	;# 
  1827  019B                     	;# 
  1828  019C                     	;# 
  1829  019D                     	;# 
  1830  019E                     	;# 
  1831  019F                     	;# 
  1832  020C                     	;# 
  1833  020E                     	;# 
  1834  0211                     	;# 
  1835  0211                     	;# 
  1836  0212                     	;# 
  1837  0212                     	;# 
  1838  0213                     	;# 
  1839  0213                     	;# 
  1840  0214                     	;# 
  1841  0214                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  0291                     	;# 
  1850  0291                     	;# 
  1851  0292                     	;# 
  1852  0293                     	;# 
  1853  0294                     	;# 
  1854  0295                     	;# 
  1855  0295                     	;# 
  1856  0296                     	;# 
  1857  0298                     	;# 
  1858  0298                     	;# 
  1859  0299                     	;# 
  1860  029A                     	;# 
  1861  029B                     	;# 
  1862  029C                     	;# 
  1863  029D                     	;# 
  1864  029E                     	;# 
  1865  0311                     	;# 
  1866  0311                     	;# 
  1867  0312                     	;# 
  1868  0313                     	;# 
  1869  0318                     	;# 
  1870  0318                     	;# 
  1871  0319                     	;# 
  1872  031A                     	;# 
  1873  038C                     	;# 
  1874  038E                     	;# 
  1875  0391                     	;# 
  1876  0392                     	;# 
  1877  0393                     	;# 
  1878  039A                     	;# 
  1879  039C                     	;# 
  1880  039D                     	;# 
  1881  039E                     	;# 
  1882  039F                     	;# 
  1883  0415                     	;# 
  1884  0416                     	;# 
  1885  0417                     	;# 
  1886  041C                     	;# 
  1887  041D                     	;# 
  1888  041E                     	;# 
  1889  0FE4                     	;# 
  1890  0FE5                     	;# 
  1891  0FE6                     	;# 
  1892  0FE7                     	;# 
  1893  0FE8                     	;# 
  1894  0FE9                     	;# 
  1895  0FEA                     	;# 
  1896  0FEB                     	;# 
  1897  0FED                     	;# 
  1898  0FEE                     	;# 
  1899  0FEF                     	;# 
  1900  0000                     	;# 
  1901  0001                     	;# 
  1902  0002                     	;# 
  1903  0003                     	;# 
  1904  0004                     	;# 
  1905  0005                     	;# 
  1906  0006                     	;# 
  1907  0007                     	;# 
  1908  0008                     	;# 
  1909  0009                     	;# 
  1910  000A                     	;# 
  1911  000B                     	;# 
  1912  000C                     	;# 
  1913  000E                     	;# 
  1914  0011                     	;# 
  1915  0012                     	;# 
  1916  0013                     	;# 
  1917  0015                     	;# 
  1918  0016                     	;# 
  1919  0016                     	;# 
  1920  0017                     	;# 
  1921  0018                     	;# 
  1922  0019                     	;# 
  1923  001A                     	;# 
  1924  001B                     	;# 
  1925  001C                     	;# 
  1926  001E                     	;# 
  1927  001F                     	;# 
  1928  008C                     	;# 
  1929  008E                     	;# 
  1930  0091                     	;# 
  1931  0092                     	;# 
  1932  0093                     	;# 
  1933  0095                     	;# 
  1934  0096                     	;# 
  1935  0097                     	;# 
  1936  0098                     	;# 
  1937  0099                     	;# 
  1938  009A                     	;# 
  1939  009B                     	;# 
  1940  009B                     	;# 
  1941  009C                     	;# 
  1942  009D                     	;# 
  1943  009E                     	;# 
  1944  010C                     	;# 
  1945  010E                     	;# 
  1946  0111                     	;# 
  1947  0112                     	;# 
  1948  0113                     	;# 
  1949  0114                     	;# 
  1950  0115                     	;# 
  1951  0116                     	;# 
  1952  0117                     	;# 
  1953  0118                     	;# 
  1954  0119                     	;# 
  1955  011A                     	;# 
  1956  011B                     	;# 
  1957  011D                     	;# 
  1958  011E                     	;# 
  1959  018C                     	;# 
  1960  018E                     	;# 
  1961  0191                     	;# 
  1962  0191                     	;# 
  1963  0192                     	;# 
  1964  0193                     	;# 
  1965  0193                     	;# 
  1966  0193                     	;# 
  1967  0194                     	;# 
  1968  0195                     	;# 
  1969  0196                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019B                     	;# 
  1973  019B                     	;# 
  1974  019C                     	;# 
  1975  019D                     	;# 
  1976  019E                     	;# 
  1977  019F                     	;# 
  1978  020C                     	;# 
  1979  020E                     	;# 
  1980  0211                     	;# 
  1981  0211                     	;# 
  1982  0212                     	;# 
  1983  0212                     	;# 
  1984  0213                     	;# 
  1985  0213                     	;# 
  1986  0214                     	;# 
  1987  0214                     	;# 
  1988  0215                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0216                     	;# 
  1992  0216                     	;# 
  1993  0217                     	;# 
  1994  0217                     	;# 
  1995  0291                     	;# 
  1996  0291                     	;# 
  1997  0292                     	;# 
  1998  0293                     	;# 
  1999  0294                     	;# 
  2000  0295                     	;# 
  2001  0295                     	;# 
  2002  0296                     	;# 
  2003  0298                     	;# 
  2004  0298                     	;# 
  2005  0299                     	;# 
  2006  029A                     	;# 
  2007  029B                     	;# 
  2008  029C                     	;# 
  2009  029D                     	;# 
  2010  029E                     	;# 
  2011  0311                     	;# 
  2012  0311                     	;# 
  2013  0312                     	;# 
  2014  0313                     	;# 
  2015  0318                     	;# 
  2016  0318                     	;# 
  2017  0319                     	;# 
  2018  031A                     	;# 
  2019  038C                     	;# 
  2020  038E                     	;# 
  2021  0391                     	;# 
  2022  0392                     	;# 
  2023  0393                     	;# 
  2024  039A                     	;# 
  2025  039C                     	;# 
  2026  039D                     	;# 
  2027  039E                     	;# 
  2028  039F                     	;# 
  2029  0415                     	;# 
  2030  0416                     	;# 
  2031  0417                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000E                     	;# 
  2060  0011                     	;# 
  2061  0012                     	;# 
  2062  0013                     	;# 
  2063  0015                     	;# 
  2064  0016                     	;# 
  2065  0016                     	;# 
  2066  0017                     	;# 
  2067  0018                     	;# 
  2068  0019                     	;# 
  2069  001A                     	;# 
  2070  001B                     	;# 
  2071  001C                     	;# 
  2072  001E                     	;# 
  2073  001F                     	;# 
  2074  008C                     	;# 
  2075  008E                     	;# 
  2076  0091                     	;# 
  2077  0092                     	;# 
  2078  0093                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0098                     	;# 
  2083  0099                     	;# 
  2084  009A                     	;# 
  2085  009B                     	;# 
  2086  009B                     	;# 
  2087  009C                     	;# 
  2088  009D                     	;# 
  2089  009E                     	;# 
  2090  010C                     	;# 
  2091  010E                     	;# 
  2092  0111                     	;# 
  2093  0112                     	;# 
  2094  0113                     	;# 
  2095  0114                     	;# 
  2096  0115                     	;# 
  2097  0116                     	;# 
  2098  0117                     	;# 
  2099  0118                     	;# 
  2100  0119                     	;# 
  2101  011A                     	;# 
  2102  011B                     	;# 
  2103  011D                     	;# 
  2104  011E                     	;# 
  2105  018C                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0193                     	;# 
  2113  0194                     	;# 
  2114  0195                     	;# 
  2115  0196                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020C                     	;# 
  2125  020E                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0294                     	;# 
  2146  0295                     	;# 
  2147  0295                     	;# 
  2148  0296                     	;# 
  2149  0298                     	;# 
  2150  0298                     	;# 
  2151  0299                     	;# 
  2152  029A                     	;# 
  2153  029B                     	;# 
  2154  029C                     	;# 
  2155  029D                     	;# 
  2156  029E                     	;# 
  2157  0311                     	;# 
  2158  0311                     	;# 
  2159  0312                     	;# 
  2160  0313                     	;# 
  2161  0318                     	;# 
  2162  0318                     	;# 
  2163  0319                     	;# 
  2164  031A                     	;# 
  2165  038C                     	;# 
  2166  038E                     	;# 
  2167  0391                     	;# 
  2168  0392                     	;# 
  2169  0393                     	;# 
  2170  039A                     	;# 
  2171  039C                     	;# 
  2172  039D                     	;# 
  2173  039E                     	;# 
  2174  039F                     	;# 
  2175  0415                     	;# 
  2176  0416                     	;# 
  2177  0417                     	;# 
  2178  041C                     	;# 
  2179  041D                     	;# 
  2180  041E                     	;# 
  2181  0FE4                     	;# 
  2182  0FE5                     	;# 
  2183  0FE6                     	;# 
  2184  0FE7                     	;# 
  2185  0FE8                     	;# 
  2186  0FE9                     	;# 
  2187  0FEA                     	;# 
  2188  0FEB                     	;# 
  2189  0FED                     	;# 
  2190  0FEE                     	;# 
  2191  0FEF                     	;# 
  2192                           
  2193 ;; Function _changeDir is unused but had its address taken
  2194  0000                     
  2195 ;; Function _accelerate is unused but had its address taken
  2196  0000                     
  2197 ;; Function _slowDown is unused but had its address taken
  2198  0000                     
  2199 ;; Function _addTimer is unused but had its address taken
  2200  0000                     
  2201 ;; Function _removeTimer is unused but had its address taken
  2202  0000                     
  2203 ;; Function _resetTimer is unused but had its address taken
  2204  0000                     
  2205 ;; Function _isDone is unused but had its address taken
  2206  0000                     
  2207 ;; Function _setCallback is unused but had its address taken
  2208  0000                     
  2209 ;; Function _close is unused but had its address taken
  2210  0000                     
  2211 ;; Function _espi_cl is unused but had its address taken
  2212  0000                     
  2213                           	psect	idataBANK0
  2214  0824                     __pidataBANK0:
  2215                           
  2216                           ;initializer for _sequence
  2217  0824  3410               	retlw	16
  2218                           
  2219                           ;initializer for _instance@Comm$F3017
  2220  0825  34A7               	retlw	low _tasks@Comm$F2950
  2221  0826  3403               	retlw	high _tasks@Comm$F2950
  2222  0827  34F4               	retlw	low _setTimeBaseCounter@Comm$F2954
  2223  0828  3417               	retlw	high _setTimeBaseCounter@Comm$F2954
  2224  0829  3400               	retlw	0
  2225  082A  34A0               	retlw	low (_table| (0+512))
  2226  082B  3400               	retlw	0
  2227  082C  3400               	retlw	0
  2228                           
  2229                           	psect	idataBANK2
  2230  09CB                     __pidataBANK2:
  2231                           
  2232                           ;initializer for setRegistersTable@F441
  2233  09CB  3400               	retlw	0
  2234  09CC  3400               	retlw	0
  2235  09CD  3469               	retlw	low ((_instance@Comm$F3017| 0+6))
  2236  09CE  3400               	retlw	high ((_instance@Comm$F3017| 0+6))
  2237  09CF  3464               	retlw	100
  2238                           
  2239                           ;initializer for _instance
  2240  09D0  3400               	retlw	0
  2241  09D1  3400               	retlw	0
  2242  09D2  3400               	retlw	0
  2243  09D3  3400               	retlw	0
  2244  09D4  3400               	retlw	0
  2245  09D5  3400               	retlw	0
  2246  09D6  3400               	retlw	0
  2247  09D7  3400               	retlw	0
  2248  09D8  3462               	retlw	low _updateMillis
  2249  09D9  3408               	retlw	high _updateMillis
  2250  09DA  3400               	retlw	0
  2251  09DB  3400               	retlw	0
  2252  09DC  3400               	retlw	0
  2253  09DD  3400               	retlw	0
  2254  09DE  3400               	retlw	0
  2255  09DF  3400               	retlw	0
  2256                           
  2257                           	psect	idataBANK5
  2258  0BE4                     __pidataBANK5:
  2259                           
  2260                           ;initializer for _table
  2261  0BE4  3447               	retlw	low _setRegistersTable
  2262  0BE5  340E               	retlw	high _setRegistersTable
  2263  0BE6  3400               	retlw	0
  2264  0BE7  3400               	retlw	0
  2265  0BE8  3400               	retlw	0
  2266  0BE9  3400               	retlw	0
  2267  0BEA  3400               	retlw	0
  2268  0BEB  3400               	retlw	0
  2269  0BEC  3400               	retlw	0
  2270  0BED  3400               	retlw	0
  2271  0BEE  3400               	retlw	0
  2272  0BEF  3400               	retlw	0
  2273  0BF0  3400               	retlw	0
  2274  0BF1  3400               	retlw	0
  2275  0BF2  3400               	retlw	0
  2276  0BF3  3400               	retlw	0
  2277  0BF4  3400               	retlw	0
  2278  0BF5  3400               	retlw	0
  2279  0BF6  3400               	retlw	0
  2280  0BF7  3400               	retlw	0
  2281  0BF8  3400               	retlw	0
  2282  0BF9  3400               	retlw	0
  2283  0BFA  3400               	retlw	0
  2284  0BFB  3400               	retlw	0
  2285  0BFC  3400               	retlw	0
  2286  0BFD  3400               	retlw	0
  2287  0BFE  3400               	retlw	0
  2288  0BFF  3400               	retlw	0
  2289  0C00  3400               	retlw	0
  2290  0C01  3400               	retlw	0
  2291  0C02  3400               	retlw	0
  2292  0C03  3400               	retlw	0
  2293  0C04  3400               	retlw	0
  2294  0C05  3400               	retlw	0
  2295  0C06  3400               	retlw	0
  2296  0C07  3400               	retlw	0
  2297  0C08  3400               	retlw	0
  2298  0C09  3400               	retlw	0
  2299  0C0A  3400               	retlw	0
  2300  0C0B  3400               	retlw	0
  2301  0C0C  3400               	retlw	0
  2302  0C0D  3400               	retlw	0
  2303  0C0E  3400               	retlw	0
  2304  0C0F  3400               	retlw	0
  2305  0C10  3400               	retlw	0
  2306  0C11  3400               	retlw	0
  2307  0C12  3400               	retlw	0
  2308  0C13  3400               	retlw	0
  2309  0C14  3400               	retlw	0
  2310  0C15  3400               	retlw	0
  2311  0C16  3400               	retlw	0
  2312  0C17  3400               	retlw	0
  2313  0C18  3480               	retlw	low _getRegister
  2314  0C19  340B               	retlw	high _getRegister
  2315                           
  2316                           	psect	idataBANK8
  2317  0B02                     __pidataBANK8:
  2318                           
  2319                           ;initializer for appTasks@F3078
  2320  0B02  3400               	retlw	0
  2321  0B03  3400               	retlw	0
  2322  0B04  346B               	retlw	low (_speedm1| (0+256))
  2323  0B05  3401               	retlw	high (_speedm1| (0+256))
  2324  0B06  340A               	retlw	10
  2325  0B07  3400               	retlw	0
  2326  0B08  3400               	retlw	0
  2327  0B09  3469               	retlw	low (_speedm2| (0+256))
  2328  0B0A  3401               	retlw	high (_speedm2| (0+256))
  2329  0B0B  340B               	retlw	11
  2330  0B0C  34C8               	retlw	low _setMotor1Clockwise
  2331  0B0D  3408               	retlw	high _setMotor1Clockwise
  2332  0B0E  3400               	retlw	0
  2333  0B0F  3400               	retlw	0
  2334  0B10  3432               	retlw	50
  2335  0B11  34AE               	retlw	low _setMotor1Counterclockwise
  2336  0B12  3408               	retlw	high _setMotor1Counterclockwise
  2337  0B13  3400               	retlw	0
  2338  0B14  3400               	retlw	0
  2339  0B15  3433               	retlw	51
  2340  0B16  34D6               	retlw	low _setMotor2Clockwise
  2341  0B17  3408               	retlw	high _setMotor2Clockwise
  2342  0B18  3400               	retlw	0
  2343  0B19  3400               	retlw	0
  2344  0B1A  3434               	retlw	52
  2345  0B1B  34BB               	retlw	low _setMotor2Counterclockwise
  2346  0B1C  3408               	retlw	high _setMotor2Counterclockwise
  2347  0B1D  3400               	retlw	0
  2348  0B1E  3400               	retlw	0
  2349  0B1F  3435               	retlw	53
  2350  0B20  34C0               	retlw	low _runMotors
  2351  0B21  340A               	retlw	high _runMotors
  2352  0B22  3400               	retlw	0
  2353  0B23  3400               	retlw	0
  2354  0B24  3437               	retlw	55
  2355  0B25  34A3               	retlw	low _stopMotors
  2356  0B26  340A               	retlw	high _stopMotors
  2357  0B27  3400               	retlw	0
  2358  0B28  3400               	retlw	0
  2359  0B29  3436               	retlw	54
  2360                           
  2361                           	psect	stringtext1
  2362  1800                     __pstringtext1:
  2363  1800                     _spi_configuration:
  2364  1800  3405               	retlw	5
  2365  1801  3440               	retlw	64
  2366  1802  3400               	retlw	0
  2367  1803  3401               	retlw	1
  2368  1804                     __end_of_spi_configuration:
  2369                           
  2370                           	psect	nvBANK1
  2371  00ED                     __pnvBANK1:
  2372  00ED                     _MSSP_InterruptHandler:
  2373  00ED                     	ds	2
  2374  0012                     _PIR2bits	set	18
  2375  000B                     _INTCONbits	set	11
  2376  0013                     _PIR3bits	set	19
  2377  001C                     _T2CONbits	set	28
  2378  001C                     _T2CON	set	28
  2379  0011                     _PIR1bits	set	17
  2380  001A                     _TMR2	set	26
  2381  001B                     _PR2	set	27
  2382  008E                     _TRISCbits	set	142
  2383  0095                     _OPTION_REGbits	set	149
  2384  008E                     _TRISC	set	142
  2385  008C                     _TRISA	set	140
  2386  0097                     _WDTCON	set	151
  2387  0098                     _OSCTUNE	set	152
  2388  0099                     _OSCCON	set	153
  2389  0091                     _PIE1bits	set	145
  2390  0092                     _PIE2bits	set	146
  2391  0093                     _PIE3bits	set	147
  2392  04D6                     _PLLR	set	1238
  2393  010C                     _LATAbits	set	268
  2394  010E                     _LATCbits	set	270
  2395  011E                     _APFCON1	set	286
  2396  011D                     _APFCON0	set	285
  2397  010E                     _LATC	set	270
  2398  010C                     _LATA	set	268
  2399  0116                     _BORCON	set	278
  2400  018C                     _ANSELA	set	396
  2401  018E                     _ANSELC	set	398
  2402  0214                     _SSP1STATbits	set	532
  2403  0211                     _SSP1BUF	set	529
  2404  0216                     _SSP1CON2	set	534
  2405  0215                     _SSP1CON1bits	set	533
  2406  0212                     _SSP1ADD	set	530
  2407  0215                     _SSP1CON1	set	533
  2408  0214                     _SSP1STAT	set	532
  2409  020E                     _WPUC	set	526
  2410  020C                     _WPUA	set	524
  2411  0291                     _CCPR1L	set	657
  2412  0292                     _CCPR1H	set	658
  2413  0296                     _PSTR1CON	set	662
  2414  0294                     _PWM1CON	set	660
  2415  0295                     _ECCP1AS	set	661
  2416  0293                     _CCP1CON	set	659
  2417  029E                     _CCPTMRSbits	set	670
  2418  0312                     _CCPR3H	set	786
  2419  0311                     _CCPR3L	set	785
  2420  0313                     _CCP3CON	set	787
  2421  041E                     _T6CONbits	set	1054
  2422  041E                     _T6CON	set	1054
  2423  041C                     _TMR6	set	1052
  2424  041D                     _PR6	set	1053
  2425  0417                     _T4CONbits	set	1047
  2426  0417                     _T4CON	set	1047
  2427  0415                     _TMR4	set	1045
  2428  0416                     _PR4	set	1046
  2429                           
  2430                           	psect	cinit
  2431  0035                     start_initialization:	
  2432                           ; #config settings
  2433                           
  2434  0035                     __initialization:
  2435                           
  2436                           ; Initialize objects allocated to BANK0
  2437  0035  3024               	movlw	low __pidataBANK0
  2438  0036  0084               	movwf	4
  2439  0037  3088               	movlw	(high __pidataBANK0)| (0+128)
  2440  0038  0085               	movwf	5
  2441  0039  3062               	movlw	low __pdataBANK0
  2442  003A  0086               	movwf	6
  2443  003B  3000               	movlw	high __pdataBANK0
  2444  003C  0087               	movwf	7
  2445  003D  3009               	movlw	9
  2446  003E  3188  2007  3180   	fcall	init_ram
  2447                           
  2448                           ; Initialize objects allocated to BANK2
  2449  0041  30CB               	movlw	low __pidataBANK2
  2450  0042  0084               	movwf	4
  2451  0043  3089               	movlw	(high __pidataBANK2)| (0+128)
  2452  0044  0085               	movwf	5
  2453  0045  3048               	movlw	low __pdataBANK2
  2454  0046  0086               	movwf	6
  2455  0047  3001               	movlw	high __pdataBANK2
  2456  0048  0087               	movwf	7
  2457  0049  3015               	movlw	21
  2458  004A  3188  2007  3180   	fcall	init_ram
  2459                           
  2460                           ; Initialize objects allocated to BANK5
  2461  004D  30E4               	movlw	low __pidataBANK5
  2462  004E  0084               	movwf	4
  2463  004F  308B               	movlw	(high __pidataBANK5)| (0+128)
  2464  0050  0085               	movwf	5
  2465  0051  30A0               	movlw	low __pdataBANK5
  2466  0052  0086               	movwf	6
  2467  0053  3002               	movlw	high __pdataBANK5
  2468  0054  0087               	movwf	7
  2469  0055  3036               	movlw	54
  2470  0056  3188  2007  3180   	fcall	init_ram
  2471                           
  2472                           ; Initialize objects allocated to BANK8
  2473  0059  3002               	movlw	low __pidataBANK8
  2474  005A  0084               	movwf	4
  2475  005B  308B               	movlw	(high __pidataBANK8)| (0+128)
  2476  005C  0085               	movwf	5
  2477  005D  3020               	movlw	low __pdataBANK8
  2478  005E  0086               	movwf	6
  2479  005F  3004               	movlw	high __pdataBANK8
  2480  0060  0087               	movwf	7
  2481  0061  3028               	movlw	40
  2482  0062  3188  2007  3180   	fcall	init_ram
  2483                           
  2484                           ; Clear objects allocated to BANK0
  2485  0065  01EB               	clrf	__pbssBANK0& (0+127)
  2486  0066  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2487  0067  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2488  0068  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2489  0069  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  2490                           
  2491                           ; Clear objects allocated to BANK1
  2492  006A  30D9               	movlw	low __pbssBANK1
  2493  006B  0084               	movwf	4
  2494  006C  3000               	movlw	high __pbssBANK1
  2495  006D  0085               	movwf	5
  2496  006E  3014               	movlw	20
  2497  006F  3188  2001  3180   	fcall	clear_ram0
  2498                           
  2499                           ; Clear objects allocated to BANK2
  2500  0072  305D               	movlw	low __pbssBANK2
  2501  0073  0084               	movwf	4
  2502  0074  3001               	movlw	high __pbssBANK2
  2503  0075  0085               	movwf	5
  2504  0076  3010               	movlw	16
  2505  0077  3188  2001  3180   	fcall	clear_ram0
  2506                           
  2507                           ; Clear objects allocated to BANK3
  2508  007A  30A0               	movlw	low __pbssBANK3
  2509  007B  0084               	movwf	4
  2510  007C  3001               	movlw	high __pbssBANK3
  2511  007D  0085               	movwf	5
  2512  007E  3040               	movlw	64
  2513  007F  3188  2001  3180   	fcall	clear_ram0
  2514                           
  2515                           ; Clear objects allocated to BANK4
  2516  0082  3020               	movlw	low __pbssBANK4
  2517  0083  0084               	movwf	4
  2518  0084  3002               	movlw	high __pbssBANK4
  2519  0085  0085               	movwf	5
  2520  0086  3039               	movlw	57
  2521  0087  3188  2001  3180   	fcall	clear_ram0
  2522                           
  2523                           ; Clear objects allocated to BANK6
  2524  008A  3020               	movlw	low __pbssBANK6
  2525  008B  0084               	movwf	4
  2526  008C  3003               	movlw	high __pbssBANK6
  2527  008D  0085               	movwf	5
  2528  008E  303B               	movlw	59
  2529  008F  3188  2001  3180   	fcall	clear_ram0
  2530                           
  2531                           ; Clear objects allocated to BANK7
  2532  0092  30A0               	movlw	low __pbssBANK7
  2533  0093  0084               	movwf	4
  2534  0094  3003               	movlw	high __pbssBANK7
  2535  0095  0085               	movwf	5
  2536  0096  3036               	movlw	54
  2537  0097  3188  2001  3180   	fcall	clear_ram0
  2538                           
  2539                           ; Clear objects allocated to BANK8
  2540  009A  3048               	movlw	low __pbssBANK8
  2541  009B  0084               	movwf	4
  2542  009C  3004               	movlw	high __pbssBANK8
  2543  009D  0085               	movwf	5
  2544  009E  301B               	movlw	27
  2545  009F  3188  2001  3180   	fcall	clear_ram0
  2546                           
  2547                           ; Clear objects allocated to BANK9
  2548  00A2  30A0               	movlw	low __pbssBANK9
  2549  00A3  0084               	movwf	4
  2550  00A4  3004               	movlw	high __pbssBANK9
  2551  00A5  0085               	movwf	5
  2552  00A6  3039               	movlw	57
  2553  00A7  3188  2001  3180   	fcall	clear_ram0
  2554  00AA                     end_of_initialization:	
  2555                           ;End of C runtime variable initialization code
  2556                           
  2557  00AA                     __end_of__initialization:
  2558  00AA  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2559  00AB  0020               	movlb	0
  2560  00AC  3188  2857         	ljmp	_main	;jump to C main() function
  2561                           
  2562                           	psect	bssBANK0
  2563  006B                     __pbssBANK0:
  2564  006B                     _currentTimeMillis@Comm$F3024:
  2565  006B                     	ds	1
  2566  006C                     _state@Comm$F3023:
  2567  006C                     	ds	1
  2568  006D                     _currentTimeMillis@SpiCommunication$F2173:
  2569  006D                     	ds	1
  2570  006E                     _nTimers:
  2571  006E                     	ds	1
  2572  006F                     _timeBase:
  2573  006F                     	ds	1
  2574                           
  2575                           	psect	dataBANK0
  2576  0062                     __pdataBANK0:
  2577  0062                     _sequence:
  2578  0062                     	ds	1
  2579  0063                     _instance@Comm$F3017:
  2580  0063                     	ds	8
  2581                           
  2582                           	psect	bssBANK1
  2583  00D9                     __pbssBANK1:
  2584  00D9                     _timeoutCounter:
  2585  00D9                     	ds	4
  2586  00DD                     _SPI_InterruptHandler:
  2587  00DD                     	ds	2
  2588  00DF                     _TMR4_InterruptHandler:
  2589  00DF                     	ds	2
  2590  00E1                     _buff:
  2591  00E1                     	ds	1
  2592  00E2                     _currentTimeMillis:
  2593  00E2                     	ds	1
  2594  00E3                     _outFrame:
  2595  00E3                     	ds	5
  2596  00E8                     _inputFrame:
  2597  00E8                     	ds	5
  2598                           
  2599                           	psect	bssBANK2
  2600  015D                     __pbssBANK2:
  2601  015D                     _timers:
  2602  015D                     	ds	5
  2603  0162                     __speedm2:
  2604  0162                     	ds	2
  2605  0164                     __speedm1:
  2606  0164                     	ds	2
  2607  0166                     _comm:
  2608  0166                     	ds	1
  2609  0167                     _time:
  2610  0167                     	ds	1
  2611  0168                     _state:
  2612  0168                     	ds	1
  2613  0169                     _speedm2:
  2614  0169                     	ds	2
  2615  016B                     _speedm1:
  2616  016B                     	ds	2
  2617                           
  2618                           	psect	dataBANK2
  2619  0148                     __pdataBANK2:
  2620  0148                     setRegistersTable@F441:
  2621  0148                     	ds	5
  2622  014D                     _instance:
  2623  014D                     	ds	16
  2624                           
  2625                           	psect	bssBANK3
  2626  01A0                     __pbssBANK3:
  2627  01A0                     _motor2:
  2628  01A0                     	ds	32
  2629  01C0                     _motor1:
  2630  01C0                     	ds	32
  2631                           
  2632                           	psect	bssBANK4
  2633  0220                     __pbssBANK4:
  2634  0220                     _spi:
  2635  0220                     	ds	57
  2636                           
  2637                           	psect	dataBANK5
  2638  02A0                     __pdataBANK5:
  2639  02A0                     _table:
  2640  02A0                     	ds	54
  2641                           
  2642                           	psect	bssBANK6
  2643  0320                     __pbssBANK6:
  2644  0320                     NewDCMotor@F128:
  2645  0320                     	ds	32
  2646  0340                     NewTimer@F121:
  2647  0340                     	ds	27
  2648                           
  2649                           	psect	bssBANK7
  2650  03A0                     __pbssBANK7:
  2651  03A0                     _tmr2:
  2652  03A0                     	ds	27
  2653  03BB                     _tmr1:
  2654  03BB                     	ds	27
  2655                           
  2656                           	psect	bssBANK8
  2657  0448                     __pbssBANK8:
  2658  0448                     _tmr3:
  2659  0448                     	ds	27
  2660                           
  2661                           	psect	dataBANK8
  2662  0420                     __pdataBANK8:
  2663  0420                     appTasks@F3078:
  2664  0420                     	ds	40
  2665                           
  2666                           	psect	bssBANK9
  2667  04A0                     __pbssBANK9:
  2668  04A0                     NewSpiDriver@F2536:
  2669  04A0                     	ds	57
  2670                           
  2671                           	psect	inittext
  2672  0807                     init_ram:
  2673  0807  00FE               	movwf	btemp
  2674  0808                     initloop:
  2675  0808  0012               	moviw fsr0++
  2676  0809  001E               	movwi fsr1++
  2677  080A  0BFE               	decfsz	btemp,f
  2678  080B  2808               	goto	initloop
  2679  080C  3400               	retlw	0
  2680                           
  2681                           	psect	clrtext
  2682  0801                     clear_ram0:	
  2683                           ;	Called with FSR0 containing the base address, and
  2684                           ;	WREG with the size to clear
  2685                           
  2686  0801  0064               	clrwdt	;clear the watchdog before getting into this loop
  2687  0802                     clrloop0:
  2688  0802  0180               	clrf	0	;clear RAM location pointed to by FSR
  2689  0803  3101               	addfsr 0,1
  2690  0804  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2691  0805  2802               	goto	clrloop0	;have we reached the end yet?
  2692  0806  3400               	retlw	0	;all done for this memory range, return
  2693                           
  2694                           	psect	cstackBANK2
  2695  0120                     __pcstackBANK2:
  2696  0120                     appTasks@regs:
  2697                           
  2698                           ; 40 bytes @ 0x0
  2699  0120                     	ds	40
  2700                           
  2701                           	psect	cstackBANK1
  2702  00A0                     __pcstackBANK1:
  2703  00A0                     NewSpiDriver@spi:
  2704                           
  2705                           ; 57 bytes @ 0x0
  2706  00A0                     	ds	57
  2707                           
  2708                           	psect	cstackCOMMON
  2709  0070                     __pcstackCOMMON:
  2710  0070                     ?_TMR4_SetInterruptHandler:
  2711  0070                     ?_TMR4_DefaultInterruptHandler:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ??_TMR4_DefaultInterruptHandler:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_TMR4_CallBack:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ??_TMR4_CallBack:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_SPI_Isr:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ??_SPI_Isr:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_SPI_Initialize:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_PIN_MANAGER_Initialize:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ??_PIN_MANAGER_Initialize:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_OSCILLATOR_Initialize:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ??_OSCILLATOR_Initialize:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ?_WDT_Initialize:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     ??_WDT_Initialize:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0070                     ?_TMR6_Initialize:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0070                     ??_TMR6_Initialize:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ?_SPI_SetInterruptHandler:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     ?_appTasks:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ?_GetTimeSystemInstance:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ??_GetTimeSystemInstance:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ??_NewDCMotor:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ??_NewSpiDriver:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_espi_op:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_espi_rd:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ??_espi_rd:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_espi_wr1:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_espi_wr2:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_espi_rst:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_espi_int:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_GetCommunicationInstance:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ??_GetCommunicationInstance:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_setSpeed:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_setTimeBaseCounter:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_stop:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_run:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_updateMillis:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ??_updateMillis:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_tasks@TimeSystem$F1859:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ??_tasks@TimeSystem$F1861:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_txDone:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_rxDone:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_setTimeBaseCounter@SpiCommunication$F2155:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_healthy:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ?_tasks@Comm$F2951:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_setTimeBaseCounter@Comm$F2956:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_getSUM:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_reset@Comm$F2986:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_creatErrorFrame:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ??_creatErrorFrame:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?_memset:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?_PWM3_Initialize:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ??_PWM3_Initialize:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ?_TMR2_Initialize:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ??_TMR2_Initialize:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_TMR4_Initialize:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_TMR4_ISR:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ??_TMR4_ISR:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_EPWM1_Initialize:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ??_EPWM1_Initialize:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_INTERRUPT_InterruptManager:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ??_INTERRUPT_InterruptManager:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_SYSTEM_Initialize:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_SPI_Open:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ??_SPI_Open:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_main:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_wdt:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_dataReceived:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_motor1SetDir:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_motor2SetDir:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_setMotor1Clockwise:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_setMotor1Counterclockwise:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_setMotor2Clockwise:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_setMotor2Counterclockwise:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_runMotors:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_stopMotors:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?___run:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_commandHandler:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_transferFrames:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_interrupHandler:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_read:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_memcpy:	
  2949                           ; 2 bytes @ 0x0
  2950                           
  2951  0070                     ?_inputR:	
  2952                           ; 2 bytes @ 0x0
  2953                           
  2954  0070                     ?___lwdiv:	
  2955                           ; 2 bytes @ 0x0
  2956                           
  2957  0070                     ?___lmul:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0070                     ?___aldiv:	
  2961                           ; 4 bytes @ 0x0
  2962                           
  2963  0070                     motor1SetDir@dir:	
  2964                           ; 4 bytes @ 0x0
  2965                           
  2966  0070                     motor2SetDir@dir:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     setSpeed@this:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     setTimeBaseCounter@timeMillis:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     stop@this:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     run@this:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     read@this:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     txDone@this:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     rxDone@this:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     healthy@this:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0070                     setTimeBaseCounter@SpiCommunication$F2153@timeMillis:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     getSUM@n:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0070                     setTimeBaseCounter@Comm$F2954@timeMillis:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0070                     espi_wr1@byte:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0070                     espi_wr2@byte:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0070                     espi_int@ie:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0070                     TMR4_SetInterruptHandler@InterruptHandler:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0070                     SPI_SetInterruptHandler@handler:	
  3015                           ; 2 bytes @ 0x0
  3016                           
  3017  0070                     ___run@function:	
  3018                           ; 2 bytes @ 0x0
  3019                           
  3020  0070                     ___lwdiv@divisor:	
  3021                           ; 2 bytes @ 0x0
  3022                           
  3023  0070                     memcpy@d1:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0070                     memset@c:	
  3027                           ; 2 bytes @ 0x0
  3028                           
  3029  0070                     ___lmul@multiplier:	
  3030                           ; 2 bytes @ 0x0
  3031                           
  3032  0070                     ___aldiv@divisor:	
  3033                           ; 4 bytes @ 0x0
  3034                           
  3035                           
  3036                           ; 4 bytes @ 0x0
  3037  0070                     	ds	1
  3038  0071                     ??_espi_wr1:
  3039  0071                     ??_espi_wr2:	
  3040                           ; 1 bytes @ 0x1
  3041                           
  3042  0071                     ??_espi_int:	
  3043                           ; 1 bytes @ 0x1
  3044                           
  3045  0071                     ??_setTimeBaseCounter:	
  3046                           ; 1 bytes @ 0x1
  3047                           
  3048  0071                     ??_stop:	
  3049                           ; 1 bytes @ 0x1
  3050                           
  3051  0071                     ??_run:	
  3052                           ; 1 bytes @ 0x1
  3053                           
  3054  0071                     ??_txDone:	
  3055                           ; 1 bytes @ 0x1
  3056                           
  3057  0071                     ??_rxDone:	
  3058                           ; 1 bytes @ 0x1
  3059                           
  3060  0071                     ??_setTimeBaseCounter@SpiCommunication$F2157:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0071                     ?_exchangeDone:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0071                     ??_healthy:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0071                     ??_setTimeBaseCounter@Comm$F2958:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0071                     ??_getSUM:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075  0071                     ??_motor1SetDir:	
  3076                           ; 1 bytes @ 0x1
  3077                           
  3078  0071                     ??_motor2SetDir:	
  3079                           ; 1 bytes @ 0x1
  3080                           
  3081  0071                     ??_runMotors:	
  3082                           ; 1 bytes @ 0x1
  3083                           
  3084  0071                     ??_stopMotors:	
  3085                           ; 1 bytes @ 0x1
  3086                           
  3087  0071                     ?_write:	
  3088                           ; 1 bytes @ 0x1
  3089                           
  3090  0071                     tasks@TimeSystem$F1858@i:	
  3091                           ; 2 bytes @ 0x1
  3092                           
  3093  0071                     read@data:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0071                     write@this:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099  0071                     exchangeDone@this:	
  3100                           ; 1 bytes @ 0x1
  3101                           
  3102  0071                     setSpeed@speed_X10:	
  3103                           ; 1 bytes @ 0x1
  3104                           
  3105                           
  3106                           ; 2 bytes @ 0x1
  3107  0071                     	ds	1
  3108  0072                     ??_TMR4_SetInterruptHandler:
  3109  0072                     ??_SPI_Initialize:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0072                     ??_SPI_SetInterruptHandler:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0072                     ?_espi_setInterrupHandler:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0072                     ??_exchangeDone:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0072                     ??_TMR4_Initialize:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0072                     ??_SYSTEM_Initialize:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0072                     ??___run:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0072                     read@length:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0072                     write@data:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0072                     getSUM@out:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0072                     espi_setInterrupHandler@fun:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0072                     ___lwdiv@dividend:	
  3143                           ; 2 bytes @ 0x2
  3144                           
  3145  0072                     memcpy@s1:	
  3146                           ; 2 bytes @ 0x2
  3147                           
  3148  0072                     memset@n:	
  3149                           ; 2 bytes @ 0x2
  3150                           
  3151                           
  3152                           ; 2 bytes @ 0x2
  3153  0072                     	ds	1
  3154  0073                     ??_setSpeed:
  3155  0073                     ??_read:	
  3156                           ; 1 bytes @ 0x3
  3157                           
  3158  0073                     SPI_Open@spiUniqueConfiguration:	
  3159                           ; 1 bytes @ 0x3
  3160                           
  3161  0073                     write@length:	
  3162                           ; 1 bytes @ 0x3
  3163                           
  3164  0073                     getSUM@i:	
  3165                           ; 1 bytes @ 0x3
  3166                           
  3167                           
  3168                           ; 1 bytes @ 0x3
  3169  0073                     	ds	1
  3170  0074                     ??_espi_op:
  3171  0074                     ??_espi_rst:	
  3172                           ; 1 bytes @ 0x4
  3173                           
  3174  0074                     ??_espi_setInterrupHandler:	
  3175                           ; 1 bytes @ 0x4
  3176                           
  3177  0074                     ??_write:	
  3178                           ; 1 bytes @ 0x4
  3179                           
  3180  0074                     ?_open:	
  3181                           ; 1 bytes @ 0x4
  3182                           
  3183  0074                     ??_memset:	
  3184                           ; 1 bytes @ 0x4
  3185                           
  3186  0074                     ??___lwdiv:	
  3187                           ; 1 bytes @ 0x4
  3188                           
  3189  0074                     open@this:	
  3190                           ; 1 bytes @ 0x4
  3191                           
  3192  0074                     getSUM@buff:	
  3193                           ; 1 bytes @ 0x4
  3194                           
  3195  0074                     memcpy@n:	
  3196                           ; 1 bytes @ 0x4
  3197                           
  3198  0074                     ___lmul@multiplicand:	
  3199                           ; 2 bytes @ 0x4
  3200                           
  3201  0074                     ___aldiv@dividend:	
  3202                           ; 4 bytes @ 0x4
  3203                           
  3204                           
  3205                           ; 4 bytes @ 0x4
  3206  0074                     	ds	1
  3207  0075                     ??_open:
  3208  0075                     ?_reset:	
  3209                           ; 1 bytes @ 0x5
  3210                           
  3211  0075                     ??_dataReceived:	
  3212                           ; 1 bytes @ 0x5
  3213                           
  3214  0075                     reset@this:	
  3215                           ; 1 bytes @ 0x5
  3216                           
  3217  0075                     ___lwdiv@counter:	
  3218                           ; 1 bytes @ 0x5
  3219                           
  3220                           
  3221                           ; 1 bytes @ 0x5
  3222  0075                     	ds	1
  3223  0076                     ??_reset:
  3224  0076                     ??_memcpy:	
  3225                           ; 1 bytes @ 0x6
  3226                           
  3227  0076                     ??_interrupHandler:	
  3228                           ; 1 bytes @ 0x6
  3229                           
  3230  0076                     memset@dest:	
  3231                           ; 1 bytes @ 0x6
  3232                           
  3233  0076                     ___lwdiv@quotient:	
  3234                           ; 1 bytes @ 0x6
  3235                           
  3236                           
  3237                           ; 2 bytes @ 0x6
  3238  0076                     	ds	1
  3239  0077                     ?_tasks@SpiCommunication$F2140:
  3240  0077                     ??_reset@Comm$F2988:	
  3241                           ; 1 bytes @ 0x7
  3242                           
  3243  0077                     ??_inputR:	
  3244                           ; 1 bytes @ 0x7
  3245                           
  3246  0077                     tasks@SpiCommunication$F2138@this:	
  3247                           ; 1 bytes @ 0x7
  3248                           
  3249  0077                     memcpy@tmp:	
  3250                           ; 1 bytes @ 0x7
  3251                           
  3252  0077                     memset@k:	
  3253                           ; 1 bytes @ 0x7
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x7
  3257  0077                     	ds	1
  3258  0078                     ??___lmul:
  3259  0078                     ?___bmul:	
  3260                           ; 1 bytes @ 0x8
  3261                           
  3262  0078                     ??___aldiv:	
  3263                           ; 1 bytes @ 0x8
  3264                           
  3265  0078                     ?_outputW:	
  3266                           ; 1 bytes @ 0x8
  3267                           
  3268  0078                     ___bmul@multiplicand:	
  3269                           ; 2 bytes @ 0x8
  3270                           
  3271  0078                     memcpy@d:	
  3272                           ; 1 bytes @ 0x8
  3273                           
  3274  0078                     ___lmul@product:	
  3275                           ; 2 bytes @ 0x8
  3276                           
  3277                           
  3278                           ; 4 bytes @ 0x8
  3279  0078                     	ds	1
  3280  0079                     ??_wdt:
  3281  0079                     ??___bmul:	
  3282                           ; 1 bytes @ 0x9
  3283                           
  3284  0079                     memset@s:	
  3285                           ; 1 bytes @ 0x9
  3286                           
  3287                           
  3288                           ; 1 bytes @ 0x9
  3289  0079                     	ds	1
  3290  007A                     ??_outputW:
  3291  007A                     ___bmul@product:	
  3292                           ; 1 bytes @ 0xA
  3293                           
  3294  007A                     memcpy@s:	
  3295                           ; 1 bytes @ 0xA
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0xA
  3299  007A                     	ds	1
  3300  007B                     ___bmul@multiplier:
  3301                           
  3302                           ; 1 bytes @ 0xB
  3303  007B                     	ds	1
  3304  007C                     ??_getHWSpeed:
  3305  007C                     ?_setRegistersTable:	
  3306                           ; 1 bytes @ 0xC
  3307                           
  3308  007C                     ?_getRegister:	
  3309                           ; 1 bytes @ 0xC
  3310                           
  3311  007C                     ??_PWM3_LoadDutyValue:	
  3312                           ; 1 bytes @ 0xC
  3313                           
  3314  007C                     ??_EPWM1_LoadDutyValue:	
  3315                           ; 1 bytes @ 0xC
  3316                           
  3317  007C                     ??_transferFrames:	
  3318                           ; 1 bytes @ 0xC
  3319                           
  3320  007C                     setRegistersTable@tab:	
  3321                           ; 1 bytes @ 0xC
  3322                           
  3323  007C                     getRegister@address:	
  3324                           ; 1 bytes @ 0xC
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0xC
  3328  007C                     	ds	1
  3329  007D                     ??_getRegister:
  3330  007D                     setRegistersTable@length:	
  3331                           ; 1 bytes @ 0xD
  3332                           
  3333                           
  3334                           ; 1 bytes @ 0xD
  3335  007D                     	ds	1
  3336  007E                     ??_main:
  3337                           
  3338                           	psect	cstackBANK0
  3339  0020                     __pcstackBANK0:	
  3340                           ; 1 bytes @ 0xE
  3341                           
  3342  0020                     ??_tasks@SpiCommunication$F2142:
  3343  0020                     ??_setRegistersTable:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0020                     ?_NewDCMotor:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0020                     ?_NewSpiDriver:	
  3350                           ; 32 bytes @ 0x0
  3351                           
  3352  0020                     getRegister@i:	
  3353                           ; 57 bytes @ 0x0
  3354                           
  3355  0020                     ___aldiv@counter:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0020                     NewDCMotor@_setDir:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0020                     NewSpiDriver@op:	
  3362                           ; 2 bytes @ 0x0
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x0
  3366  0020                     	ds	1
  3367  0021                     ___aldiv@sign:
  3368                           
  3369                           ; 1 bytes @ 0x1
  3370  0021                     	ds	1
  3371  0022                     NewDCMotor@_setSpeed:
  3372  0022                     NewSpiDriver@cl:	
  3373                           ; 2 bytes @ 0x2
  3374                           
  3375  0022                     ___aldiv@quotient:	
  3376                           ; 2 bytes @ 0x2
  3377                           
  3378                           
  3379                           ; 4 bytes @ 0x2
  3380  0022                     	ds	2
  3381  0024                     NewSpiDriver@rd:
  3382  0024                     setRegistersTable@reg0:	
  3383                           ; 2 bytes @ 0x4
  3384                           
  3385                           
  3386                           ; 5 bytes @ 0x4
  3387  0024                     	ds	2
  3388  0026                     ?_getHWSpeed:
  3389  0026                     getHWSpeed@speed_X10:	
  3390                           ; 2 bytes @ 0x6
  3391                           
  3392  0026                     NewSpiDriver@wr1:	
  3393                           ; 2 bytes @ 0x6
  3394                           
  3395                           
  3396                           ; 2 bytes @ 0x6
  3397  0026                     	ds	2
  3398  0028                     NewSpiDriver@wr2:
  3399  0028                     getHWSpeed@sp:	
  3400                           ; 2 bytes @ 0x8
  3401                           
  3402                           
  3403                           ; 4 bytes @ 0x8
  3404  0028                     	ds	2
  3405  002A                     NewSpiDriver@rst:
  3406                           
  3407                           ; 2 bytes @ 0xA
  3408  002A                     	ds	2
  3409  002C                     ?_PWM3_LoadDutyValue:
  3410  002C                     ?_EPWM1_LoadDutyValue:	
  3411                           ; 1 bytes @ 0xC
  3412                           
  3413  002C                     PWM3_LoadDutyValue@dutyValue:	
  3414                           ; 1 bytes @ 0xC
  3415                           
  3416  002C                     EPWM1_LoadDutyValue@dutyValue:	
  3417                           ; 2 bytes @ 0xC
  3418                           
  3419  002C                     NewSpiDriver@ie:	
  3420                           ; 2 bytes @ 0xC
  3421                           
  3422                           
  3423                           ; 2 bytes @ 0xC
  3424  002C                     	ds	2
  3425  002E                     ?_setDir:
  3426  002E                     ?_tasks:	
  3427                           ; 1 bytes @ 0xE
  3428                           
  3429  002E                     setDir@this:	
  3430                           ; 1 bytes @ 0xE
  3431                           
  3432  002E                     tasks@this:	
  3433                           ; 1 bytes @ 0xE
  3434                           
  3435                           
  3436                           ; 1 bytes @ 0xE
  3437  002E                     	ds	1
  3438  002F                     ??_tasks:
  3439  002F                     setDir@dir:	
  3440                           ; 1 bytes @ 0xF
  3441                           
  3442                           
  3443                           ; 1 bytes @ 0xF
  3444  002F                     	ds	1
  3445  0030                     ??_setDir:
  3446                           
  3447                           ; 1 bytes @ 0x10
  3448  0030                     	ds	4
  3449  0034                     ??_setMotor1Clockwise:
  3450  0034                     ??_setMotor1Counterclockwise:	
  3451                           ; 1 bytes @ 0x14
  3452                           
  3453  0034                     ??_setMotor2Clockwise:	
  3454                           ; 1 bytes @ 0x14
  3455                           
  3456  0034                     ??_setMotor2Counterclockwise:	
  3457                           ; 1 bytes @ 0x14
  3458                           
  3459                           
  3460                           ; 1 bytes @ 0x14
  3461  0034                     	ds	1
  3462  0035                     ??_commandHandler:
  3463                           
  3464                           ; 1 bytes @ 0x15
  3465  0035                     	ds	2
  3466  0037                     commandHandler@reg:
  3467                           
  3468                           ; 1 bytes @ 0x17
  3469  0037                     	ds	1
  3470  0038                     ??_tasks@Comm$F2953:
  3471                           
  3472                           ; 1 bytes @ 0x18
  3473  0038                     	ds	8
  3474  0040                     NewDCMotor@m:
  3475                           
  3476                           ; 32 bytes @ 0x20
  3477  0040                     	ds	32
  3478  0060                     ??_appTasks:
  3479                           
  3480                           ; 1 bytes @ 0x40
  3481  0060                     	ds	2
  3482                           
  3483                           	psect	maintext
  3484  0857                     __pmaintext:	
  3485 ;;
  3486 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3487 ;;
  3488 ;; *************** function _main *****************
  3489 ;; Defined at:
  3490 ;;		line 50 in file "main.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : B1F/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;Total ram usage:        0 bytes
  3509 ;; Hardware stack levels required when called:   14
  3510 ;; This function calls:
  3511 ;;		_SYSTEM_Initialize
  3512 ;;		_appTasks
  3513 ;; This function is called by:
  3514 ;;		Startup code after reset
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _main
  3520  0857                     _main:
  3521  0857                     l4372:	
  3522                           ;incstack = 0
  3523                           ; Regs used in _main: [allreg]
  3524                           
  3525                           
  3526                           ;main.c: 53:     SYSTEM_Initialize();
  3527  0857  318A  2287  3188   	fcall	_SYSTEM_Initialize
  3528  085A                     l4374:
  3529                           
  3530                           ;main.c: 59:     (INTCONbits.GIE = 1);
  3531  085A  178B               	bsf	11,7	;volatile
  3532  085B                     l4376:
  3533                           
  3534                           ;main.c: 62:     (INTCONbits.PEIE = 1);
  3535  085B  170B               	bsf	11,6	;volatile
  3536  085C                     l4378:
  3537                           
  3538                           ;main.c: 71:     {;main.c: 73:         appTasks();
  3539  085C  3180  20AE  3188   	fcall	_appTasks
  3540  085F  285C               	goto	l4378
  3541  0860  3180  2833         	ljmp	start
  3542  0862                     __end_of_main:
  3543                           
  3544                           	psect	text1
  3545  00AE                     __ptext1:	
  3546 ;; *************** function _appTasks *****************
  3547 ;; Defined at:
  3548 ;;		line 80 in file "app.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  regs           40    0[BANK2 ] struct COMM_REG[8]
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3563 ;;      Locals:         0       0       0      40       0       0       0       0       0       0       0       0       
      +0       0
  3564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;      Totals:         0       2       0      40       0       0       0       0       0       0       0       0       
      +0       0
  3566 ;;Total ram usage:       42 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:   13
  3569 ;; This function calls:
  3570 ;;		Absolute function
  3571 ;;		_GetCommunicationInstance
  3572 ;;		_GetTimeSystemInstance
  3573 ;;		_NewDCMotor
  3574 ;;		_NewSpiDriver
  3575 ;;		_TMR4_SetInterruptHandler
  3576 ;;		_espi_setInterrupHandler
  3577 ;;		_open
  3578 ;;		_runMotors
  3579 ;;		_setRegistersTable
  3580 ;;		_setSpeed
  3581 ;;		_setTimeBaseCounter
  3582 ;;		_setTimeBaseCounter@Comm$F2954
  3583 ;;		_setTimeBaseCounter@SpiCommunication$F2153
  3584 ;;		_tasks
  3585 ;;		_tasks@Comm$F2950
  3586 ;;		_tasks@SpiCommunication$F2138
  3587 ;;		_tasks@TimeSystem$F1858
  3588 ;;		_wdt
  3589 ;; This function is called by:
  3590 ;;		_main
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           
  3595                           ;psect for function _appTasks
  3596  00AE                     _appTasks:
  3597  00AE                     l4302:	
  3598                           ;incstack = 0
  3599                           ; Regs used in _appTasks: [allreg]
  3600                           
  3601                           
  3602                           ;app.c: 81:     switch (state) {
  3603  00AE  2A5C               	goto	l4364
  3604  00AF                     l4304:
  3605                           
  3606                           ;app.c: 83:             time = GetTimeSystemInstance();
  3607  00AF  3188  2087  3180   	fcall	_GetTimeSystemInstance
  3608  00B2  0020               	movlb	0	; select bank0
  3609  00B3  00E0               	movwf	??_appTasks
  3610  00B4  0860               	movf	??_appTasks,w
  3611  00B5  0022               	movlb	2	; select bank2
  3612  00B6  00E7               	movwf	_time^(0+256)
  3613  00B7                     l4306:
  3614                           
  3615                           ;app.c: 84:             TMR4_SetInterruptHandler(time->updateMillis);
  3616  00B7  0867               	movf	_time^(0+256),w
  3617  00B8  3E08               	addlw	8
  3618  00B9  0086               	movwf	6
  3619  00BA  3001               	movlw	1	; select bank2/3
  3620  00BB  0087               	movwf	7
  3621  00BC  3F40               	moviw [0]fsr1
  3622  00BD  00F0               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  3623  00BE  3F41               	moviw [1]fsr1
  3624  00BF  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  3625  00C0  3197  27E8  3180   	fcall	_TMR4_SetInterruptHandler
  3626  00C3                     l4308:
  3627                           
  3628                           ;app.c: 85:             motor1 = NewDCMotor(motor1SetDir, EPWM1_LoadDutyValue);
  3629  00C3  304C               	movlw	low _motor1SetDir
  3630  00C4  0020               	movlb	0	; select bank0
  3631  00C5  00A0               	movwf	NewDCMotor@_setDir
  3632  00C6  3008               	movlw	high _motor1SetDir
  3633  00C7  00A1               	movwf	NewDCMotor@_setDir+1
  3634  00C8  3052               	movlw	low _EPWM1_LoadDutyValue
  3635  00C9  00A2               	movwf	NewDCMotor@_setSpeed
  3636  00CA  300A               	movlw	high _EPWM1_LoadDutyValue
  3637  00CB  00A3               	movwf	NewDCMotor@_setSpeed+1
  3638  00CC  318D  25F6  3180   	fcall	_NewDCMotor
  3639  00CF  0020               	movlb	0	; select bank0
  3640  00D0  3020               	movlw	low ?_NewDCMotor
  3641  00D1  0086               	movwf	6
  3642  00D2  3000               	movlw	high ?_NewDCMotor
  3643  00D3  0087               	movwf	7
  3644  00D4  30C0               	movlw	low _motor1
  3645  00D5  0084               	movwf	4
  3646  00D6  3001               	movlw	high _motor1
  3647  00D7  0085               	movwf	5
  3648  00D8  3020               	movlw	32
  3649  00D9  00E0               	movwf	??_appTasks
  3650  00DA                     u3220:
  3651  00DA  0016               	moviw fsr1++
  3652  00DB  001A               	movwi fsr0++
  3653  00DC  0BE0               	decfsz	??_appTasks,f
  3654  00DD  28DA               	goto	u3220
  3655  00DE                     l4310:
  3656                           
  3657                           ;app.c: 86:             motor2 = NewDCMotor(motor2SetDir, PWM3_LoadDutyValue);
  3658  00DE  3041               	movlw	low _motor2SetDir
  3659  00DF  00A0               	movwf	NewDCMotor@_setDir
  3660  00E0  3008               	movlw	high _motor2SetDir
  3661  00E1  00A1               	movwf	NewDCMotor@_setDir+1
  3662  00E2  3038               	movlw	low _PWM3_LoadDutyValue
  3663  00E3  00A2               	movwf	NewDCMotor@_setSpeed
  3664  00E4  300A               	movlw	high _PWM3_LoadDutyValue
  3665  00E5  00A3               	movwf	NewDCMotor@_setSpeed+1
  3666  00E6  318D  25F6  3180   	fcall	_NewDCMotor
  3667  00E9  0020               	movlb	0	; select bank0
  3668  00EA  3020               	movlw	low ?_NewDCMotor
  3669  00EB  0086               	movwf	6
  3670  00EC  3000               	movlw	high ?_NewDCMotor
  3671  00ED  0087               	movwf	7
  3672  00EE  30A0               	movlw	low _motor2
  3673  00EF  0084               	movwf	4
  3674  00F0  3001               	movlw	high _motor2
  3675  00F1  0085               	movwf	5
  3676  00F2  3020               	movlw	32
  3677  00F3  00E0               	movwf	??_appTasks
  3678  00F4                     u3230:
  3679  00F4  0016               	moviw fsr1++
  3680  00F5  001A               	movwi fsr0++
  3681  00F6  0BE0               	decfsz	??_appTasks,f
  3682  00F7  28F4               	goto	u3230
  3683  00F8                     l4312:
  3684                           
  3685                           ;app.c: 87:             motor1.setTimeBaseCounter((uint32_t *) & time->currentTimeMillis
      +                          );
  3686  00F8  0022               	movlb	2	; select bank2
  3687  00F9  0867               	movf	_time^(0+256),w
  3688  00FA  0020               	movlb	0	; select bank0
  3689  00FB  00E0               	movwf	??_appTasks
  3690  00FC  0860               	movf	??_appTasks,w
  3691  00FD  00F0               	movwf	setTimeBaseCounter@timeMillis
  3692  00FE  3004               	movlw	4
  3693  00FF  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  3694  0100  0086               	movwf	6
  3695  0101  3001               	movlw	1	; select bank3/4
  3696  0102  0087               	movwf	7
  3697  0103  3F41               	moviw [1]fsr1
  3698  0104  008A               	movwf	10
  3699  0105  3F40               	moviw [0]fsr1
  3700  0106  000A               	callw
  3701  0107  3180               	pagesel	$
  3702  0108                     l4314:
  3703                           
  3704                           ;app.c: 88:             spi = NewSpiDriver(espi_op, espi_cl, espi_rd, espi_wr1, espi_wr2
      +                          , espi_rst, espi_int);
  3705  0108  30D7               	movlw	low _espi_op
  3706  0109  0020               	movlb	0	; select bank0
  3707  010A  00A0               	movwf	NewSpiDriver@op
  3708  010B  3017               	movlw	high _espi_op
  3709  010C  00A1               	movwf	NewSpiDriver@op+1
  3710  010D  3000               	movlw	0
  3711  010E  00A2               	movwf	NewSpiDriver@cl
  3712  010F  3000               	movlw	0
  3713  0110  00A3               	movwf	NewSpiDriver@cl+1
  3714  0111  30FD               	movlw	low _espi_rd
  3715  0112  00A4               	movwf	NewSpiDriver@rd
  3716  0113  3007               	movlw	high _espi_rd
  3717  0114  00A5               	movwf	NewSpiDriver@rd+1
  3718  0115  30CB               	movlw	low _espi_wr1
  3719  0116  00A6               	movwf	NewSpiDriver@wr1
  3720  0117  3017               	movlw	high _espi_wr1
  3721  0118  00A7               	movwf	NewSpiDriver@wr1+1
  3722  0119  30D3               	movlw	low _espi_wr2
  3723  011A  00A8               	movwf	NewSpiDriver@wr2
  3724  011B  3017               	movlw	high _espi_wr2
  3725  011C  00A9               	movwf	NewSpiDriver@wr2+1
  3726  011D  3022               	movlw	low _espi_rst
  3727  011E  00AA               	movwf	NewSpiDriver@rst
  3728  011F  300A               	movlw	high _espi_rst
  3729  0120  00AB               	movwf	NewSpiDriver@rst+1
  3730  0121  30A1               	movlw	low _espi_int
  3731  0122  00AC               	movwf	NewSpiDriver@ie
  3732  0123  3008               	movlw	high _espi_int
  3733  0124  00AD               	movwf	NewSpiDriver@ie+1
  3734  0125  3187  276C  3180   	fcall	_NewSpiDriver
  3735  0128  0020               	movlb	0	; select bank0
  3736  0129  3020               	movlw	low ?_NewSpiDriver
  3737  012A  0086               	movwf	6
  3738  012B  3000               	movlw	high ?_NewSpiDriver
  3739  012C  0087               	movwf	7
  3740  012D  3020               	movlw	low _spi
  3741  012E  0084               	movwf	4
  3742  012F  3002               	movlw	high _spi
  3743  0130  0085               	movwf	5
  3744  0131  3039               	movlw	57
  3745  0132  00E0               	movwf	??_appTasks
  3746  0133                     u3240:
  3747  0133  0016               	moviw fsr1++
  3748  0134  001A               	movwi fsr0++
  3749  0135  0BE0               	decfsz	??_appTasks,f
  3750  0136  2933               	goto	u3240
  3751  0137                     l4316:
  3752                           
  3753                           ;app.c: 89:             espi_setInterrupHandler(dataReceived);
  3754  0137  3000               	movlw	low _dataReceived
  3755  0138  00F2               	movwf	espi_setInterrupHandler@fun
  3756  0139  3009               	movlw	high _dataReceived
  3757  013A  00F3               	movwf	espi_setInterrupHandler@fun+1
  3758  013B  3188  2094  3180   	fcall	_espi_setInterrupHandler
  3759  013E                     l4318:
  3760                           
  3761                           ;app.c: 90:             spi.setTimeBaseCounter((uint32_t *) & time->currentTimeMillis);
  3762  013E  0022               	movlb	2	; select bank2
  3763  013F  0867               	movf	_time^(0+256),w
  3764  0140  0020               	movlb	0	; select bank0
  3765  0141  00E0               	movwf	??_appTasks
  3766  0142  0860               	movf	??_appTasks,w
  3767  0143  00F0               	movwf	setTimeBaseCounter@SpiCommunication$F2153@timeMillis
  3768  0144  300E               	movlw	14
  3769  0145  3E20               	addlw	(low (_spi| (0+512)))& (0+255)
  3770  0146  0086               	movwf	6
  3771  0147  3002               	movlw	2	; select bank4/5
  3772  0148  0087               	movwf	7
  3773  0149  3F41               	moviw [1]fsr1
  3774  014A  008A               	movwf	10
  3775  014B  3F40               	moviw [0]fsr1
  3776  014C  000A               	callw
  3777  014D  3180               	pagesel	$
  3778  014E                     l4320:
  3779                           
  3780                           ;app.c: 91:             spi.open(&spi);
  3781  014E  3020               	movlw	(low (_spi| (0+512)))& (0+255)
  3782  014F  0020               	movlb	0	; select bank0
  3783  0150  00E0               	movwf	??_appTasks
  3784  0151  0860               	movf	??_appTasks,w
  3785  0152  00F4               	movwf	open@this
  3786  0153  3004               	movlw	4
  3787  0154  3E20               	addlw	(low (_spi| (0+512)))& (0+255)
  3788  0155  0086               	movwf	6
  3789  0156  3002               	movlw	2	; select bank4/5
  3790  0157  0087               	movwf	7
  3791  0158  3F41               	moviw [1]fsr1
  3792  0159  008A               	movwf	10
  3793  015A  3F40               	moviw [0]fsr1
  3794  015B  000A               	callw
  3795  015C  3180               	pagesel	$
  3796  015D                     l4322:
  3797                           
  3798                           ;app.c: 92:             comm = GetCommunicationInstance();
  3799  015D  3180  2002  3180   	fcall	_GetCommunicationInstance
  3800  0160  0020               	movlb	0	; select bank0
  3801  0161  00E0               	movwf	??_appTasks
  3802  0162  0860               	movf	??_appTasks,w
  3803  0163  0022               	movlb	2	; select bank2
  3804  0164  00E6               	movwf	_comm^(0+256)
  3805  0165                     l4324:
  3806                           
  3807                           ;app.c: 93:             CommRegister regs[] = {
  3808  0165  3020               	movlw	low appTasks@F3078
  3809  0166  0086               	movwf	6
  3810  0167  3004               	movlw	high appTasks@F3078
  3811  0168  0087               	movwf	7
  3812  0169  3020               	movlw	low appTasks@regs
  3813  016A  0084               	movwf	4
  3814  016B  3001               	movlw	high appTasks@regs
  3815  016C  0085               	movwf	5
  3816  016D  3028               	movlw	40
  3817  016E  0020               	movlb	0	; select bank0
  3818  016F  00E0               	movwf	??_appTasks
  3819  0170                     u3250:
  3820  0170  0016               	moviw fsr1++
  3821  0171  001A               	movwi fsr0++
  3822  0172  0BE0               	decfsz	??_appTasks,f
  3823  0173  2970               	goto	u3250
  3824  0174                     l4326:
  3825                           
  3826                           ;app.c: 103:             comm->regsTable->setRegistersTable(regs, sizeof regs);
  3827  0174  3020               	movlw	(low (appTasks@regs| (0+256)))& (0+255)
  3828  0175  00E0               	movwf	??_appTasks
  3829  0176  0860               	movf	??_appTasks,w
  3830  0177  00FC               	movwf	setRegistersTable@tab
  3831  0178  3028               	movlw	40
  3832  0179  00E1               	movwf	??_appTasks+1
  3833  017A  0861               	movf	??_appTasks+1,w
  3834  017B  00FD               	movwf	setRegistersTable@length
  3835  017C  0022               	movlb	2	; select bank2
  3836  017D  0866               	movf	_comm^(0+256),w
  3837  017E  3E05               	addlw	5
  3838  017F  0086               	movwf	6
  3839  0180  0187               	clrf	7
  3840  0181  0801               	movf	1,w
  3841  0182  0086               	movwf	6
  3842  0183  3002               	movlw	2	; select bank4/5
  3843  0184  0087               	movwf	7
  3844  0185  3F41               	moviw [1]fsr1
  3845  0186  008A               	movwf	10
  3846  0187  3F40               	moviw [0]fsr1
  3847  0188  000A               	callw
  3848  0189  3180               	pagesel	$
  3849  018A                     l4328:
  3850                           
  3851                           ;app.c: 104:             comm->commDriver = &spi;
  3852  018A  3020               	movlw	(low (_spi| (0+512)))& (0+255)
  3853  018B  0020               	movlb	0	; select bank0
  3854  018C  00E0               	movwf	??_appTasks
  3855  018D  0022               	movlb	2	; select bank2
  3856  018E  0866               	movf	_comm^(0+256),w
  3857  018F  3E04               	addlw	4
  3858  0190  0086               	movwf	6
  3859  0191  0187               	clrf	7
  3860  0192  0020               	movlb	0	; select bank0
  3861  0193  0860               	movf	??_appTasks,w
  3862  0194  0081               	movwf	1
  3863  0195                     l4330:
  3864                           
  3865                           ;app.c: 105:             comm->setTimeBaseCounter((uint32_t *) & time->currentTimeMillis
      +                          );
  3866  0195  0022               	movlb	2	; select bank2
  3867  0196  0867               	movf	_time^(0+256),w
  3868  0197  0020               	movlb	0	; select bank0
  3869  0198  00E0               	movwf	??_appTasks
  3870  0199  0860               	movf	??_appTasks,w
  3871  019A  00F0               	movwf	setTimeBaseCounter@Comm$F2954@timeMillis
  3872  019B  0022               	movlb	2	; select bank2
  3873  019C  0866               	movf	_comm^(0+256),w
  3874  019D  3E02               	addlw	2
  3875  019E  0086               	movwf	6
  3876  019F  0187               	clrf	7
  3877  01A0  3F41               	moviw [1]fsr1
  3878  01A1  008A               	movwf	10
  3879  01A2  3F40               	moviw [0]fsr1
  3880  01A3  000A               	callw
  3881  01A4  3180               	pagesel	$
  3882  01A5                     l4332:
  3883                           
  3884                           ;app.c: 106:             motor1.setSpeed(&motor1, speedm1);
  3885  01A5  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  3886  01A6  0020               	movlb	0	; select bank0
  3887  01A7  00E0               	movwf	??_appTasks
  3888  01A8  0860               	movf	??_appTasks,w
  3889  01A9  00F0               	movwf	setSpeed@this
  3890  01AA  0022               	movlb	2	; select bank2
  3891  01AB  086C               	movf	(_speedm1+1)^(0+256),w
  3892  01AC  00F2               	movwf	setSpeed@speed_X10+1
  3893  01AD  086B               	movf	_speedm1^(0+256),w
  3894  01AE  00F1               	movwf	setSpeed@speed_X10
  3895  01AF  3002               	movlw	2
  3896  01B0  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  3897  01B1  0086               	movwf	6
  3898  01B2  3001               	movlw	1	; select bank3/4
  3899  01B3  0087               	movwf	7
  3900  01B4  3F41               	moviw [1]fsr1
  3901  01B5  008A               	movwf	10
  3902  01B6  3F40               	moviw [0]fsr1
  3903  01B7  000A               	callw
  3904  01B8  3180               	pagesel	$
  3905  01B9                     l4334:
  3906                           
  3907                           ;app.c: 107:             motor2.setSpeed(&motor2, speedm2);
  3908  01B9  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  3909  01BA  0020               	movlb	0	; select bank0
  3910  01BB  00E0               	movwf	??_appTasks
  3911  01BC  0860               	movf	??_appTasks,w
  3912  01BD  00F0               	movwf	setSpeed@this
  3913  01BE  0022               	movlb	2	; select bank2
  3914  01BF  086A               	movf	(_speedm2+1)^(0+256),w
  3915  01C0  00F2               	movwf	setSpeed@speed_X10+1
  3916  01C1  0869               	movf	_speedm2^(0+256),w
  3917  01C2  00F1               	movwf	setSpeed@speed_X10
  3918  01C3  3002               	movlw	2
  3919  01C4  3EA0               	addlw	(low (_motor2| (0+256)))& (0+255)
  3920  01C5  0086               	movwf	6
  3921  01C6  3001               	movlw	1	; select bank3/4
  3922  01C7  0087               	movwf	7
  3923  01C8  3F41               	moviw [1]fsr1
  3924  01C9  008A               	movwf	10
  3925  01CA  3F40               	moviw [0]fsr1
  3926  01CB  000A               	callw
  3927  01CC  3180               	pagesel	$
  3928  01CD                     l4336:
  3929                           
  3930                           ;app.c: 108:             runMotors();
  3931  01CD  318A  22C0  3180   	fcall	_runMotors
  3932  01D0                     l4338:
  3933                           
  3934                           ;app.c: 109:             state = APP_RUNNING;
  3935  01D0  0022               	movlb	2	; select bank2
  3936  01D1  01E8               	clrf	_state^(0+256)
  3937  01D2  0AE8               	incf	_state^(0+256),f
  3938                           
  3939                           ;app.c: 110:             break;
  3940  01D3  2A6E               	goto	l4366
  3941  01D4                     l4340:
  3942                           
  3943                           ;app.c: 114:             time->tasks();
  3944  01D4  0022               	movlb	2	; select bank2
  3945  01D5  0867               	movf	_time^(0+256),w
  3946  01D6  3E0A               	addlw	10
  3947  01D7  0086               	movwf	6
  3948  01D8  3001               	movlw	1	; select bank2/3
  3949  01D9  0087               	movwf	7
  3950  01DA  3F41               	moviw [1]fsr1
  3951  01DB  008A               	movwf	10
  3952  01DC  3F40               	moviw [0]fsr1
  3953  01DD  000A               	callw
  3954  01DE  3180               	pagesel	$
  3955  01DF                     l4342:
  3956                           
  3957                           ;app.c: 115:             spi.tasks(&spi);
  3958  01DF  3020               	movlw	(low (_spi| (0+512)))& (0+255)
  3959  01E0  0020               	movlb	0	; select bank0
  3960  01E1  00E0               	movwf	??_appTasks
  3961  01E2  0860               	movf	??_appTasks,w
  3962  01E3  00F7               	movwf	tasks@SpiCommunication$F2138@this
  3963  01E4  3008               	movlw	8
  3964  01E5  3E20               	addlw	(low (_spi| (0+512)))& (0+255)
  3965  01E6  0086               	movwf	6
  3966  01E7  3002               	movlw	2	; select bank4/5
  3967  01E8  0087               	movwf	7
  3968  01E9  3F41               	moviw [1]fsr1
  3969  01EA  008A               	movwf	10
  3970  01EB  3F40               	moviw [0]fsr1
  3971  01EC  000A               	callw
  3972  01ED  3180               	pagesel	$
  3973  01EE                     l4344:
  3974                           
  3975                           ;app.c: 116:             comm->tasks();
  3976  01EE  0022               	movlb	2	; select bank2
  3977  01EF  0866               	movf	_comm^(0+256),w
  3978  01F0  0086               	movwf	6
  3979  01F1  0187               	clrf	7
  3980  01F2  3F41               	moviw [1]fsr1
  3981  01F3  008A               	movwf	10
  3982  01F4  3F40               	moviw [0]fsr1
  3983  01F5  000A               	callw
  3984  01F6  3180               	pagesel	$
  3985  01F7                     l4346:
  3986                           
  3987                           ;app.c: 117:             motor1.tasks(&motor1);
  3988  01F7  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  3989  01F8  0020               	movlb	0	; select bank0
  3990  01F9  00E0               	movwf	??_appTasks
  3991  01FA  0860               	movf	??_appTasks,w
  3992  01FB  00AE               	movwf	tasks@this
  3993  01FC  3010               	movlw	16
  3994  01FD  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  3995  01FE  0086               	movwf	6
  3996  01FF  3001               	movlw	1	; select bank3/4
  3997  0200  0087               	movwf	7
  3998  0201  3F41               	moviw [1]fsr1
  3999  0202  008A               	movwf	10
  4000  0203  3F40               	moviw [0]fsr1
  4001  0204  000A               	callw
  4002  0205  3180               	pagesel	$
  4003  0206                     l4348:
  4004                           
  4005                           ;app.c: 118:             motor2.tasks(&motor2);
  4006  0206  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  4007  0207  0020               	movlb	0	; select bank0
  4008  0208  00E0               	movwf	??_appTasks
  4009  0209  0860               	movf	??_appTasks,w
  4010  020A  00AE               	movwf	tasks@this
  4011  020B  3010               	movlw	16
  4012  020C  3EA0               	addlw	(low (_motor2| (0+256)))& (0+255)
  4013  020D  0086               	movwf	6
  4014  020E  3001               	movlw	1	; select bank3/4
  4015  020F  0087               	movwf	7
  4016  0210  3F41               	moviw [1]fsr1
  4017  0211  008A               	movwf	10
  4018  0212  3F40               	moviw [0]fsr1
  4019  0213  000A               	callw
  4020  0214  3180               	pagesel	$
  4021  0215                     l4350:
  4022                           
  4023                           ;app.c: 119:             if (speedm1 != _speedm1){
  4024  0215  0022               	movlb	2	; select bank2
  4025  0216  0865               	movf	(__speedm1+1)^(0+256),w
  4026  0217  066C               	xorwf	(_speedm1+1)^(0+256),w
  4027  0218  1D03               	skipz
  4028  0219  2A1C               	goto	u3265
  4029  021A  0864               	movf	__speedm1^(0+256),w
  4030  021B  066B               	xorwf	_speedm1^(0+256),w
  4031  021C                     u3265:
  4032  021C  1903               	skipnz
  4033  021D  2A1F               	goto	u3261
  4034  021E  2A20               	goto	u3260
  4035  021F                     u3261:
  4036  021F  2A38               	goto	l4356
  4037  0220                     u3260:
  4038  0220                     l4352:
  4039                           
  4040                           ;app.c: 120:                 _speedm1 = speedm1;
  4041  0220  086C               	movf	(_speedm1+1)^(0+256),w
  4042  0221  00E5               	movwf	(__speedm1+1)^(0+256)
  4043  0222  086B               	movf	_speedm1^(0+256),w
  4044  0223  00E4               	movwf	__speedm1^(0+256)
  4045  0224                     l4354:
  4046                           
  4047                           ;app.c: 121:                 motor1.setSpeed(&motor1, speedm1);
  4048  0224  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  4049  0225  0020               	movlb	0	; select bank0
  4050  0226  00E0               	movwf	??_appTasks
  4051  0227  0860               	movf	??_appTasks,w
  4052  0228  00F0               	movwf	setSpeed@this
  4053  0229  0022               	movlb	2	; select bank2
  4054  022A  086C               	movf	(_speedm1+1)^(0+256),w
  4055  022B  00F2               	movwf	setSpeed@speed_X10+1
  4056  022C  086B               	movf	_speedm1^(0+256),w
  4057  022D  00F1               	movwf	setSpeed@speed_X10
  4058  022E  3002               	movlw	2
  4059  022F  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  4060  0230  0086               	movwf	6
  4061  0231  3001               	movlw	1	; select bank3/4
  4062  0232  0087               	movwf	7
  4063  0233  3F41               	moviw [1]fsr1
  4064  0234  008A               	movwf	10
  4065  0235  3F40               	moviw [0]fsr1
  4066  0236  000A               	callw
  4067  0237  3180               	pagesel	$
  4068  0238                     l4356:
  4069                           
  4070                           ;app.c: 123:             if (speedm2 != _speedm2){
  4071  0238  0022               	movlb	2	; select bank2
  4072  0239  0863               	movf	(__speedm2+1)^(0+256),w
  4073  023A  066A               	xorwf	(_speedm2+1)^(0+256),w
  4074  023B  1D03               	skipz
  4075  023C  2A3F               	goto	u3275
  4076  023D  0862               	movf	__speedm2^(0+256),w
  4077  023E  0669               	xorwf	_speedm2^(0+256),w
  4078  023F                     u3275:
  4079  023F  1903               	skipnz
  4080  0240  2A42               	goto	u3271
  4081  0241  2A43               	goto	u3270
  4082  0242                     u3271:
  4083  0242  2A6E               	goto	l4366
  4084  0243                     u3270:
  4085  0243                     l4358:
  4086                           
  4087                           ;app.c: 124:                 _speedm2 = speedm2;
  4088  0243  086A               	movf	(_speedm2+1)^(0+256),w
  4089  0244  00E3               	movwf	(__speedm2+1)^(0+256)
  4090  0245  0869               	movf	_speedm2^(0+256),w
  4091  0246  00E2               	movwf	__speedm2^(0+256)
  4092  0247                     l4360:
  4093                           
  4094                           ;app.c: 125:                 motor2.setSpeed(&motor2, speedm2);
  4095  0247  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  4096  0248  0020               	movlb	0	; select bank0
  4097  0249  00E0               	movwf	??_appTasks
  4098  024A  0860               	movf	??_appTasks,w
  4099  024B  00F0               	movwf	setSpeed@this
  4100  024C  0022               	movlb	2	; select bank2
  4101  024D  086A               	movf	(_speedm2+1)^(0+256),w
  4102  024E  00F2               	movwf	setSpeed@speed_X10+1
  4103  024F  0869               	movf	_speedm2^(0+256),w
  4104  0250  00F1               	movwf	setSpeed@speed_X10
  4105  0251  3002               	movlw	2
  4106  0252  3EA0               	addlw	(low (_motor2| (0+256)))& (0+255)
  4107  0253  0086               	movwf	6
  4108  0254  3001               	movlw	1	; select bank3/4
  4109  0255  0087               	movwf	7
  4110  0256  3F41               	moviw [1]fsr1
  4111  0257  008A               	movwf	10
  4112  0258  3F40               	moviw [0]fsr1
  4113  0259  000A               	callw
  4114  025A  3180               	pagesel	$
  4115  025B  2A6E               	goto	l4366
  4116  025C                     l4364:
  4117  025C  0022               	movlb	2	; select bank2
  4118  025D  0868               	movf	_state^(0+256),w
  4119  025E  0020               	movlb	0	; select bank0
  4120  025F  00E0               	movwf	??_appTasks
  4121  0260  01E1               	clrf	??_appTasks+1
  4122                           
  4123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4124                           ; Switch size 1, requested type "simple"
  4125                           ; Number of cases is 1, Range of values is 0 to 0
  4126                           ; switch strategies available:
  4127                           ; Name         Instructions Cycles
  4128                           ; simple_byte            4     3 (average)
  4129                           ; direct_byte            8     6 (fixed)
  4130                           ; jumptable            260     6 (fixed)
  4131                           ;	Chosen strategy is simple_byte
  4132  0261  0861               	movf	??_appTasks+1,w
  4133  0262  3A00               	xorlw	0	; case 0
  4134  0263  1903               	skipnz
  4135  0264  2A66               	goto	l4458
  4136  0265  2A6E               	goto	l4366
  4137  0266                     l4458:
  4138                           
  4139                           ; Switch size 1, requested type "simple"
  4140                           ; Number of cases is 2, Range of values is 0 to 1
  4141                           ; switch strategies available:
  4142                           ; Name         Instructions Cycles
  4143                           ; simple_byte            7     4 (average)
  4144                           ; direct_byte           10     6 (fixed)
  4145                           ; jumptable            260     6 (fixed)
  4146                           ;	Chosen strategy is simple_byte
  4147  0266  0860               	movf	??_appTasks,w
  4148  0267  3A00               	xorlw	0	; case 0
  4149  0268  1903               	skipnz
  4150  0269  28AF               	goto	l4304
  4151  026A  3A01               	xorlw	1	; case 1
  4152  026B  1903               	skipnz
  4153  026C  29D4               	goto	l4340
  4154  026D  2A6E               	goto	l4366
  4155  026E                     l4366:
  4156                           
  4157                           ;app.c: 129:     wdt();
  4158  026E  3189  21B6  3180   	fcall	_wdt
  4159  0271                     l461:
  4160  0271  0008               	return
  4161  0272                     __end_of_appTasks:
  4162                           
  4163                           	psect	text2
  4164  09B6                     __ptext2:	
  4165 ;; *************** function _wdt *****************
  4166 ;; Defined at:
  4167 ;;		line 31 in file "app.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    7
  4188 ;; This function calls:
  4189 ;;		Absolute function
  4190 ;;		_healthy
  4191 ;; This function is called by:
  4192 ;;		_appTasks
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function _wdt
  4198  09B6                     _wdt:
  4199  09B6                     l4050:	
  4200                           ;incstack = 0
  4201                           ; Regs used in _wdt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4202                           
  4203                           
  4204                           ;app.c: 32:     if (spi.healthy(&spi))
  4205  09B6  3020               	movlw	(low (_spi| (0+512)))& (0+255)
  4206  09B7  00F9               	movwf	??_wdt
  4207  09B8  0879               	movf	??_wdt,w
  4208  09B9  00F0               	movwf	healthy@this
  4209  09BA  301C               	movlw	28
  4210  09BB  3E20               	addlw	(low (_spi| (0+512)))& (0+255)
  4211  09BC  0086               	movwf	6
  4212  09BD  3002               	movlw	2	; select bank4/5
  4213  09BE  0087               	movwf	7
  4214  09BF  3F41               	moviw [1]fsr1
  4215  09C0  008A               	movwf	10
  4216  09C1  3F40               	moviw [0]fsr1
  4217  09C2  000A               	callw
  4218  09C3  3189               	pagesel	$
  4219  09C4  3A00               	xorlw	0
  4220  09C5  1903               	skipnz
  4221  09C6  29C8               	goto	u2941
  4222  09C7  29C9               	goto	u2940
  4223  09C8                     u2941:
  4224  09C8  29CA               	goto	l411
  4225  09C9                     u2940:
  4226  09C9                     l4052:
  4227  09C9  0064               	clrwdt	;# 
  4228  09CA                     l411:
  4229  09CA  0008               	return
  4230  09CB                     __end_of_wdt:
  4231                           
  4232                           	psect	text3
  4233  0C8D                     __ptext3:	
  4234 ;; *************** function _healthy *****************
  4235 ;; Defined at:
  4236 ;;		line 132 in file "SpiCommunication.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  this            1    0[COMMON] PTR struct SPI
  4239 ;;		 -> spi(57), 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      _Bool 
  4244 ;; Registers used:
  4245 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4251 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;Total ram usage:        9 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    6
  4258 ;; This function calls:
  4259 ;;		Nothing
  4260 ;; This function is called by:
  4261 ;;		_NewSpiDriver
  4262 ;;		_wdt
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _healthy
  4268  0C8D                     _healthy:
  4269  0C8D                     l3884:	
  4270                           ;incstack = 0
  4271                           ; Regs used in _healthy: [wreg+fsr1l+fsr1h+status,2+status,0]
  4272                           
  4273                           
  4274                           ;SpiCommunication.c: 133:     if (this->state.b.open) {
  4275  0C8D  0870               	movf	healthy@this,w
  4276  0C8E  3E31               	addlw	49
  4277  0C8F  0086               	movwf	6
  4278  0C90  3002               	movlw	2	; select bank4/5
  4279  0C91  0087               	movwf	7
  4280  0C92  1C01               	btfss	1,0
  4281  0C93  2C95               	goto	u2731
  4282  0C94  2C96               	goto	u2730
  4283  0C95                     u2731:
  4284  0C95  2CC8               	goto	l3892
  4285  0C96                     u2730:
  4286  0C96                     l3886:
  4287                           
  4288                           ;SpiCommunication.c: 134:         if ((((*currentTimeMillis) - this->timer) < 4000))
  4289  0C96  0870               	movf	healthy@this,w
  4290  0C97  3E32               	addlw	50
  4291  0C98  0086               	movwf	6
  4292  0C99  3002               	movlw	2	; select bank4/5
  4293  0C9A  0087               	movwf	7
  4294  0C9B  3F40               	moviw [0]fsr1
  4295  0C9C  00F1               	movwf	??_healthy
  4296  0C9D  3F41               	moviw [1]fsr1
  4297  0C9E  00F2               	movwf	??_healthy+1
  4298  0C9F  3F42               	moviw [2]fsr1
  4299  0CA0  00F3               	movwf	??_healthy+2
  4300  0CA1  3F43               	moviw [3]fsr1
  4301  0CA2  00F4               	movwf	??_healthy+3
  4302  0CA3  0020               	movlb	0	; select bank0
  4303  0CA4  086D               	movf	_currentTimeMillis@SpiCommunication$F2173,w
  4304  0CA5  0086               	movwf	6
  4305  0CA6  3001               	movlw	1	; select bank2/3
  4306  0CA7  0087               	movwf	7
  4307  0CA8  3F40               	moviw [0]fsr1
  4308  0CA9  00F5               	movwf	??_healthy+4
  4309  0CAA  3F41               	moviw [1]fsr1
  4310  0CAB  00F6               	movwf	??_healthy+5
  4311  0CAC  3F42               	moviw [2]fsr1
  4312  0CAD  00F7               	movwf	??_healthy+6
  4313  0CAE  3F43               	moviw [3]fsr1
  4314  0CAF  00F8               	movwf	??_healthy+7
  4315  0CB0  0871               	movf	??_healthy,w
  4316  0CB1  02F5               	subwf	??_healthy+4,f
  4317  0CB2  0872               	movf	??_healthy+1,w
  4318  0CB3  3BF6               	subwfb	??_healthy+5,f
  4319  0CB4  0873               	movf	??_healthy+2,w
  4320  0CB5  3BF7               	subwfb	??_healthy+6,f
  4321  0CB6  0874               	movf	??_healthy+3,w
  4322  0CB7  3BF8               	subwfb	??_healthy+7,f
  4323  0CB8  0878               	movf	??_healthy+7,w
  4324  0CB9  1D03               	btfss	3,2
  4325  0CBA  2CC5               	goto	u2741
  4326  0CBB  0877               	movf	??_healthy+6,w
  4327  0CBC  1D03               	btfss	3,2
  4328  0CBD  2CC5               	goto	u2741
  4329  0CBE  30A0               	movlw	160
  4330  0CBF  0275               	subwf	??_healthy+4,w
  4331  0CC0  300F               	movlw	15
  4332  0CC1  3B76               	subwfb	??_healthy+5,w
  4333  0CC2  1803               	btfsc	3,0
  4334  0CC3  2CC5               	goto	u2741
  4335  0CC4  2CC6               	goto	u2740
  4336  0CC5                     u2741:
  4337  0CC5  2CC8               	goto	l3892
  4338  0CC6                     u2740:
  4339  0CC6                     l3888:
  4340                           
  4341                           ;SpiCommunication.c: 135:             return 1;
  4342  0CC6  3001               	movlw	1
  4343  0CC7  2CC9               	goto	l684
  4344  0CC8                     l3892:
  4345                           
  4346                           ;SpiCommunication.c: 137:     return 0;
  4347  0CC8  3000               	movlw	0
  4348  0CC9                     l684:
  4349  0CC9  0008               	return
  4350  0CCA                     __end_of_healthy:
  4351                           
  4352                           	psect	text4
  4353  08F2                     __ptext4:	
  4354 ;; *************** function _tasks@TimeSystem$F1858 *****************
  4355 ;; Defined at:
  4356 ;;		line 51 in file "TimeSystem.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  i               1    1[COMMON] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;Total ram usage:        2 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    6
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_GetTimeSystemInstance
  4381 ;;		_appTasks
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _tasks@TimeSystem$F1858
  4387  08F2                     _tasks@TimeSystem$F1858:
  4388  08F2                     l4200:	
  4389                           ;incstack = 0
  4390                           ; Regs used in _tasks@TimeSystem$F1858: [wreg+fsr1l+fsr1h+status,2+status,0]
  4391                           
  4392                           
  4393                           ;TimeSystem.c: 52:     for (uint8_t i = 0; i < nTimers; i++) {
  4394  08F2  01F1               	clrf	tasks@TimeSystem$F1858@i
  4395  08F3  28F8               	goto	l4210
  4396  08F4                     l4202:
  4397  08F4                     l4208:
  4398                           
  4399                           ;TimeSystem.c: 63:     }
  4400  08F4  3001               	movlw	1
  4401  08F5  00F0               	movwf	??_tasks@TimeSystem$F1861
  4402  08F6  0870               	movf	??_tasks@TimeSystem$F1861,w
  4403  08F7  07F1               	addwf	tasks@TimeSystem$F1858@i,f
  4404  08F8                     l4210:
  4405  08F8  0020               	movlb	0	; select bank0
  4406  08F9  086E               	movf	_nTimers,w
  4407  08FA  0271               	subwf	tasks@TimeSystem$F1858@i,w
  4408  08FB  1C03               	skipc
  4409  08FC  28FE               	goto	u3071
  4410  08FD  28FF               	goto	u3070
  4411  08FE                     u3071:
  4412  08FE  28F4               	goto	l4202
  4413  08FF                     u3070:
  4414  08FF                     l581:
  4415  08FF  0008               	return
  4416  0900                     __end_of_tasks@TimeSystem$F1858:
  4417                           
  4418                           	psect	text5
  4419  054B                     __ptext5:	
  4420 ;; *************** function _tasks@SpiCommunication$F2138 *****************
  4421 ;; Defined at:
  4422 ;;		line 154 in file "SpiCommunication.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  this            1    7[COMMON] PTR struct SPI
  4425 ;;		 -> spi(57), 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4437 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;Total ram usage:        9 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:   10
  4444 ;; This function calls:
  4445 ;;		Absolute function
  4446 ;;		___run
  4447 ;;		_reset
  4448 ;; This function is called by:
  4449 ;;		_NewSpiDriver
  4450 ;;		_appTasks
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           
  4455                           ;psect for function _tasks@SpiCommunication$F2138
  4456  054B                     _tasks@SpiCommunication$F2138:
  4457  054B                     l4216:	
  4458                           ;incstack = 0
  4459                           ; Regs used in _tasks@SpiCommunication$F2138: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4460                           
  4461                           
  4462                           ;SpiCommunication.c: 155:     if (this->state.b.open) {
  4463  054B  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4464  054C  3E31               	addlw	49
  4465  054D  0086               	movwf	6
  4466  054E  3002               	movlw	2	; select bank4/5
  4467  054F  0087               	movwf	7
  4468  0550  1C01               	btfss	1,0
  4469  0551  2D53               	goto	u3081
  4470  0552  2D54               	goto	u3080
  4471  0553                     u3081:
  4472  0553  2E07               	goto	l699
  4473  0554                     u3080:
  4474  0554                     l4218:
  4475                           
  4476                           ;SpiCommunication.c: 156:         if (this->state.b.receiveComplete)
  4477  0554  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4478  0555  3E31               	addlw	49
  4479  0556  0086               	movwf	6
  4480  0557  3002               	movlw	2	; select bank4/5
  4481  0558  0087               	movwf	7
  4482  0559  1E81               	btfss	1,5
  4483  055A  2D5C               	goto	u3091
  4484  055B  2D5D               	goto	u3090
  4485  055C                     u3091:
  4486  055C  2D69               	goto	l4222
  4487  055D                     u3090:
  4488  055D                     l4220:
  4489                           
  4490                           ;SpiCommunication.c: 157:             __run(this->readCallBack);
  4491  055D  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4492  055E  3E14               	addlw	20
  4493  055F  0086               	movwf	6
  4494  0560  3002               	movlw	2	; select bank4/5
  4495  0561  0087               	movwf	7
  4496  0562  3F40               	moviw [0]fsr1
  4497  0563  00F0               	movwf	___run@function
  4498  0564  3F41               	moviw [1]fsr1
  4499  0565  00F1               	movwf	___run@function+1
  4500  0566  3188  2000  3185   	fcall	___run
  4501  0569                     l4222:
  4502                           
  4503                           ;SpiCommunication.c: 158:         if (this->state.b.sendComplete)
  4504  0569  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4505  056A  3E31               	addlw	49
  4506  056B  0086               	movwf	6
  4507  056C  3002               	movlw	2	; select bank4/5
  4508  056D  0087               	movwf	7
  4509  056E  1E01               	btfss	1,4
  4510  056F  2D71               	goto	u3101
  4511  0570  2D72               	goto	u3100
  4512  0571                     u3101:
  4513  0571  2D7E               	goto	l4226
  4514  0572                     u3100:
  4515  0572                     l4224:
  4516                           
  4517                           ;SpiCommunication.c: 159:             __run(this->writeCallBack);
  4518  0572  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4519  0573  3E16               	addlw	22
  4520  0574  0086               	movwf	6
  4521  0575  3002               	movlw	2	; select bank4/5
  4522  0576  0087               	movwf	7
  4523  0577  3F40               	moviw [0]fsr1
  4524  0578  00F0               	movwf	___run@function
  4525  0579  3F41               	moviw [1]fsr1
  4526  057A  00F1               	movwf	___run@function+1
  4527  057B  3188  2000  3185   	fcall	___run
  4528  057E                     l4226:
  4529                           
  4530                           ;SpiCommunication.c: 160:         if (this->state.b.byteRead) {
  4531  057E  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4532  057F  3E31               	addlw	49
  4533  0580  0086               	movwf	6
  4534  0581  3002               	movlw	2	; select bank4/5
  4535  0582  0087               	movwf	7
  4536  0583  1F01               	btfss	1,6
  4537  0584  2D86               	goto	u3111
  4538  0585  2D87               	goto	u3110
  4539  0586                     u3111:
  4540  0586  2D93               	goto	l4230
  4541  0587                     u3110:
  4542  0587                     l4228:
  4543                           
  4544                           ;SpiCommunication.c: 161:             __run(this->byteReadCallBack);
  4545  0587  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4546  0588  3E18               	addlw	24
  4547  0589  0086               	movwf	6
  4548  058A  3002               	movlw	2	; select bank4/5
  4549  058B  0087               	movwf	7
  4550  058C  3F40               	moviw [0]fsr1
  4551  058D  00F0               	movwf	___run@function
  4552  058E  3F41               	moviw [1]fsr1
  4553  058F  00F1               	movwf	___run@function+1
  4554  0590  3188  2000  3185   	fcall	___run
  4555  0593                     l4230:
  4556                           
  4557                           ;SpiCommunication.c: 163:         if (this->charsToReceive + this->charsToSend > 0) {
  4558  0593  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4559  0594  3E2F               	addlw	47
  4560  0595  0086               	movwf	6
  4561  0596  3002               	movlw	2	; select bank4/5
  4562  0597  0087               	movwf	7
  4563  0598  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4564  0599  3E2D               	addlw	45
  4565  059A  0084               	movwf	4
  4566  059B  3002               	movlw	2	; select bank4/5
  4567  059C  0085               	movwf	5
  4568  059D  3F40               	moviw [0]fsr1
  4569  059E  0700               	addwf	0,w
  4570  059F  0020               	movlb	0	; select bank0
  4571  05A0  00A0               	movwf	??_tasks@SpiCommunication$F2142
  4572  05A1  3101               	addfsr 0,1
  4573  05A2  3F41               	moviw [1]fsr1
  4574  05A3  3D00               	addwfc	0,w
  4575  05A4  00A1               	movwf	??_tasks@SpiCommunication$F2142+1
  4576  05A5  0821               	movf	??_tasks@SpiCommunication$F2142+1,w
  4577  05A6  3A80               	xorlw	128
  4578  05A7  00A2               	movwf	??_tasks@SpiCommunication$F2142+2
  4579  05A8  3080               	movlw	128
  4580  05A9  0222               	subwf	??_tasks@SpiCommunication$F2142+2,w
  4581  05AA  1D03               	skipz
  4582  05AB  2DAE               	goto	u3125
  4583  05AC  3001               	movlw	1
  4584  05AD  0220               	subwf	??_tasks@SpiCommunication$F2142,w
  4585  05AE                     u3125:
  4586  05AE  1C03               	skipc
  4587  05AF  2DB1               	goto	u3121
  4588  05B0  2DB2               	goto	u3120
  4589  05B1                     u3121:
  4590  05B1  2DFD               	goto	l4238
  4591  05B2                     u3120:
  4592  05B2                     l4232:
  4593                           
  4594                           ;SpiCommunication.c: 164:             if (((*currentTimeMillis) - this->timer) > 5000) {
  4595  05B2  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4596  05B3  3E32               	addlw	50
  4597  05B4  0086               	movwf	6
  4598  05B5  3002               	movlw	2	; select bank4/5
  4599  05B6  0087               	movwf	7
  4600  05B7  3F40               	moviw [0]fsr1
  4601  05B8  0020               	movlb	0	; select bank0
  4602  05B9  00A0               	movwf	??_tasks@SpiCommunication$F2142
  4603  05BA  3F41               	moviw [1]fsr1
  4604  05BB  00A1               	movwf	??_tasks@SpiCommunication$F2142+1
  4605  05BC  3F42               	moviw [2]fsr1
  4606  05BD  00A2               	movwf	??_tasks@SpiCommunication$F2142+2
  4607  05BE  3F43               	moviw [3]fsr1
  4608  05BF  00A3               	movwf	??_tasks@SpiCommunication$F2142+3
  4609  05C0  086D               	movf	_currentTimeMillis@SpiCommunication$F2173,w
  4610  05C1  0086               	movwf	6
  4611  05C2  3001               	movlw	1	; select bank2/3
  4612  05C3  0087               	movwf	7
  4613  05C4  3F40               	moviw [0]fsr1
  4614  05C5  00A4               	movwf	??_tasks@SpiCommunication$F2142+4
  4615  05C6  3F41               	moviw [1]fsr1
  4616  05C7  00A5               	movwf	??_tasks@SpiCommunication$F2142+5
  4617  05C8  3F42               	moviw [2]fsr1
  4618  05C9  00A6               	movwf	??_tasks@SpiCommunication$F2142+6
  4619  05CA  3F43               	moviw [3]fsr1
  4620  05CB  00A7               	movwf	??_tasks@SpiCommunication$F2142+7
  4621  05CC  0820               	movf	??_tasks@SpiCommunication$F2142,w
  4622  05CD  02A4               	subwf	??_tasks@SpiCommunication$F2142+4,f
  4623  05CE  0821               	movf	??_tasks@SpiCommunication$F2142+1,w
  4624  05CF  3BA5               	subwfb	??_tasks@SpiCommunication$F2142+5,f
  4625  05D0  0822               	movf	??_tasks@SpiCommunication$F2142+2,w
  4626  05D1  3BA6               	subwfb	??_tasks@SpiCommunication$F2142+6,f
  4627  05D2  0823               	movf	??_tasks@SpiCommunication$F2142+3,w
  4628  05D3  3BA7               	subwfb	??_tasks@SpiCommunication$F2142+7,f
  4629  05D4  0827               	movf	??_tasks@SpiCommunication$F2142+7,w
  4630  05D5  1D03               	btfss	3,2
  4631  05D6  2DE2               	goto	u3130
  4632  05D7  0826               	movf	??_tasks@SpiCommunication$F2142+6,w
  4633  05D8  1D03               	btfss	3,2
  4634  05D9  2DE2               	goto	u3130
  4635  05DA  3089               	movlw	137
  4636  05DB  0224               	subwf	??_tasks@SpiCommunication$F2142+4,w
  4637  05DC  3013               	movlw	19
  4638  05DD  3B25               	subwfb	??_tasks@SpiCommunication$F2142+5,w
  4639  05DE  1C03               	btfss	3,0
  4640  05DF  2DE1               	goto	u3131
  4641  05E0  2DE2               	goto	u3130
  4642  05E1                     u3131:
  4643  05E1  2DFD               	goto	l4238
  4644  05E2                     u3130:
  4645  05E2                     l4234:
  4646                           
  4647                           ;SpiCommunication.c: 165:                 __run(this->errorCallBack);
  4648  05E2  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4649  05E3  3E1A               	addlw	26
  4650  05E4  0086               	movwf	6
  4651  05E5  3002               	movlw	2	; select bank4/5
  4652  05E6  0087               	movwf	7
  4653  05E7  3F40               	moviw [0]fsr1
  4654  05E8  00F0               	movwf	___run@function
  4655  05E9  3F41               	moviw [1]fsr1
  4656  05EA  00F1               	movwf	___run@function+1
  4657  05EB  3188  2000  3185   	fcall	___run
  4658  05EE                     l4236:
  4659                           
  4660                           ;SpiCommunication.c: 166:                 this->reset(this);
  4661  05EE  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4662  05EF  0020               	movlb	0	; select bank0
  4663  05F0  00A0               	movwf	??_tasks@SpiCommunication$F2142
  4664  05F1  0820               	movf	??_tasks@SpiCommunication$F2142,w
  4665  05F2  00F5               	movwf	reset@this
  4666  05F3  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4667  05F4  3E10               	addlw	16
  4668  05F5  0086               	movwf	6
  4669  05F6  3002               	movlw	2	; select bank4/5
  4670  05F7  0087               	movwf	7
  4671  05F8  3F41               	moviw [1]fsr1
  4672  05F9  008A               	movwf	10
  4673  05FA  3F40               	moviw [0]fsr1
  4674  05FB  000A               	callw
  4675  05FC  3185               	pagesel	$
  4676  05FD                     l4238:
  4677                           
  4678                           ;SpiCommunication.c: 169:         this->state.val &= 0x0F;
  4679  05FD  300F               	movlw	15
  4680  05FE  0020               	movlb	0	; select bank0
  4681  05FF  00A0               	movwf	??_tasks@SpiCommunication$F2142
  4682  0600  0877               	movf	tasks@SpiCommunication$F2138@this,w
  4683  0601  3E31               	addlw	49
  4684  0602  0086               	movwf	6
  4685  0603  3002               	movlw	2	; select bank4/5
  4686  0604  0087               	movwf	7
  4687  0605  0820               	movf	??_tasks@SpiCommunication$F2142,w
  4688  0606  0581               	andwf	1,f
  4689  0607                     l699:
  4690  0607  0008               	return
  4691  0608                     __end_of_tasks@SpiCommunication$F2138:
  4692                           
  4693                           	psect	text6
  4694  0800                     __ptext6:	
  4695 ;; *************** function ___run *****************
  4696 ;; Defined at:
  4697 ;;		line 30 in file "SpiCommunication.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  function        2    0[COMMON] PTR FTN()void 
  4700 ;;		 -> Absolute function(1), 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        2 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    6
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_tasks@SpiCommunication$F2138
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function ___run
  4728  0800                     ___run:
  4729  0800                     l3866:	
  4730                           ;incstack = 0
  4731                           ; Regs used in ___run: [wreg+status,2+status,0]
  4732                           
  4733  0800                     l638:
  4734  0800  0008               	return
  4735  0801                     __end_of___run:
  4736                           
  4737                           	psect	text7
  4738  03A7                     __ptext7:	
  4739 ;; *************** function _tasks@Comm$F2950 *****************
  4740 ;; Defined at:
  4741 ;;		line 131 in file "Comm.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;Total ram usage:        4 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:   12
  4762 ;; This function calls:
  4763 ;;		Absolute function
  4764 ;;		_commandHandler
  4765 ;;		_inputR
  4766 ;;		_outputW
  4767 ;;		_reset
  4768 ;;		_rxDone
  4769 ;;		_transferFrames
  4770 ;;		_txDone
  4771 ;; This function is called by:
  4772 ;;		_appTasks
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _tasks@Comm$F2950
  4778  03A7                     _tasks@Comm$F2950:
  4779  03A7                     l4248:	
  4780                           ;incstack = 0
  4781                           ; Regs used in _tasks@Comm$F2950: [allreg]
  4782                           
  4783                           
  4784                           ;Comm.c: 132:     switch (state) {
  4785  03A7  2C70               	goto	l4292
  4786  03A8                     l4250:
  4787                           
  4788                           ;Comm.c: 134:             inputR();
  4789  03A8  318A  22DD  3183   	fcall	_inputR
  4790  03AB                     l4252:
  4791                           
  4792                           ;Comm.c: 135:             state = COMM_WAINTING_FRAME;
  4793  03AB  3002               	movlw	2
  4794  03AC  0020               	movlb	0	; select bank0
  4795  03AD  00B8               	movwf	??_tasks@Comm$F2953
  4796  03AE  0838               	movf	??_tasks@Comm$F2953,w
  4797  03AF  00EC               	movwf	_state@Comm$F3023
  4798                           
  4799                           ;Comm.c: 136:             break;
  4800  03B0  2C87               	goto	l790
  4801  03B1                     l4254:
  4802                           
  4803                           ;Comm.c: 138:             if (outputW() == 0)
  4804  03B1  318B  232A  3183   	fcall	_outputW
  4805  03B4  0878               	movf	?_outputW,w
  4806  03B5  0479               	iorwf	?_outputW+1,w
  4807  03B6  1D03               	btfss	3,2
  4808  03B7  2BB9               	goto	u3161
  4809  03B8  2BBA               	goto	u3160
  4810  03B9                     u3161:
  4811  03B9  2BBF               	goto	l4258
  4812  03BA                     u3160:
  4813  03BA                     l4256:
  4814                           
  4815                           ;Comm.c: 139:                 state = COMM_TRANSMITING_FRAME;
  4816  03BA  3003               	movlw	3
  4817  03BB  0020               	movlb	0	; select bank0
  4818  03BC  00B8               	movwf	??_tasks@Comm$F2953
  4819  03BD  0838               	movf	??_tasks@Comm$F2953,w
  4820  03BE  00EC               	movwf	_state@Comm$F3023
  4821  03BF                     l4258:
  4822                           
  4823                           ;Comm.c: 141:             if (instance.commDriver->rxDone(instance.commDriver)) {
  4824  03BF  0020               	movlb	0	; select bank0
  4825  03C0  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4826  03C1  00B8               	movwf	??_tasks@Comm$F2953
  4827  03C2  0838               	movf	??_tasks@Comm$F2953,w
  4828  03C3  00F0               	movwf	rxDone@this
  4829  03C4  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4830  03C5  3E0C               	addlw	12
  4831  03C6  0086               	movwf	6
  4832  03C7  3002               	movlw	2	; select bank4/5
  4833  03C8  0087               	movwf	7
  4834  03C9  3F41               	moviw [1]fsr1
  4835  03CA  008A               	movwf	10
  4836  03CB  3F40               	moviw [0]fsr1
  4837  03CC  000A               	callw
  4838  03CD  3183               	pagesel	$
  4839  03CE  3A00               	xorlw	0
  4840  03CF  1903               	skipnz
  4841  03D0  2BD2               	goto	u3171
  4842  03D1  2BD3               	goto	u3170
  4843  03D2                     u3171:
  4844  03D2  2BEF               	goto	l4268
  4845  03D3                     u3170:
  4846  03D3                     l4260:
  4847                           
  4848                           ;Comm.c: 142:                 inputR();
  4849  03D3  318A  22DD  3183   	fcall	_inputR
  4850                           
  4851                           ;Comm.c: 143:                 transferFrames();
  4852  03D6  3189  211F  3183   	fcall	_transferFrames
  4853  03D9                     l4262:
  4854                           
  4855                           ;Comm.c: 144:                 if (outputW() == 0)
  4856  03D9  318B  232A  3183   	fcall	_outputW
  4857  03DC  0878               	movf	?_outputW,w
  4858  03DD  0479               	iorwf	?_outputW+1,w
  4859  03DE  1D03               	btfss	3,2
  4860  03DF  2BE1               	goto	u3181
  4861  03E0  2BE2               	goto	u3180
  4862  03E1                     u3181:
  4863  03E1  2BE8               	goto	l782
  4864  03E2                     u3180:
  4865  03E2                     l4264:
  4866                           
  4867                           ;Comm.c: 145:                     state = COMM_TRANSMITING_FRAME;
  4868  03E2  3003               	movlw	3
  4869  03E3  0020               	movlb	0	; select bank0
  4870  03E4  00B8               	movwf	??_tasks@Comm$F2953
  4871  03E5  0838               	movf	??_tasks@Comm$F2953,w
  4872  03E6  00EC               	movwf	_state@Comm$F3023
  4873  03E7  2BEB               	goto	l4266
  4874  03E8                     l782:	
  4875                           ;Comm.c: 146:                 else
  4876                           
  4877                           
  4878                           ;Comm.c: 147:                     state = COMM_START_SEND;
  4879  03E8  0020               	movlb	0	; select bank0
  4880  03E9  01EC               	clrf	_state@Comm$F3023
  4881  03EA  0AEC               	incf	_state@Comm$F3023,f
  4882  03EB                     l4266:
  4883                           
  4884                           ;Comm.c: 148:                 commandHandler();
  4885  03EB  3186  2608  3183   	fcall	_commandHandler
  4886                           
  4887                           ;Comm.c: 149:             } else if (((*currentTimeMillis) - timeoutCounter) > 1000) {
  4888  03EE  2C87               	goto	l790
  4889  03EF                     l4268:
  4890  03EF  0020               	movlb	0	; select bank0
  4891  03F0  086B               	movf	_currentTimeMillis@Comm$F3024,w
  4892  03F1  0086               	movwf	6
  4893  03F2  3001               	movlw	1	; select bank2/3
  4894  03F3  0087               	movwf	7
  4895  03F4  3F40               	moviw [0]fsr1
  4896  03F5  00B8               	movwf	??_tasks@Comm$F2953
  4897  03F6  3F41               	moviw [1]fsr1
  4898  03F7  00B9               	movwf	??_tasks@Comm$F2953+1
  4899  03F8  3F42               	moviw [2]fsr1
  4900  03F9  00BA               	movwf	??_tasks@Comm$F2953+2
  4901  03FA  3F43               	moviw [3]fsr1
  4902  03FB  00BB               	movwf	??_tasks@Comm$F2953+3
  4903  03FC  0021               	movlb	1	; select bank1
  4904  03FD  0859               	movf	_timeoutCounter^(0+128),w
  4905  03FE  0020               	movlb	0	; select bank0
  4906  03FF  02B8               	subwf	??_tasks@Comm$F2953,f
  4907  0400  0021               	movlb	1	; select bank1
  4908  0401  085A               	movf	(_timeoutCounter+1)^(0+128),w
  4909  0402  0020               	movlb	0	; select bank0
  4910  0403  3BB9               	subwfb	??_tasks@Comm$F2953+1,f
  4911  0404  0021               	movlb	1	; select bank1
  4912  0405  085B               	movf	(_timeoutCounter+2)^(0+128),w
  4913  0406  0020               	movlb	0	; select bank0
  4914  0407  3BBA               	subwfb	??_tasks@Comm$F2953+2,f
  4915  0408  0021               	movlb	1	; select bank1
  4916  0409  085C               	movf	(_timeoutCounter+3)^(0+128),w
  4917  040A  0020               	movlb	0	; select bank0
  4918  040B  3BBB               	subwfb	??_tasks@Comm$F2953+3,f
  4919  040C  083B               	movf	??_tasks@Comm$F2953+3,w
  4920  040D  1D03               	btfss	3,2
  4921  040E  2C1A               	goto	u3190
  4922  040F  083A               	movf	??_tasks@Comm$F2953+2,w
  4923  0410  1D03               	btfss	3,2
  4924  0411  2C1A               	goto	u3190
  4925  0412  30E9               	movlw	233
  4926  0413  0238               	subwf	??_tasks@Comm$F2953,w
  4927  0414  3003               	movlw	3
  4928  0415  3B39               	subwfb	??_tasks@Comm$F2953+1,w
  4929  0416  1C03               	btfss	3,0
  4930  0417  2C19               	goto	u3191
  4931  0418  2C1A               	goto	u3190
  4932  0419                     u3191:
  4933  0419  2C87               	goto	l790
  4934  041A                     u3190:
  4935  041A                     l4270:
  4936                           
  4937                           ;Comm.c: 150:                 instance.errorCode |= COMM_ERR_READ_TIMOUT;
  4938  041A  15E9               	bsf	_instance@Comm$F3017+6,3
  4939  041B                     l4272:
  4940                           
  4941                           ;Comm.c: 151:                 instance.commDriver->reset(instance.commDriver);
  4942  041B  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4943  041C  00B8               	movwf	??_tasks@Comm$F2953
  4944  041D  0838               	movf	??_tasks@Comm$F2953,w
  4945  041E  00F5               	movwf	reset@this
  4946  041F  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4947  0420  3E10               	addlw	16
  4948  0421  0086               	movwf	6
  4949  0422  3002               	movlw	2	; select bank4/5
  4950  0423  0087               	movwf	7
  4951  0424  3F41               	moviw [1]fsr1
  4952  0425  008A               	movwf	10
  4953  0426  3F40               	moviw [0]fsr1
  4954  0427  000A               	callw
  4955  0428  3183               	pagesel	$
  4956  0429                     l4274:
  4957                           
  4958                           ;Comm.c: 152:                 state = COMM_IDLE;
  4959  0429  0020               	movlb	0	; select bank0
  4960  042A  01EC               	clrf	_state@Comm$F3023
  4961  042B  2C87               	goto	l790
  4962  042C                     l4276:
  4963                           
  4964                           ;Comm.c: 156:             if (instance.commDriver->txDone(instance.commDriver)) {
  4965  042C  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4966  042D  00B8               	movwf	??_tasks@Comm$F2953
  4967  042E  0838               	movf	??_tasks@Comm$F2953,w
  4968  042F  00F0               	movwf	txDone@this
  4969  0430  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  4970  0431  3E0A               	addlw	10
  4971  0432  0086               	movwf	6
  4972  0433  3002               	movlw	2	; select bank4/5
  4973  0434  0087               	movwf	7
  4974  0435  3F41               	moviw [1]fsr1
  4975  0436  008A               	movwf	10
  4976  0437  3F40               	moviw [0]fsr1
  4977  0438  000A               	callw
  4978  0439  3183               	pagesel	$
  4979  043A  3A00               	xorlw	0
  4980  043B  1903               	skipnz
  4981  043C  2C3E               	goto	u3201
  4982  043D  2C3F               	goto	u3200
  4983  043E                     u3201:
  4984  043E  2C43               	goto	l4282
  4985  043F                     u3200:
  4986  043F                     l4278:
  4987                           
  4988                           ;Comm.c: 157:                 inputR();
  4989  043F  318A  22DD  3183   	fcall	_inputR
  4990  0442  2C29               	goto	l4274
  4991  0443                     l4282:
  4992  0443  0020               	movlb	0	; select bank0
  4993  0444  086B               	movf	_currentTimeMillis@Comm$F3024,w
  4994  0445  0086               	movwf	6
  4995  0446  3001               	movlw	1	; select bank2/3
  4996  0447  0087               	movwf	7
  4997  0448  3F40               	moviw [0]fsr1
  4998  0449  00B8               	movwf	??_tasks@Comm$F2953
  4999  044A  3F41               	moviw [1]fsr1
  5000  044B  00B9               	movwf	??_tasks@Comm$F2953+1
  5001  044C  3F42               	moviw [2]fsr1
  5002  044D  00BA               	movwf	??_tasks@Comm$F2953+2
  5003  044E  3F43               	moviw [3]fsr1
  5004  044F  00BB               	movwf	??_tasks@Comm$F2953+3
  5005  0450  0021               	movlb	1	; select bank1
  5006  0451  0859               	movf	_timeoutCounter^(0+128),w
  5007  0452  0020               	movlb	0	; select bank0
  5008  0453  02B8               	subwf	??_tasks@Comm$F2953,f
  5009  0454  0021               	movlb	1	; select bank1
  5010  0455  085A               	movf	(_timeoutCounter+1)^(0+128),w
  5011  0456  0020               	movlb	0	; select bank0
  5012  0457  3BB9               	subwfb	??_tasks@Comm$F2953+1,f
  5013  0458  0021               	movlb	1	; select bank1
  5014  0459  085B               	movf	(_timeoutCounter+2)^(0+128),w
  5015  045A  0020               	movlb	0	; select bank0
  5016  045B  3BBA               	subwfb	??_tasks@Comm$F2953+2,f
  5017  045C  0021               	movlb	1	; select bank1
  5018  045D  085C               	movf	(_timeoutCounter+3)^(0+128),w
  5019  045E  0020               	movlb	0	; select bank0
  5020  045F  3BBB               	subwfb	??_tasks@Comm$F2953+3,f
  5021  0460  083B               	movf	??_tasks@Comm$F2953+3,w
  5022  0461  1D03               	btfss	3,2
  5023  0462  2C6E               	goto	u3210
  5024  0463  083A               	movf	??_tasks@Comm$F2953+2,w
  5025  0464  1D03               	btfss	3,2
  5026  0465  2C6E               	goto	u3210
  5027  0466  302D               	movlw	45
  5028  0467  0238               	subwf	??_tasks@Comm$F2953,w
  5029  0468  3001               	movlw	1
  5030  0469  3B39               	subwfb	??_tasks@Comm$F2953+1,w
  5031  046A  1C03               	btfss	3,0
  5032  046B  2C6D               	goto	u3211
  5033  046C  2C6E               	goto	u3210
  5034  046D                     u3211:
  5035  046D  2C87               	goto	l790
  5036  046E                     u3210:
  5037  046E                     l4284:
  5038                           
  5039                           ;Comm.c: 160:                 instance.errorCode |= COMM_ERR_WRITE_TIMEOUT;
  5040  046E  1669               	bsf	_instance@Comm$F3017+6,4
  5041  046F  2C1B               	goto	l4272
  5042  0470                     l4292:
  5043  0470  0020               	movlb	0	; select bank0
  5044  0471  086C               	movf	_state@Comm$F3023,w
  5045  0472  00B8               	movwf	??_tasks@Comm$F2953
  5046  0473  01B9               	clrf	??_tasks@Comm$F2953+1
  5047                           
  5048                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5049                           ; Switch size 1, requested type "simple"
  5050                           ; Number of cases is 1, Range of values is 0 to 0
  5051                           ; switch strategies available:
  5052                           ; Name         Instructions Cycles
  5053                           ; simple_byte            4     3 (average)
  5054                           ; direct_byte            8     6 (fixed)
  5055                           ; jumptable            260     6 (fixed)
  5056                           ;	Chosen strategy is simple_byte
  5057  0474  0839               	movf	??_tasks@Comm$F2953+1,w
  5058  0475  3A00               	xorlw	0	; case 0
  5059  0476  1903               	skipnz
  5060  0477  2C79               	goto	l4460
  5061  0478  2C87               	goto	l790
  5062  0479                     l4460:
  5063                           
  5064                           ; Switch size 1, requested type "simple"
  5065                           ; Number of cases is 4, Range of values is 0 to 3
  5066                           ; switch strategies available:
  5067                           ; Name         Instructions Cycles
  5068                           ; simple_byte           13     7 (average)
  5069                           ; direct_byte           14     6 (fixed)
  5070                           ; jumptable            260     6 (fixed)
  5071                           ;	Chosen strategy is simple_byte
  5072  0479  0838               	movf	??_tasks@Comm$F2953,w
  5073  047A  3A00               	xorlw	0	; case 0
  5074  047B  1903               	skipnz
  5075  047C  2BA8               	goto	l4250
  5076  047D  3A01               	xorlw	1	; case 1
  5077  047E  1903               	skipnz
  5078  047F  2BB1               	goto	l4254
  5079  0480  3A03               	xorlw	3	; case 2
  5080  0481  1903               	skipnz
  5081  0482  2BBF               	goto	l4258
  5082  0483  3A01               	xorlw	1	; case 3
  5083  0484  1903               	skipnz
  5084  0485  2C2C               	goto	l4276
  5085  0486  2C87               	goto	l790
  5086  0487                     l790:
  5087  0487  0008               	return
  5088  0488                     __end_of_tasks@Comm$F2950:
  5089                           
  5090                           	psect	text8
  5091  08E4                     __ptext8:	
  5092 ;; *************** function _txDone *****************
  5093 ;; Defined at:
  5094 ;;		line 120 in file "SpiCommunication.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  this            1    0[COMMON] PTR struct SPI
  5097 ;;		 -> NULL(0), spi(57), 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      _Bool 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:        3 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    6
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_NewSpiDriver
  5120 ;;		_tasks@Comm$F2950
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           
  5125                           ;psect for function _txDone
  5126  08E4                     _txDone:
  5127  08E4                     l3868:	
  5128                           ;incstack = 0
  5129                           ; Regs used in _txDone: [wreg+fsr1l+fsr1h+status,2+status,0]
  5130                           
  5131                           
  5132                           ;SpiCommunication.c: 121:     return this->charsToSend == 0;
  5133  08E4  0870               	movf	txDone@this,w
  5134  08E5  3E2F               	addlw	47
  5135  08E6  0086               	movwf	6
  5136  08E7  3002               	movlw	2	; select bank4/5
  5137  08E8  0087               	movwf	7
  5138  08E9  0016               	moviw fsr1++
  5139  08EA  0401               	iorwf	1,w
  5140  08EB  1903               	btfsc	3,2
  5141  08EC  28EE               	goto	u2701
  5142  08ED  28F0               	goto	u2700
  5143  08EE                     u2701:
  5144  08EE  3001               	movlw	1
  5145  08EF  28F1               	goto	u2710
  5146  08F0                     u2700:
  5147  08F0  3000               	movlw	0
  5148  08F1                     u2710:
  5149  08F1                     l675:
  5150  08F1  0008               	return
  5151  08F2                     __end_of_txDone:
  5152                           
  5153                           	psect	text9
  5154  091F                     __ptext9:	
  5155 ;; *************** function _transferFrames *****************
  5156 ;; Defined at:
  5157 ;;		line 111 in file "Comm.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;		None
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;		None
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;Total ram usage:        0 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    7
  5178 ;; This function calls:
  5179 ;;		_memcpy
  5180 ;; This function is called by:
  5181 ;;		_tasks@Comm$F2950
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _transferFrames
  5187  091F                     _transferFrames:
  5188  091F                     l3952:	
  5189                           ;incstack = 0
  5190                           ; Regs used in _transferFrames: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5191                           
  5192                           
  5193                           ;Comm.c: 112:     memcpy(outFrame.data, inputFrame.data, 5);
  5194  091F  30E3               	movlw	low _outFrame
  5195  0920  00F0               	movwf	memcpy@d1
  5196  0921  3000               	movlw	high _outFrame
  5197  0922  00F1               	movwf	memcpy@d1+1
  5198  0923  30E8               	movlw	low _inputFrame
  5199  0924  00F2               	movwf	memcpy@s1
  5200  0925  3000               	movlw	high _inputFrame
  5201  0926  00F3               	movwf	memcpy@s1+1
  5202  0927  3005               	movlw	5
  5203  0928  00F4               	movwf	memcpy@n
  5204  0929  3000               	movlw	0
  5205  092A  00F5               	movwf	memcpy@n+1
  5206  092B  318B  2354  3189   	fcall	_memcpy
  5207  092E                     l764:
  5208  092E  0008               	return
  5209  092F                     __end_of_transferFrames:
  5210                           
  5211                           	psect	text10
  5212  098D                     __ptext10:	
  5213 ;; *************** function _rxDone *****************
  5214 ;; Defined at:
  5215 ;;		line 124 in file "SpiCommunication.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;  this            1    0[COMMON] PTR struct SPI
  5218 ;;		 -> NULL(0), spi(57), 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      _Bool 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5230 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;Total ram usage:        1 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    6
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_NewSpiDriver
  5241 ;;		_tasks@Comm$F2950
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _rxDone
  5247  098D                     _rxDone:
  5248  098D                     l3872:	
  5249                           ;incstack = 0
  5250                           ; Regs used in _rxDone: [wreg+fsr1l+fsr1h+status,2+status,0]
  5251                           
  5252                           
  5253                           ;SpiCommunication.c: 125:     if (this->newData) {
  5254  098D  0870               	movf	rxDone@this,w
  5255  098E  3E38               	addlw	56
  5256  098F  0086               	movwf	6
  5257  0990  3002               	movlw	2	; select bank4/5
  5258  0991  0087               	movwf	7
  5259  0992  0801               	movf	1,w
  5260  0993  1903               	btfsc	3,2
  5261  0994  2996               	goto	u2721
  5262  0995  2997               	goto	u2720
  5263  0996                     u2721:
  5264  0996  299F               	goto	l3880
  5265  0997                     u2720:
  5266  0997                     l3874:
  5267                           
  5268                           ;SpiCommunication.c: 126:         this->newData = 0;
  5269  0997  0870               	movf	rxDone@this,w
  5270  0998  3E38               	addlw	56
  5271  0999  0086               	movwf	6
  5272  099A  3002               	movlw	2	; select bank4/5
  5273  099B  0087               	movwf	7
  5274  099C  0181               	clrf	1
  5275  099D                     l3876:
  5276                           
  5277                           ;SpiCommunication.c: 127:         return 1;
  5278  099D  3001               	movlw	1
  5279  099E  29A0               	goto	l679
  5280  099F                     l3880:
  5281                           
  5282                           ;SpiCommunication.c: 129:     return 0;
  5283  099F  3000               	movlw	0
  5284  09A0                     l679:
  5285  09A0  0008               	return
  5286  09A1                     __end_of_rxDone:
  5287                           
  5288                           	psect	text11
  5289  0B2A                     __ptext11:	
  5290 ;; *************** function _outputW *****************
  5291 ;; Defined at:
  5292 ;;		line 99 in file "Comm.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  2    8[COMMON] int 
  5299 ;; Registers used:
  5300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;Total ram usage:        5 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    8
  5313 ;; This function calls:
  5314 ;;		Absolute function
  5315 ;;		_write
  5316 ;; This function is called by:
  5317 ;;		_tasks@Comm$F2950
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _outputW
  5323  0B2A                     _outputW:
  5324  0B2A                     l3946:	
  5325                           ;incstack = 0
  5326                           ; Regs used in _outputW: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5327                           
  5328                           
  5329                           ;Comm.c: 100:     timeoutCounter = (*currentTimeMillis);
  5330  0B2A  0020               	movlb	0	; select bank0
  5331  0B2B  086B               	movf	_currentTimeMillis@Comm$F3024,w
  5332  0B2C  0086               	movwf	6
  5333  0B2D  3001               	movlw	1	; select bank2/3
  5334  0B2E  0087               	movwf	7
  5335  0B2F  3F40               	moviw [0]fsr1
  5336  0B30  0021               	movlb	1	; select bank1
  5337  0B31  00D9               	movwf	_timeoutCounter^(0+128)
  5338  0B32  3F41               	moviw [1]fsr1
  5339  0B33  00DA               	movwf	(_timeoutCounter+1)^(0+128)
  5340  0B34  3F42               	moviw [2]fsr1
  5341  0B35  00DB               	movwf	(_timeoutCounter+2)^(0+128)
  5342  0B36  3F43               	moviw [3]fsr1
  5343  0B37  00DC               	movwf	(_timeoutCounter+3)^(0+128)
  5344  0B38                     l3948:
  5345                           
  5346                           ;Comm.c: 101:     return instance.commDriver->write(instance.commDriver, outFrame.data, 
      +                          5);
  5347  0B38  0020               	movlb	0	; select bank0
  5348  0B39  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  5349  0B3A  00FA               	movwf	??_outputW
  5350  0B3B  087A               	movf	??_outputW,w
  5351  0B3C  00F1               	movwf	write@this
  5352  0B3D  30E3               	movlw	(low (_outFrame| 0))& (0+255)
  5353  0B3E  00FB               	movwf	??_outputW+1
  5354  0B3F  087B               	movf	??_outputW+1,w
  5355  0B40  00F2               	movwf	write@data
  5356  0B41  3005               	movlw	5
  5357  0B42  00FC               	movwf	??_outputW+2
  5358  0B43  087C               	movf	??_outputW+2,w
  5359  0B44  00F3               	movwf	write@length
  5360  0B45  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  5361  0B46  3E02               	addlw	2
  5362  0B47  0086               	movwf	6
  5363  0B48  3002               	movlw	2	; select bank4/5
  5364  0B49  0087               	movwf	7
  5365  0B4A  3F41               	moviw [1]fsr1
  5366  0B4B  008A               	movwf	10
  5367  0B4C  3F40               	moviw [0]fsr1
  5368  0B4D  000A               	callw
  5369  0B4E  318B               	pagesel	$
  5370  0B4F  0872               	movf	?_write+1,w
  5371  0B50  00F9               	movwf	?_outputW+1
  5372  0B51  0871               	movf	?_write,w
  5373  0B52  00F8               	movwf	?_outputW
  5374  0B53                     l755:
  5375  0B53  0008               	return
  5376  0B54                     __end_of_outputW:
  5377                           
  5378                           	psect	text12
  5379  0F05                     __ptext12:	
  5380 ;; *************** function _write *****************
  5381 ;; Defined at:
  5382 ;;		line 77 in file "SpiCommunication.c"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;  this            1    1[COMMON] PTR struct SPI
  5385 ;;		 -> NULL(0), spi(57), 
  5386 ;;  data            1    2[COMMON] PTR unsigned char 
  5387 ;;		 -> outFrame(5), 
  5388 ;;  length          1    3[COMMON] unsigned char 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  2    1[COMMON] int 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        7 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    7
  5407 ;; This function calls:
  5408 ;;		Absolute function
  5409 ;;		_espi_wr2
  5410 ;; This function is called by:
  5411 ;;		_NewSpiDriver
  5412 ;;		_outputW
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _write
  5418  0F05                     _write:
  5419  0F05                     l3706:	
  5420                           ;incstack = 0
  5421                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5422                           
  5423                           
  5424                           ;SpiCommunication.c: 78:     if (this->state.b.open) {
  5425  0F05  0871               	movf	write@this,w
  5426  0F06  3E31               	addlw	49
  5427  0F07  0086               	movwf	6
  5428  0F08  3002               	movlw	2	; select bank4/5
  5429  0F09  0087               	movwf	7
  5430  0F0A  1C01               	btfss	1,0
  5431  0F0B  2F0D               	goto	u2451
  5432  0F0C  2F0E               	goto	u2450
  5433  0F0D                     u2451:
  5434  0F0D  2F6B               	goto	l3724
  5435  0F0E                     u2450:
  5436  0F0E                     l3708:
  5437                           
  5438                           ;SpiCommunication.c: 79:         if (this->charsToSend == 0) {
  5439  0F0E  0871               	movf	write@this,w
  5440  0F0F  3E2F               	addlw	47
  5441  0F10  0086               	movwf	6
  5442  0F11  3002               	movlw	2	; select bank4/5
  5443  0F12  0087               	movwf	7
  5444  0F13  0016               	moviw fsr1++
  5445  0F14  0401               	iorwf	1,w
  5446  0F15  1D03               	btfss	3,2
  5447  0F16  2F18               	goto	u2461
  5448  0F17  2F19               	goto	u2460
  5449  0F18                     u2461:
  5450  0F18  2F66               	goto	l3720
  5451  0F19                     u2460:
  5452  0F19                     l3710:
  5453                           
  5454                           ;SpiCommunication.c: 80:             this->timer = *currentTimeMillis;
  5455  0F19  0020               	movlb	0	; select bank0
  5456  0F1A  086D               	movf	_currentTimeMillis@SpiCommunication$F2173,w
  5457  0F1B  0086               	movwf	6
  5458  0F1C  3001               	movlw	1	; select bank2/3
  5459  0F1D  0087               	movwf	7
  5460  0F1E  3F40               	moviw [0]fsr1
  5461  0F1F  00F4               	movwf	??_write
  5462  0F20  3F41               	moviw [1]fsr1
  5463  0F21  00F5               	movwf	??_write+1
  5464  0F22  3F42               	moviw [2]fsr1
  5465  0F23  00F6               	movwf	??_write+2
  5466  0F24  3F43               	moviw [3]fsr1
  5467  0F25  00F7               	movwf	??_write+3
  5468  0F26  0871               	movf	write@this,w
  5469  0F27  3E32               	addlw	50
  5470  0F28  0086               	movwf	6
  5471  0F29  3002               	movlw	2	; select bank4/5
  5472  0F2A  0087               	movwf	7
  5473  0F2B  0874               	movf	??_write,w
  5474  0F2C  3FC0               	movwi [0]fsr1
  5475  0F2D  0875               	movf	??_write+1,w
  5476  0F2E  3FC1               	movwi [1]fsr1
  5477  0F2F  0876               	movf	??_write+2,w
  5478  0F30  3FC2               	movwi [2]fsr1
  5479  0F31  0877               	movf	??_write+3,w
  5480  0F32  3FC3               	movwi [3]fsr1
  5481                           
  5482                           ;SpiCommunication.c: 81:             this->charsToSend = length - 1;
  5483  0F33  0873               	movf	write@length,w
  5484  0F34  3EFF               	addlw	255
  5485  0F35  00F4               	movwf	??_write
  5486  0F36  30FF               	movlw	255
  5487  0F37  1803               	skipnc
  5488  0F38  3000               	movlw	0
  5489  0F39  00F5               	movwf	??_write+1
  5490  0F3A  0871               	movf	write@this,w
  5491  0F3B  3E2F               	addlw	47
  5492  0F3C  0086               	movwf	6
  5493  0F3D  3002               	movlw	2	; select bank4/5
  5494  0F3E  0087               	movwf	7
  5495  0F3F  0874               	movf	??_write,w
  5496  0F40  3FC0               	movwi [0]fsr1
  5497  0F41  0875               	movf	??_write+1,w
  5498  0F42  3FC1               	movwi [1]fsr1
  5499                           
  5500                           ;SpiCommunication.c: 82:             this->dataToWrite = data;
  5501  0F43  0872               	movf	write@data,w
  5502  0F44  00F4               	movwf	??_write
  5503  0F45  0871               	movf	write@this,w
  5504  0F46  3E37               	addlw	55
  5505  0F47  0086               	movwf	6
  5506  0F48  3002               	movlw	2	; select bank4/5
  5507  0F49  0087               	movwf	7
  5508  0F4A  0874               	movf	??_write,w
  5509  0F4B  0081               	movwf	1
  5510  0F4C                     l3712:
  5511                           
  5512                           ;SpiCommunication.c: 83:             this->writeByte_2(*this->dataToWrite++);
  5513  0F4C  0871               	movf	write@this,w
  5514  0F4D  3E37               	addlw	55
  5515  0F4E  0086               	movwf	6
  5516  0F4F  3002               	movlw	2	; select bank4/5
  5517  0F50  0087               	movwf	7
  5518  0F51  3F40               	moviw [0]fsr1
  5519  0F52  0084               	movwf	4
  5520  0F53  0185               	clrf	5
  5521  0F54  0A81               	incf	1,f
  5522  0F55  0800               	movf	0,w
  5523  0F56  00F4               	movwf	??_write
  5524  0F57  0874               	movf	??_write,w
  5525  0F58  00F0               	movwf	espi_wr2@byte
  5526  0F59  0871               	movf	write@this,w
  5527  0F5A  3E29               	addlw	41
  5528  0F5B  0086               	movwf	6
  5529  0F5C  3002               	movlw	2	; select bank4/5
  5530  0F5D  0087               	movwf	7
  5531  0F5E  3F41               	moviw [1]fsr1
  5532  0F5F  008A               	movwf	10
  5533  0F60  3F40               	moviw [0]fsr1
  5534  0F61  000A               	callw
  5535  0F62  318F               	pagesel	$
  5536  0F63                     l3714:
  5537                           
  5538                           ;SpiCommunication.c: 84:             return 0;
  5539  0F63  01F1               	clrf	?_write
  5540  0F64  01F2               	clrf	?_write+1
  5541  0F65  2F6F               	goto	l655
  5542  0F66                     l3720:
  5543                           
  5544                           ;SpiCommunication.c: 86:             return -2;
  5545  0F66  30FE               	movlw	254
  5546  0F67  00F1               	movwf	?_write
  5547  0F68  30FF               	movlw	255
  5548  0F69  00F2               	movwf	?_write+1
  5549  0F6A  2F6F               	goto	l655
  5550  0F6B                     l3724:
  5551                           
  5552                           ;SpiCommunication.c: 88:         return -1;
  5553  0F6B  30FF               	movlw	255
  5554  0F6C  00F1               	movwf	?_write
  5555  0F6D  30FF               	movlw	255
  5556  0F6E  00F2               	movwf	?_write+1
  5557  0F6F                     l655:
  5558  0F6F  0008               	return
  5559  0F70                     __end_of_write:
  5560                           
  5561                           	psect	text13
  5562  0ADD                     __ptext13:	
  5563 ;; *************** function _inputR *****************
  5564 ;; Defined at:
  5565 ;;		line 94 in file "Comm.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  2  751[None  ] int 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        3 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    7
  5586 ;; This function calls:
  5587 ;;		Absolute function
  5588 ;;		_read
  5589 ;; This function is called by:
  5590 ;;		_tasks@Comm$F2950
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _inputR
  5596  0ADD                     _inputR:
  5597  0ADD                     l3940:	
  5598                           ;incstack = 0
  5599                           ; Regs used in _inputR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5600                           
  5601                           
  5602                           ;Comm.c: 95:     timeoutCounter = (*currentTimeMillis);
  5603  0ADD  0020               	movlb	0	; select bank0
  5604  0ADE  086B               	movf	_currentTimeMillis@Comm$F3024,w
  5605  0ADF  0086               	movwf	6
  5606  0AE0  3001               	movlw	1	; select bank2/3
  5607  0AE1  0087               	movwf	7
  5608  0AE2  3F40               	moviw [0]fsr1
  5609  0AE3  0021               	movlb	1	; select bank1
  5610  0AE4  00D9               	movwf	_timeoutCounter^(0+128)
  5611  0AE5  3F41               	moviw [1]fsr1
  5612  0AE6  00DA               	movwf	(_timeoutCounter+1)^(0+128)
  5613  0AE7  3F42               	moviw [2]fsr1
  5614  0AE8  00DB               	movwf	(_timeoutCounter+2)^(0+128)
  5615  0AE9  3F43               	moviw [3]fsr1
  5616  0AEA  00DC               	movwf	(_timeoutCounter+3)^(0+128)
  5617  0AEB                     l3942:
  5618                           
  5619                           ;Comm.c: 96:     return instance.commDriver->read(instance.commDriver, inputFrame.data, 
      +                          5);;	Return value of _inputR is never used
  5620  0AEB  0020               	movlb	0	; select bank0
  5621  0AEC  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  5622  0AED  00F7               	movwf	??_inputR
  5623  0AEE  0877               	movf	??_inputR,w
  5624  0AEF  00F0               	movwf	read@this
  5625  0AF0  30E8               	movlw	(low (_inputFrame| 0))& (0+255)
  5626  0AF1  00F8               	movwf	??_inputR+1
  5627  0AF2  0878               	movf	??_inputR+1,w
  5628  0AF3  00F1               	movwf	read@data
  5629  0AF4  3005               	movlw	5
  5630  0AF5  00F9               	movwf	??_inputR+2
  5631  0AF6  0879               	movf	??_inputR+2,w
  5632  0AF7  00F2               	movwf	read@length
  5633  0AF8  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  5634  0AF9  0086               	movwf	6
  5635  0AFA  3002               	movlw	2	; select bank4/5
  5636  0AFB  0087               	movwf	7
  5637  0AFC  3F41               	moviw [1]fsr1
  5638  0AFD  008A               	movwf	10
  5639  0AFE  3F40               	moviw [0]fsr1
  5640  0AFF  000A               	callw
  5641  0B00  318A               	pagesel	$
  5642  0B01                     l752:
  5643  0B01  0008               	return
  5644  0B02                     __end_of_inputR:
  5645                           
  5646                           	psect	text14
  5647  0DA6                     __ptext14:	
  5648 ;; *************** function _read *****************
  5649 ;; Defined at:
  5650 ;;		line 64 in file "SpiCommunication.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  this            1    0[COMMON] PTR struct SPI
  5653 ;;		 -> NULL(0), spi(57), 
  5654 ;;  data            1    1[COMMON] PTR unsigned char 
  5655 ;;		 -> inputFrame(5), 
  5656 ;;  length          1    2[COMMON] unsigned char 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  2    0[COMMON] int 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5668 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;Total ram usage:        7 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    6
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_NewSpiDriver
  5679 ;;		_inputR
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           
  5684                           ;psect for function _read
  5685  0DA6                     _read:
  5686  0DA6                     l3686:	
  5687                           ;incstack = 0
  5688                           ; Regs used in _read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5689                           
  5690                           
  5691                           ;SpiCommunication.c: 65:     if (this->state.b.open) {
  5692  0DA6  0870               	movf	read@this,w
  5693  0DA7  3E31               	addlw	49
  5694  0DA8  0086               	movwf	6
  5695  0DA9  3002               	movlw	2	; select bank4/5
  5696  0DAA  0087               	movwf	7
  5697  0DAB  1C01               	btfss	1,0
  5698  0DAC  2DAE               	goto	u2431
  5699  0DAD  2DAF               	goto	u2430
  5700  0DAE                     u2431:
  5701  0DAE  2DF1               	goto	l3702
  5702  0DAF                     u2430:
  5703  0DAF                     l3688:
  5704                           
  5705                           ;SpiCommunication.c: 66:         if (this->charsToReceive == 0) {
  5706  0DAF  0870               	movf	read@this,w
  5707  0DB0  3E2D               	addlw	45
  5708  0DB1  0086               	movwf	6
  5709  0DB2  3002               	movlw	2	; select bank4/5
  5710  0DB3  0087               	movwf	7
  5711  0DB4  0016               	moviw fsr1++
  5712  0DB5  0401               	iorwf	1,w
  5713  0DB6  1D03               	btfss	3,2
  5714  0DB7  2DB9               	goto	u2441
  5715  0DB8  2DBA               	goto	u2440
  5716  0DB9                     u2441:
  5717  0DB9  2DEC               	goto	l3698
  5718  0DBA                     u2440:
  5719  0DBA                     l3690:
  5720                           
  5721                           ;SpiCommunication.c: 67:             this->timer = *currentTimeMillis;
  5722  0DBA  0020               	movlb	0	; select bank0
  5723  0DBB  086D               	movf	_currentTimeMillis@SpiCommunication$F2173,w
  5724  0DBC  0086               	movwf	6
  5725  0DBD  3001               	movlw	1	; select bank2/3
  5726  0DBE  0087               	movwf	7
  5727  0DBF  3F40               	moviw [0]fsr1
  5728  0DC0  00F3               	movwf	??_read
  5729  0DC1  3F41               	moviw [1]fsr1
  5730  0DC2  00F4               	movwf	??_read+1
  5731  0DC3  3F42               	moviw [2]fsr1
  5732  0DC4  00F5               	movwf	??_read+2
  5733  0DC5  3F43               	moviw [3]fsr1
  5734  0DC6  00F6               	movwf	??_read+3
  5735  0DC7  0870               	movf	read@this,w
  5736  0DC8  3E32               	addlw	50
  5737  0DC9  0086               	movwf	6
  5738  0DCA  3002               	movlw	2	; select bank4/5
  5739  0DCB  0087               	movwf	7
  5740  0DCC  0873               	movf	??_read,w
  5741  0DCD  3FC0               	movwi [0]fsr1
  5742  0DCE  0874               	movf	??_read+1,w
  5743  0DCF  3FC1               	movwi [1]fsr1
  5744  0DD0  0875               	movf	??_read+2,w
  5745  0DD1  3FC2               	movwi [2]fsr1
  5746  0DD2  0876               	movf	??_read+3,w
  5747  0DD3  3FC3               	movwi [3]fsr1
  5748                           
  5749                           ;SpiCommunication.c: 68:             this->charsToReceive = length;
  5750  0DD4  0872               	movf	read@length,w
  5751  0DD5  00F3               	movwf	??_read
  5752  0DD6  01F4               	clrf	??_read+1
  5753  0DD7  0870               	movf	read@this,w
  5754  0DD8  3E2D               	addlw	45
  5755  0DD9  0086               	movwf	6
  5756  0DDA  3002               	movlw	2	; select bank4/5
  5757  0DDB  0087               	movwf	7
  5758  0DDC  0873               	movf	??_read,w
  5759  0DDD  3FC0               	movwi [0]fsr1
  5760  0DDE  0874               	movf	??_read+1,w
  5761  0DDF  3FC1               	movwi [1]fsr1
  5762                           
  5763                           ;SpiCommunication.c: 69:             this->dataToRead = data;
  5764  0DE0  0871               	movf	read@data,w
  5765  0DE1  00F3               	movwf	??_read
  5766  0DE2  0870               	movf	read@this,w
  5767  0DE3  3E36               	addlw	54
  5768  0DE4  0086               	movwf	6
  5769  0DE5  3002               	movlw	2	; select bank4/5
  5770  0DE6  0087               	movwf	7
  5771  0DE7  0873               	movf	??_read,w
  5772  0DE8  0081               	movwf	1
  5773  0DE9                     l3692:
  5774                           
  5775                           ;SpiCommunication.c: 70:             return 0;
  5776  0DE9  01F0               	clrf	?_read
  5777  0DEA  01F1               	clrf	?_read+1
  5778  0DEB  2DF5               	goto	l648
  5779  0DEC                     l3698:
  5780                           
  5781                           ;SpiCommunication.c: 72:             return -2;
  5782  0DEC  30FE               	movlw	254
  5783  0DED  00F0               	movwf	?_read
  5784  0DEE  30FF               	movlw	255
  5785  0DEF  00F1               	movwf	?_read+1
  5786  0DF0  2DF5               	goto	l648
  5787  0DF1                     l3702:
  5788                           
  5789                           ;SpiCommunication.c: 74:         return -1;
  5790  0DF1  30FF               	movlw	255
  5791  0DF2  00F0               	movwf	?_read
  5792  0DF3  30FF               	movlw	255
  5793  0DF4  00F1               	movwf	?_read+1
  5794  0DF5                     l648:
  5795  0DF5  0008               	return
  5796  0DF6                     __end_of_read:
  5797                           
  5798                           	psect	text15
  5799  0608                     __ptext15:	
  5800 ;; *************** function _commandHandler *****************
  5801 ;; Defined at:
  5802 ;;		line 58 in file "Comm.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  reg             1   23[BANK0 ] PTR struct COMM_REG
  5807 ;;		 -> table.regs(50), table(54), NULL(0), 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        3 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:   11
  5824 ;; This function calls:
  5825 ;;		Absolute function
  5826 ;;		_creatErrorFrame
  5827 ;;		_getRegister
  5828 ;;		_getSUM
  5829 ;;		_reset@Comm$F2985
  5830 ;;		_runMotors
  5831 ;;		_setMotor1Clockwise
  5832 ;;		_setMotor1Counterclockwise
  5833 ;;		_setMotor2Clockwise
  5834 ;;		_setMotor2Counterclockwise
  5835 ;;		_stopMotors
  5836 ;; This function is called by:
  5837 ;;		_tasks@Comm$F2950
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _commandHandler
  5843  0608                     _commandHandler:
  5844  0608                     l3896:	
  5845                           ;incstack = 0
  5846                           ; Regs used in _commandHandler: [allreg]
  5847                           
  5848                           
  5849                           ;Comm.c: 59:     instance.errorCode = COMM_ERR_OK;
  5850  0608  0020               	movlb	0	; select bank0
  5851  0609  01E9               	clrf	_instance@Comm$F3017+6
  5852  060A  01EA               	clrf	_instance@Comm$F3017+7
  5853  060B                     l3898:
  5854                           
  5855                           ;Comm.c: 60:     if (getSUM(inputFrame.data, 5 - 1) != inputFrame.fields.checksum) {
  5856  060B  3004               	movlw	4
  5857  060C  00B5               	movwf	??_commandHandler
  5858  060D  0835               	movf	??_commandHandler,w
  5859  060E  00F0               	movwf	getSUM@n
  5860  060F  30E8               	movlw	(low (_inputFrame| 0))& (0+255)
  5861  0610  318A  226C  3186   	fcall	_getSUM
  5862  0613  0021               	movlb	1	; select bank1
  5863  0614  066C               	xorwf	(_inputFrame^(0+128)+4),w
  5864  0615  1903               	skipnz
  5865  0616  2E18               	goto	u2751
  5866  0617  2E19               	goto	u2750
  5867  0618                     u2751:
  5868  0618  2E1F               	goto	l3908
  5869  0619                     u2750:
  5870  0619                     l3900:
  5871                           
  5872                           ;Comm.c: 61:         instance.errorCode |= COMM_ERR_BAD_CHKS;
  5873  0619  0020               	movlb	0	; select bank0
  5874  061A  1469               	bsf	_instance@Comm$F3017+6,0
  5875  061B                     l3902:
  5876                           
  5877                           ;Comm.c: 63:         reset();
  5878  061B  3189  212F  3186   	fcall	_reset@Comm$F2985
  5879  061E  2EBE               	goto	l737
  5880  061F                     l3908:
  5881  061F  0C68               	rrf	_inputFrame^(0+128),w
  5882  0620  390F               	andlw	15
  5883  0621  0020               	movlb	0	; select bank0
  5884  0622  0662               	xorwf	_sequence,w
  5885  0623  1D03               	skipz
  5886  0624  2E26               	goto	u2761
  5887  0625  2E27               	goto	u2760
  5888  0626                     u2761:
  5889  0626  2E37               	goto	l3914
  5890  0627                     u2760:
  5891  0627                     l3910:
  5892                           
  5893                           ;Comm.c: 66:         instance.errorCode |= COMM_ERR_BAD_SEQUENCE;
  5894  0627  14E9               	bsf	_instance@Comm$F3017+6,1
  5895  0628                     l3912:
  5896                           
  5897                           ;Comm.c: 67:         outFrame.fields.reg = 100;
  5898  0628  3064               	movlw	100
  5899  0629  00B5               	movwf	??_commandHandler
  5900  062A  0835               	movf	??_commandHandler,w
  5901  062B  0021               	movlb	1	; select bank1
  5902  062C  00E4               	movwf	(_outFrame^(0+128)+1)
  5903                           
  5904                           ;Comm.c: 68:         outFrame.fields.value = COMM_ERR_BAD_SEQUENCE;
  5905  062D  3002               	movlw	2
  5906  062E  00E5               	movwf	(_outFrame^(0+128)+2)
  5907  062F  3000               	movlw	0
  5908  0630  00E6               	movwf	(_outFrame^(0+128)+3)
  5909                           
  5910                           ;Comm.c: 69:         sequence = 16;
  5911  0631  3010               	movlw	16
  5912  0632  0020               	movlb	0	; select bank0
  5913  0633  00B5               	movwf	??_commandHandler
  5914  0634  0835               	movf	??_commandHandler,w
  5915  0635  00E2               	movwf	_sequence
  5916                           
  5917                           ;Comm.c: 70:     } else {
  5918  0636  2EA6               	goto	l3934
  5919  0637                     l3914:
  5920                           
  5921                           ;Comm.c: 71:         sequence = inputFrame.fields.header.d.sequence;
  5922  0637  0021               	movlb	1	; select bank1
  5923  0638  0C68               	rrf	_inputFrame^(0+128),w
  5924  0639  390F               	andlw	15
  5925  063A  0020               	movlb	0	; select bank0
  5926  063B  00B5               	movwf	??_commandHandler
  5927  063C  0835               	movf	??_commandHandler,w
  5928  063D  00E2               	movwf	_sequence
  5929  063E                     l3916:
  5930                           
  5931                           ;Comm.c: 72:         CommRegister * reg = table.getRegister(inputFrame.fields.reg);
  5932  063E  0021               	movlb	1	; select bank1
  5933  063F  0869               	movf	(_inputFrame^(0+128)+1),w
  5934  0640  0020               	movlb	0	; select bank0
  5935  0641  00B5               	movwf	??_commandHandler
  5936  0642  0835               	movf	??_commandHandler,w
  5937  0643  00FC               	movwf	getRegister@address
  5938  0644  3034               	movlw	52
  5939  0645  3EA0               	addlw	(low (_table| (0+512)))& (0+255)
  5940  0646  0086               	movwf	6
  5941  0647  3002               	movlw	2	; select bank5/6
  5942  0648  0087               	movwf	7
  5943  0649  3F41               	moviw [1]fsr1
  5944  064A  008A               	movwf	10
  5945  064B  3F40               	moviw [0]fsr1
  5946  064C  000A               	callw
  5947  064D  3186               	pagesel	$
  5948  064E  0020               	movlb	0	; select bank0
  5949  064F  00B6               	movwf	??_commandHandler+1
  5950  0650  0836               	movf	??_commandHandler+1,w
  5951  0651  00B7               	movwf	commandHandler@reg
  5952  0652                     l3918:
  5953                           
  5954                           ;Comm.c: 73:         if (reg != 0) {
  5955  0652  0837               	movf	commandHandler@reg,w
  5956  0653  1903               	btfsc	3,2
  5957  0654  2E56               	goto	u2771
  5958  0655  2E57               	goto	u2770
  5959  0656                     u2771:
  5960  0656  2EA5               	goto	l746
  5961  0657                     u2770:
  5962  0657                     l3920:
  5963                           
  5964                           ;Comm.c: 74:             if (inputFrame.fields.header.d.write) {
  5965  0657  0021               	movlb	1	; select bank1
  5966  0658  1C68               	btfss	_inputFrame^(0+128),0
  5967  0659  2E5B               	goto	u2781
  5968  065A  2E5C               	goto	u2780
  5969  065B                     u2781:
  5970  065B  2E84               	goto	l3928
  5971  065C                     u2780:
  5972  065C                     l3922:
  5973                           
  5974                           ;Comm.c: 75:                 if (reg->action)
  5975  065C  0020               	movlb	0	; select bank0
  5976  065D  0837               	movf	commandHandler@reg,w
  5977  065E  0086               	movwf	6
  5978  065F  3002               	movlw	2	; select bank4/5
  5979  0660  0087               	movwf	7
  5980  0661  0016               	moviw fsr1++
  5981  0662  0401               	iorwf	1,w
  5982  0663  1903               	btfsc	3,2
  5983  0664  2E66               	goto	u2791
  5984  0665  2E67               	goto	u2790
  5985  0666                     u2791:
  5986  0666  2E71               	goto	l3926
  5987  0667                     u2790:
  5988  0667                     l3924:
  5989                           
  5990                           ;Comm.c: 76:                     reg->action();
  5991  0667  0837               	movf	commandHandler@reg,w
  5992  0668  0086               	movwf	6
  5993  0669  3002               	movlw	2	; select bank4/5
  5994  066A  0087               	movwf	7
  5995  066B  3F41               	moviw [1]fsr1
  5996  066C  008A               	movwf	10
  5997  066D  3F40               	moviw [0]fsr1
  5998  066E  000A               	callw
  5999  066F  3186               	pagesel	$
  6000  0670  2EA6               	goto	l3934
  6001  0671                     l3926:
  6002                           
  6003                           ;Comm.c: 78:                     *reg->val = inputFrame.fields.value;
  6004  0671  0837               	movf	commandHandler@reg,w
  6005  0672  3E02               	addlw	2
  6006  0673  0086               	movwf	6
  6007  0674  3002               	movlw	2	; select bank4/5
  6008  0675  0087               	movwf	7
  6009  0676  3F40               	moviw [0]fsr1
  6010  0677  00B5               	movwf	??_commandHandler
  6011  0678  3F41               	moviw [1]fsr1
  6012  0679  00B6               	movwf	??_commandHandler+1
  6013  067A  0835               	movf	??_commandHandler,w
  6014  067B  0086               	movwf	6
  6015  067C  0836               	movf	??_commandHandler+1,w
  6016  067D  0087               	movwf	7
  6017  067E  0021               	movlb	1	; select bank1
  6018  067F  086A               	movf	(_inputFrame^(0+128)+2),w
  6019  0680  3FC0               	movwi [0]fsr1
  6020  0681  086B               	movf	((_inputFrame+1)^(0+128)+2),w
  6021  0682  3FC1               	movwi [1]fsr1
  6022  0683  2EA6               	goto	l3934
  6023  0684                     l3928:
  6024                           
  6025                           ;Comm.c: 80:                 if (reg->action == 0) {
  6026  0684  0020               	movlb	0	; select bank0
  6027  0685  0837               	movf	commandHandler@reg,w
  6028  0686  0086               	movwf	6
  6029  0687  3002               	movlw	2	; select bank4/5
  6030  0688  0087               	movwf	7
  6031  0689  0016               	moviw fsr1++
  6032  068A  0401               	iorwf	1,w
  6033  068B  1D03               	btfss	3,2
  6034  068C  2E8E               	goto	u2801
  6035  068D  2E8F               	goto	u2800
  6036  068E                     u2801:
  6037  068E  2EA5               	goto	l746
  6038  068F                     u2800:
  6039  068F                     l3930:
  6040                           
  6041                           ;Comm.c: 81:                     outFrame.fields.header.d.write = 1;
  6042  068F  0021               	movlb	1	; select bank1
  6043  0690  1463               	bsf	_outFrame^(0+128),0
  6044  0691                     l3932:
  6045                           
  6046                           ;Comm.c: 82:                     outFrame.fields.value = *reg->val;
  6047  0691  0020               	movlb	0	; select bank0
  6048  0692  0837               	movf	commandHandler@reg,w
  6049  0693  3E02               	addlw	2
  6050  0694  0086               	movwf	6
  6051  0695  3002               	movlw	2	; select bank4/5
  6052  0696  0087               	movwf	7
  6053  0697  3F40               	moviw [0]fsr1
  6054  0698  00B5               	movwf	??_commandHandler
  6055  0699  3F41               	moviw [1]fsr1
  6056  069A  00B6               	movwf	??_commandHandler+1
  6057  069B  0835               	movf	??_commandHandler,w
  6058  069C  0086               	movwf	6
  6059  069D  0836               	movf	??_commandHandler+1,w
  6060  069E  0087               	movwf	7
  6061  069F  3F40               	moviw [0]fsr1
  6062  06A0  0021               	movlb	1	; select bank1
  6063  06A1  00E5               	movwf	(_outFrame^(0+128)+2)
  6064  06A2  3F41               	moviw [1]fsr1
  6065  06A3  00E6               	movwf	((_outFrame+1)^(0+128)+2)
  6066                           
  6067                           ;Comm.c: 83:                 } else
  6068  06A4  2EA6               	goto	l3934
  6069  06A5                     l746:
  6070                           
  6071                           ;Comm.c: 84:                     instance.errorCode |= COMM_ERR_INVALID_REG;
  6072  06A5  1569               	bsf	_instance@Comm$F3017+6,2
  6073  06A6                     l3934:
  6074                           
  6075                           ;Comm.c: 89:     if (instance.errorCode != COMM_ERR_OK)
  6076  06A6  0020               	movlb	0	; select bank0
  6077  06A7  0869               	movf	_instance@Comm$F3017+6,w
  6078  06A8  046A               	iorwf	_instance@Comm$F3017+7,w
  6079  06A9  1903               	btfsc	3,2
  6080  06AA  2EAC               	goto	u2811
  6081  06AB  2EAD               	goto	u2810
  6082  06AC                     u2811:
  6083  06AC  2EB0               	goto	l3938
  6084  06AD                     u2810:
  6085  06AD                     l3936:
  6086                           
  6087                           ;Comm.c: 90:         creatErrorFrame();
  6088  06AD  3189  2140  3186   	fcall	_creatErrorFrame
  6089  06B0                     l3938:
  6090                           
  6091                           ;Comm.c: 91:     outFrame.fields.checksum = getSUM(outFrame.data, 5 - 1);
  6092  06B0  3004               	movlw	4
  6093  06B1  0020               	movlb	0	; select bank0
  6094  06B2  00B5               	movwf	??_commandHandler
  6095  06B3  0835               	movf	??_commandHandler,w
  6096  06B4  00F0               	movwf	getSUM@n
  6097  06B5  30E3               	movlw	(low (_outFrame| 0))& (0+255)
  6098  06B6  318A  226C  3186   	fcall	_getSUM
  6099  06B9  0020               	movlb	0	; select bank0
  6100  06BA  00B6               	movwf	??_commandHandler+1
  6101  06BB  0836               	movf	??_commandHandler+1,w
  6102  06BC  0021               	movlb	1	; select bank1
  6103  06BD  00E7               	movwf	(_outFrame^(0+128)+4)
  6104  06BE                     l737:
  6105  06BE  0008               	return
  6106  06BF                     __end_of_commandHandler:
  6107                           
  6108                           	psect	text16
  6109  0AC0                     __ptext16:	
  6110 ;; *************** function _runMotors *****************
  6111 ;; Defined at:
  6112 ;;		line 70 in file "app.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        1 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    7
  6133 ;; This function calls:
  6134 ;;		Absolute function
  6135 ;;		_run
  6136 ;; This function is called by:
  6137 ;;		_appTasks
  6138 ;;		_commandHandler
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _runMotors
  6144  0AC0                     _runMotors:
  6145  0AC0                     l3682:	
  6146                           ;incstack = 0
  6147                           ; Regs used in _runMotors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6148                           
  6149                           
  6150                           ;app.c: 71:     motor1.run(&motor1);
  6151  0AC0  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  6152  0AC1  00F1               	movwf	??_runMotors
  6153  0AC2  0871               	movf	??_runMotors,w
  6154  0AC3  00F0               	movwf	run@this
  6155  0AC4  3008               	movlw	8
  6156  0AC5  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  6157  0AC6  0086               	movwf	6
  6158  0AC7  3001               	movlw	1	; select bank3/4
  6159  0AC8  0087               	movwf	7
  6160  0AC9  3F41               	moviw [1]fsr1
  6161  0ACA  008A               	movwf	10
  6162  0ACB  3F40               	moviw [0]fsr1
  6163  0ACC  000A               	callw
  6164  0ACD  318A               	pagesel	$
  6165                           
  6166                           ;app.c: 72:     motor2.run(&motor2);
  6167  0ACE  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  6168  0ACF  00F1               	movwf	??_runMotors
  6169  0AD0  0871               	movf	??_runMotors,w
  6170  0AD1  00F0               	movwf	run@this
  6171  0AD2  3008               	movlw	8
  6172  0AD3  3EA0               	addlw	(low (_motor2| (0+256)))& (0+255)
  6173  0AD4  0086               	movwf	6
  6174  0AD5  3001               	movlw	1	; select bank3/4
  6175  0AD6  0087               	movwf	7
  6176  0AD7  3F41               	moviw [1]fsr1
  6177  0AD8  008A               	movwf	10
  6178  0AD9  3F40               	moviw [0]fsr1
  6179  0ADA  000A               	callw
  6180  0ADB  318A               	pagesel	$
  6181  0ADC                     l447:
  6182  0ADC  0008               	return
  6183  0ADD                     __end_of_runMotors:
  6184                           
  6185                           	psect	text17
  6186  08BB                     __ptext17:	
  6187 ;; *************** function _setMotor2Counterclockwise *****************
  6188 ;; Defined at:
  6189 ;;		line 66 in file "app.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        1 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    8
  6210 ;; This function calls:
  6211 ;;		Absolute function
  6212 ;;		_setDir
  6213 ;; This function is called by:
  6214 ;;		_commandHandler
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _setMotor2Counterclockwise
  6220  08BB                     _setMotor2Counterclockwise:
  6221  08BB                     l3680:	
  6222                           ;incstack = 0
  6223                           ; Regs used in _setMotor2Counterclockwise: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6224                           
  6225                           
  6226                           ;app.c: 67:     motor2.setDir(&motor2, 0);
  6227  08BB  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  6228  08BC  0020               	movlb	0	; select bank0
  6229  08BD  00B4               	movwf	??_setMotor2Counterclockwise
  6230  08BE  0834               	movf	??_setMotor2Counterclockwise,w
  6231  08BF  00AE               	movwf	setDir@this
  6232  08C0  01AF               	clrf	setDir@dir
  6233  08C1  0023               	movlb	3	; select bank3
  6234  08C2  0821               	movf	(_motor2+1)^(0+384),w
  6235  08C3  008A               	movwf	10
  6236  08C4  0820               	movf	_motor2^(0+384),w
  6237  08C5  000A               	callw
  6238  08C6  3188               	pagesel	$
  6239  08C7                     l444:
  6240  08C7  0008               	return
  6241  08C8                     __end_of_setMotor2Counterclockwise:
  6242                           
  6243                           	psect	text18
  6244  08D6                     __ptext18:	
  6245 ;; *************** function _setMotor2Clockwise *****************
  6246 ;; Defined at:
  6247 ;;		line 62 in file "app.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;		None
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      void 
  6254 ;; Registers used:
  6255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;Total ram usage:        1 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    8
  6268 ;; This function calls:
  6269 ;;		Absolute function
  6270 ;;		_setDir
  6271 ;; This function is called by:
  6272 ;;		_commandHandler
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function _setMotor2Clockwise
  6278  08D6                     _setMotor2Clockwise:
  6279  08D6                     l3678:	
  6280                           ;incstack = 0
  6281                           ; Regs used in _setMotor2Clockwise: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6282                           
  6283                           
  6284                           ;app.c: 63:     motor2.setDir(&motor2, 1);
  6285  08D6  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  6286  08D7  0020               	movlb	0	; select bank0
  6287  08D8  00B4               	movwf	??_setMotor2Clockwise
  6288  08D9  0834               	movf	??_setMotor2Clockwise,w
  6289  08DA  00AE               	movwf	setDir@this
  6290  08DB  01AF               	clrf	setDir@dir
  6291  08DC  0AAF               	incf	setDir@dir,f
  6292  08DD  0023               	movlb	3	; select bank3
  6293  08DE  0821               	movf	(_motor2+1)^(0+384),w
  6294  08DF  008A               	movwf	10
  6295  08E0  0820               	movf	_motor2^(0+384),w
  6296  08E1  000A               	callw
  6297  08E2  3188               	pagesel	$
  6298  08E3                     l441:
  6299  08E3  0008               	return
  6300  08E4                     __end_of_setMotor2Clockwise:
  6301                           
  6302                           	psect	text19
  6303  08AE                     __ptext19:	
  6304 ;; *************** function _setMotor1Counterclockwise *****************
  6305 ;; Defined at:
  6306 ;;		line 58 in file "app.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;Total ram usage:        1 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    8
  6327 ;; This function calls:
  6328 ;;		Absolute function
  6329 ;;		_setDir
  6330 ;; This function is called by:
  6331 ;;		_commandHandler
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _setMotor1Counterclockwise
  6337  08AE                     _setMotor1Counterclockwise:
  6338  08AE                     l3676:	
  6339                           ;incstack = 0
  6340                           ; Regs used in _setMotor1Counterclockwise: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6341                           
  6342                           
  6343                           ;app.c: 59:     motor1.setDir(&motor1, 0);
  6344  08AE  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  6345  08AF  0020               	movlb	0	; select bank0
  6346  08B0  00B4               	movwf	??_setMotor1Counterclockwise
  6347  08B1  0834               	movf	??_setMotor1Counterclockwise,w
  6348  08B2  00AE               	movwf	setDir@this
  6349  08B3  01AF               	clrf	setDir@dir
  6350  08B4  0023               	movlb	3	; select bank3
  6351  08B5  0841               	movf	(_motor1+1)^(0+384),w
  6352  08B6  008A               	movwf	10
  6353  08B7  0840               	movf	_motor1^(0+384),w
  6354  08B8  000A               	callw
  6355  08B9  3188               	pagesel	$
  6356  08BA                     l438:
  6357  08BA  0008               	return
  6358  08BB                     __end_of_setMotor1Counterclockwise:
  6359                           
  6360                           	psect	text20
  6361  08C8                     __ptext20:	
  6362 ;; *************** function _setMotor1Clockwise *****************
  6363 ;; Defined at:
  6364 ;;		line 54 in file "app.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;Total ram usage:        1 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    8
  6385 ;; This function calls:
  6386 ;;		Absolute function
  6387 ;;		_setDir
  6388 ;; This function is called by:
  6389 ;;		_commandHandler
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _setMotor1Clockwise
  6395  08C8                     _setMotor1Clockwise:
  6396  08C8                     l3674:	
  6397                           ;incstack = 0
  6398                           ; Regs used in _setMotor1Clockwise: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6399                           
  6400                           
  6401                           ;app.c: 55:     motor1.setDir(&motor1, 1);
  6402  08C8  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  6403  08C9  0020               	movlb	0	; select bank0
  6404  08CA  00B4               	movwf	??_setMotor1Clockwise
  6405  08CB  0834               	movf	??_setMotor1Clockwise,w
  6406  08CC  00AE               	movwf	setDir@this
  6407  08CD  01AF               	clrf	setDir@dir
  6408  08CE  0AAF               	incf	setDir@dir,f
  6409  08CF  0023               	movlb	3	; select bank3
  6410  08D0  0841               	movf	(_motor1+1)^(0+384),w
  6411  08D1  008A               	movwf	10
  6412  08D2  0840               	movf	_motor1^(0+384),w
  6413  08D3  000A               	callw
  6414  08D4  3188               	pagesel	$
  6415  08D5                     l435:
  6416  08D5  0008               	return
  6417  08D6                     __end_of_setMotor1Clockwise:
  6418                           
  6419                           	psect	text21
  6420  0AA3                     __ptext21:	
  6421 ;; *************** function _stopMotors *****************
  6422 ;; Defined at:
  6423 ;;		line 75 in file "app.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;Total ram usage:        1 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    7
  6444 ;; This function calls:
  6445 ;;		Absolute function
  6446 ;;		_stop
  6447 ;; This function is called by:
  6448 ;;		_commandHandler
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           
  6453                           ;psect for function _stopMotors
  6454  0AA3                     _stopMotors:
  6455  0AA3                     l3684:	
  6456                           ;incstack = 0
  6457                           ; Regs used in _stopMotors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6458                           
  6459                           
  6460                           ;app.c: 76:     motor1.stop(&motor1);
  6461  0AA3  30C0               	movlw	(low (_motor1| (0+256)))& (0+255)
  6462  0AA4  00F1               	movwf	??_stopMotors
  6463  0AA5  0871               	movf	??_stopMotors,w
  6464  0AA6  00F0               	movwf	stop@this
  6465  0AA7  3006               	movlw	6
  6466  0AA8  3EC0               	addlw	(low (_motor1| (0+256)))& (0+255)
  6467  0AA9  0086               	movwf	6
  6468  0AAA  3001               	movlw	1	; select bank3/4
  6469  0AAB  0087               	movwf	7
  6470  0AAC  3F41               	moviw [1]fsr1
  6471  0AAD  008A               	movwf	10
  6472  0AAE  3F40               	moviw [0]fsr1
  6473  0AAF  000A               	callw
  6474  0AB0  318A               	pagesel	$
  6475                           
  6476                           ;app.c: 77:     motor2.stop(&motor2);
  6477  0AB1  30A0               	movlw	(low (_motor2| (0+256)))& (0+255)
  6478  0AB2  00F1               	movwf	??_stopMotors
  6479  0AB3  0871               	movf	??_stopMotors,w
  6480  0AB4  00F0               	movwf	stop@this
  6481  0AB5  3006               	movlw	6
  6482  0AB6  3EA0               	addlw	(low (_motor2| (0+256)))& (0+255)
  6483  0AB7  0086               	movwf	6
  6484  0AB8  3001               	movlw	1	; select bank3/4
  6485  0AB9  0087               	movwf	7
  6486  0ABA  3F41               	moviw [1]fsr1
  6487  0ABB  008A               	movwf	10
  6488  0ABC  3F40               	moviw [0]fsr1
  6489  0ABD  000A               	callw
  6490  0ABE  318A               	pagesel	$
  6491  0ABF                     l450:
  6492  0ABF  0008               	return
  6493  0AC0                     __end_of_stopMotors:
  6494                           
  6495                           	psect	text22
  6496  080D                     __ptext22:	
  6497 ;; *************** function _stop *****************
  6498 ;; Defined at:
  6499 ;;		line 67 in file "DCMotor.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  this            1    0[COMMON] PTR struct DCMOTOR
  6502 ;;		 -> motor2(32), motor1(32), 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;Total ram usage:        1 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    6
  6521 ;; This function calls:
  6522 ;;		Nothing
  6523 ;; This function is called by:
  6524 ;;		_NewDCMotor
  6525 ;;		_stopMotors
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _stop
  6531  080D                     _stop:
  6532  080D                     l3642:	
  6533                           ;incstack = 0
  6534                           ; Regs used in _stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  6535                           
  6536                           
  6537                           ;DCMotor.c: 68:     this->running = 0;
  6538  080D  0870               	movf	stop@this,w
  6539  080E  3E17               	addlw	23
  6540  080F  0086               	movwf	6
  6541  0810  3001               	movlw	1	; select bank2/3
  6542  0811  0087               	movwf	7
  6543  0812  0181               	clrf	1
  6544  0813                     l504:
  6545  0813  0008               	return
  6546  0814                     __end_of_stop:
  6547                           
  6548                           	psect	text23
  6549  0D10                     __ptext23:	
  6550 ;; *************** function _setDir *****************
  6551 ;; Defined at:
  6552 ;;		line 43 in file "DCMotor.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  this            1   14[BANK0 ] PTR struct DCMOTOR
  6555 ;;		 -> motor2(32), motor1(32), 
  6556 ;;  dir             1   15[BANK0 ] _Bool 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        6 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		Absolute function
  6577 ;;		_EPWM1_LoadDutyValue
  6578 ;;		_PWM3_LoadDutyValue
  6579 ;; This function is called by:
  6580 ;;		_NewDCMotor
  6581 ;;		_setMotor1Clockwise
  6582 ;;		_setMotor1Counterclockwise
  6583 ;;		_setMotor2Clockwise
  6584 ;;		_setMotor2Counterclockwise
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _setDir
  6590  0D10                     _setDir:
  6591  0D10                     l3632:	
  6592                           ;incstack = 0
  6593                           ; Regs used in _setDir: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6594                           
  6595                           
  6596                           ;DCMotor.c: 44:     if (this->dir != dir) {
  6597  0D10  0020               	movlb	0	; select bank0
  6598  0D11  082E               	movf	setDir@this,w
  6599  0D12  3E16               	addlw	22
  6600  0D13  0086               	movwf	6
  6601  0D14  3001               	movlw	1	; select bank2/3
  6602  0D15  0087               	movwf	7
  6603  0D16  0801               	movf	1,w
  6604  0D17  062F               	xorwf	setDir@dir,w
  6605  0D18  1903               	skipnz
  6606  0D19  2D1B               	goto	u2401
  6607  0D1A  2D1C               	goto	u2400
  6608  0D1B                     u2401:
  6609  0D1B  2D56               	goto	l492
  6610  0D1C                     u2400:
  6611  0D1C                     l3634:
  6612                           
  6613                           ;DCMotor.c: 45:         this->hwSetSpeed(500);
  6614  0D1C  30F4               	movlw	244
  6615  0D1D  00AC               	movwf	EPWM1_LoadDutyValue@dutyValue
  6616  0D1E  3001               	movlw	1
  6617  0D1F  00AD               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  6618  0D20  082E               	movf	setDir@this,w
  6619  0D21  3E14               	addlw	20
  6620  0D22  0086               	movwf	6
  6621  0D23  3001               	movlw	1	; select bank2/3
  6622  0D24  0087               	movwf	7
  6623  0D25  3F41               	moviw [1]fsr1
  6624  0D26  008A               	movwf	10
  6625  0D27  3F40               	moviw [0]fsr1
  6626  0D28  000A               	callw
  6627  0D29  318D               	pagesel	$
  6628  0D2A                     l3636:
  6629                           
  6630                           ;DCMotor.c: 46:         this->state = MOTOR_WAITING_OFF;
  6631  0D2A  3002               	movlw	2
  6632  0D2B  0020               	movlb	0	; select bank0
  6633  0D2C  00B0               	movwf	??_setDir
  6634  0D2D  082E               	movf	setDir@this,w
  6635  0D2E  3E18               	addlw	24
  6636  0D2F  0086               	movwf	6
  6637  0D30  3001               	movlw	1	; select bank2/3
  6638  0D31  0087               	movwf	7
  6639  0D32  0830               	movf	??_setDir,w
  6640  0D33  0081               	movwf	1
  6641  0D34                     l3638:
  6642                           
  6643                           ;DCMotor.c: 47:         this->dir = dir;
  6644  0D34  082F               	movf	setDir@dir,w
  6645  0D35  00B0               	movwf	??_setDir
  6646  0D36  082E               	movf	setDir@this,w
  6647  0D37  3E16               	addlw	22
  6648  0D38  0086               	movwf	6
  6649  0D39  3001               	movlw	1	; select bank2/3
  6650  0D3A  0087               	movwf	7
  6651  0D3B  0830               	movf	??_setDir,w
  6652  0D3C  0081               	movwf	1
  6653  0D3D                     l3640:
  6654                           
  6655                           ;DCMotor.c: 48:         this->timer = *timeBase;
  6656  0D3D  086F               	movf	_timeBase,w
  6657  0D3E  0086               	movwf	6
  6658  0D3F  3001               	movlw	1	; select bank2/3
  6659  0D40  0087               	movwf	7
  6660  0D41  3F40               	moviw [0]fsr1
  6661  0D42  00B0               	movwf	??_setDir
  6662  0D43  3F41               	moviw [1]fsr1
  6663  0D44  00B1               	movwf	??_setDir+1
  6664  0D45  3F42               	moviw [2]fsr1
  6665  0D46  00B2               	movwf	??_setDir+2
  6666  0D47  3F43               	moviw [3]fsr1
  6667  0D48  00B3               	movwf	??_setDir+3
  6668  0D49  082E               	movf	setDir@this,w
  6669  0D4A  3E1B               	addlw	27
  6670  0D4B  0086               	movwf	6
  6671  0D4C  3001               	movlw	1	; select bank2/3
  6672  0D4D  0087               	movwf	7
  6673  0D4E  0830               	movf	??_setDir,w
  6674  0D4F  3FC0               	movwi [0]fsr1
  6675  0D50  0831               	movf	??_setDir+1,w
  6676  0D51  3FC1               	movwi [1]fsr1
  6677  0D52  0832               	movf	??_setDir+2,w
  6678  0D53  3FC2               	movwi [2]fsr1
  6679  0D54  0833               	movf	??_setDir+3,w
  6680  0D55  3FC3               	movwi [3]fsr1
  6681  0D56                     l492:
  6682  0D56  0008               	return
  6683  0D57                     __end_of_setDir:
  6684                           
  6685                           	psect	text24
  6686  081C                     __ptext24:	
  6687 ;; *************** function _run *****************
  6688 ;; Defined at:
  6689 ;;		line 71 in file "DCMotor.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  this            1    0[COMMON] PTR struct DCMOTOR
  6692 ;;		 -> motor2(32), motor1(32), 
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6704 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;Total ram usage:        1 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    6
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_NewDCMotor
  6715 ;;		_runMotors
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           
  6720                           ;psect for function _run
  6721  081C                     _run:
  6722  081C                     l3644:	
  6723                           ;incstack = 0
  6724                           ; Regs used in _run: [wreg+fsr1l+fsr1h+status,2+status,0]
  6725                           
  6726                           
  6727                           ;DCMotor.c: 72:     this->running = 1;
  6728  081C  0870               	movf	run@this,w
  6729  081D  3E17               	addlw	23
  6730  081E  0086               	movwf	6
  6731  081F  3001               	movlw	1	; select bank2/3
  6732  0820  0087               	movwf	7
  6733  0821  0181               	clrf	1
  6734  0822  0A81               	incf	1,f
  6735  0823                     l507:
  6736  0823  0008               	return
  6737  0824                     __end_of_run:
  6738                           
  6739                           	psect	text25
  6740  092F                     __ptext25:	
  6741 ;; *************** function _reset@Comm$F2985 *****************
  6742 ;; Defined at:
  6743 ;;		line 186 in file "Comm.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;		None
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;		None
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;Total ram usage:        1 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:   10
  6764 ;; This function calls:
  6765 ;;		Absolute function
  6766 ;;		_reset
  6767 ;; This function is called by:
  6768 ;;		_commandHandler
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           
  6773                           ;psect for function _reset@Comm$F2985
  6774  092F                     _reset@Comm$F2985:
  6775  092F                     l3742:	
  6776                           ;incstack = 0
  6777                           ; Regs used in _reset@Comm$F2985: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6778                           
  6779                           
  6780                           ;Comm.c: 187:     state = COMM_IDLE;
  6781  092F  0020               	movlb	0	; select bank0
  6782  0930  01EC               	clrf	_state@Comm$F3023
  6783  0931                     l3744:
  6784                           
  6785                           ;Comm.c: 188:     instance.commDriver->reset(instance.commDriver);
  6786  0931  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  6787  0932  00F7               	movwf	??_reset@Comm$F2988
  6788  0933  0877               	movf	??_reset@Comm$F2988,w
  6789  0934  00F5               	movwf	reset@this
  6790  0935  0867               	movf	low ((_instance@Comm$F3017| 0+4)),w
  6791  0936  3E10               	addlw	16
  6792  0937  0086               	movwf	6
  6793  0938  3002               	movlw	2	; select bank4/5
  6794  0939  0087               	movwf	7
  6795  093A  3F41               	moviw [1]fsr1
  6796  093B  008A               	movwf	10
  6797  093C  3F40               	moviw [0]fsr1
  6798  093D  000A               	callw
  6799  093E  3189               	pagesel	$
  6800  093F                     l806:
  6801  093F  0008               	return
  6802  0940                     __end_of_reset@Comm$F2985:
  6803                           
  6804                           	psect	text26
  6805  0CCA                     __ptext26:	
  6806 ;; *************** function _reset *****************
  6807 ;; Defined at:
  6808 ;;		line 144 in file "SpiCommunication.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  this            1    5[COMMON] PTR struct SPI
  6811 ;;		 -> NULL(0), spi(57), 
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;		None
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  1    wreg      void 
  6816 ;; Registers used:
  6817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6823 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;Total ram usage:        2 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    9
  6830 ;; This function calls:
  6831 ;;		Absolute function
  6832 ;;		_espi_int
  6833 ;;		_espi_rst
  6834 ;;		_espi_wr2
  6835 ;; This function is called by:
  6836 ;;		_NewSpiDriver
  6837 ;;		_reset@Comm$F2985
  6838 ;;		_tasks@SpiCommunication$F2138
  6839 ;;		_tasks@Comm$F2950
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           
  6844                           ;psect for function _reset
  6845  0CCA                     _reset:
  6846  0CCA                     l3646:	
  6847                           ;incstack = 0
  6848                           ; Regs used in _reset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6849                           
  6850                           
  6851                           ;SpiCommunication.c: 145:     this->hwInterrupEnable(0);
  6852  0CCA  01F0               	clrf	espi_int@ie
  6853  0CCB  0875               	movf	reset@this,w
  6854  0CCC  3E2B               	addlw	43
  6855  0CCD  0086               	movwf	6
  6856  0CCE  3002               	movlw	2	; select bank4/5
  6857  0CCF  0087               	movwf	7
  6858  0CD0  3F41               	moviw [1]fsr1
  6859  0CD1  008A               	movwf	10
  6860  0CD2  3F40               	moviw [0]fsr1
  6861  0CD3  000A               	callw
  6862  0CD4  318C               	pagesel	$
  6863  0CD5                     l3648:
  6864                           
  6865                           ;SpiCommunication.c: 146:     this->hwreset();
  6866  0CD5  0875               	movf	reset@this,w
  6867  0CD6  3E23               	addlw	35
  6868  0CD7  0086               	movwf	6
  6869  0CD8  3002               	movlw	2	; select bank4/5
  6870  0CD9  0087               	movwf	7
  6871  0CDA  3F41               	moviw [1]fsr1
  6872  0CDB  008A               	movwf	10
  6873  0CDC  3F40               	moviw [0]fsr1
  6874  0CDD  000A               	callw
  6875  0CDE  318C               	pagesel	$
  6876  0CDF                     l3650:
  6877                           
  6878                           ;SpiCommunication.c: 147:     this->state.val = 0x0F;
  6879  0CDF  300F               	movlw	15
  6880  0CE0  00F6               	movwf	??_reset
  6881  0CE1  0875               	movf	reset@this,w
  6882  0CE2  3E31               	addlw	49
  6883  0CE3  0086               	movwf	6
  6884  0CE4  3002               	movlw	2	; select bank4/5
  6885  0CE5  0087               	movwf	7
  6886  0CE6  0876               	movf	??_reset,w
  6887  0CE7  0081               	movwf	1
  6888  0CE8                     l3652:
  6889                           
  6890                           ;SpiCommunication.c: 148:     this->writeByte_2(0);
  6891  0CE8  01F0               	clrf	espi_wr2@byte
  6892  0CE9  0875               	movf	reset@this,w
  6893  0CEA  3E29               	addlw	41
  6894  0CEB  0086               	movwf	6
  6895  0CEC  3002               	movlw	2	; select bank4/5
  6896  0CED  0087               	movwf	7
  6897  0CEE  3F41               	moviw [1]fsr1
  6898  0CEF  008A               	movwf	10
  6899  0CF0  3F40               	moviw [0]fsr1
  6900  0CF1  000A               	callw
  6901  0CF2  318C               	pagesel	$
  6902  0CF3                     l3654:
  6903                           
  6904                           ;SpiCommunication.c: 149:     this->charsToReceive = 0;
  6905  0CF3  0875               	movf	reset@this,w
  6906  0CF4  3E2D               	addlw	45
  6907  0CF5  0086               	movwf	6
  6908  0CF6  3002               	movlw	2	; select bank4/5
  6909  0CF7  0087               	movwf	7
  6910  0CF8  3000               	movlw	0
  6911  0CF9  3FC0               	movwi [0]fsr1
  6912  0CFA  3FC1               	movwi [1]fsr1
  6913  0CFB                     l3656:
  6914                           
  6915                           ;SpiCommunication.c: 150:     this->charsToSend = 0;
  6916  0CFB  0875               	movf	reset@this,w
  6917  0CFC  3E2F               	addlw	47
  6918  0CFD  0086               	movwf	6
  6919  0CFE  3002               	movlw	2	; select bank4/5
  6920  0CFF  0087               	movwf	7
  6921  0D00  3000               	movlw	0
  6922  0D01  3FC0               	movwi [0]fsr1
  6923  0D02  3FC1               	movwi [1]fsr1
  6924  0D03                     l3658:
  6925                           
  6926                           ;SpiCommunication.c: 151:     this->hwInterrupEnable(1);
  6927  0D03  01F0               	clrf	espi_int@ie
  6928  0D04  0AF0               	incf	espi_int@ie,f
  6929  0D05  0875               	movf	reset@this,w
  6930  0D06  3E2B               	addlw	43
  6931  0D07  0086               	movwf	6
  6932  0D08  3002               	movlw	2	; select bank4/5
  6933  0D09  0087               	movwf	7
  6934  0D0A  3F41               	moviw [1]fsr1
  6935  0D0B  008A               	movwf	10
  6936  0D0C  3F40               	moviw [0]fsr1
  6937  0D0D  000A               	callw
  6938  0D0E  318C               	pagesel	$
  6939  0D0F                     l690:
  6940  0D0F  0008               	return
  6941  0D10                     __end_of_reset:
  6942                           
  6943                           	psect	text27
  6944  17D3                     __ptext27:	
  6945 ;; *************** function _espi_wr2 *****************
  6946 ;; Defined at:
  6947 ;;		line 30 in file "enhaced_spi.c"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;  byte            1    0[COMMON] unsigned char 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;		None
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      void 
  6954 ;; Registers used:
  6955 ;;		wreg
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6961 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;Total ram usage:        1 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    6
  6968 ;; This function calls:
  6969 ;;		Nothing
  6970 ;; This function is called by:
  6971 ;;		_appTasks
  6972 ;;		_reset
  6973 ;;		_write
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           
  6978                           ;psect for function _espi_wr2
  6979  17D3                     _espi_wr2:
  6980  17D3                     l3616:	
  6981                           ;incstack = 0
  6982                           ; Regs used in _espi_wr2: [wreg]
  6983                           
  6984                           
  6985                           ;enhaced_spi.c: 31:     SSP1BUF = byte;
  6986  17D3  0870               	movf	espi_wr2@byte,w
  6987  17D4  0024               	movlb	4	; select bank4
  6988  17D5  0091               	movwf	17	;volatile
  6989  17D6                     l842:
  6990  17D6  0008               	return
  6991  17D7                     __end_of_espi_wr2:
  6992                           
  6993                           	psect	text28
  6994  0A22                     __ptext28:	
  6995 ;; *************** function _espi_rst *****************
  6996 ;; Defined at:
  6997 ;;		line 47 in file "enhaced_spi.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;		None
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  1    wreg      void 
  7004 ;; Registers used:
  7005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;Total ram usage:        1 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    8
  7018 ;; This function calls:
  7019 ;;		_espi_op
  7020 ;; This function is called by:
  7021 ;;		_appTasks
  7022 ;;		_reset
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _espi_rst
  7028  0A22                     _espi_rst:
  7029  0A22                     l3618:	
  7030                           ;incstack = 0
  7031                           ; Regs used in _espi_rst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7032                           
  7033                           
  7034                           ;enhaced_spi.c: 48:     SSP1CON1bits.SSPEN = 0;
  7035  0A22  0024               	movlb	4	; select bank4
  7036  0A23  1295               	bcf	21,5	;volatile
  7037  0A24  0000               	nop	;# 
  7038  0A25  0000               	nop	;# 
  7039  0A26  0000               	nop	;# 
  7040  0A27                     l3620:
  7041                           
  7042                           ;enhaced_spi.c: 52:     espi_op();
  7043  0A27  3197  27D7  318A   	fcall	_espi_op
  7044  0A2A                     l3622:
  7045                           
  7046                           ;enhaced_spi.c: 53:     SSP1CON1bits.WCOL = 0;
  7047  0A2A  0024               	movlb	4	; select bank4
  7048  0A2B  1395               	bcf	21,7	;volatile
  7049                           
  7050                           ;enhaced_spi.c: 54:     while (SSP1STATbits.BF)
  7051  0A2C  2A32               	goto	l3626
  7052  0A2D                     l3624:
  7053                           
  7054                           ;enhaced_spi.c: 55:         buff = SSP1BUF;
  7055  0A2D  0811               	movf	17,w	;volatile
  7056  0A2E  00F4               	movwf	??_espi_rst
  7057  0A2F  0874               	movf	??_espi_rst,w
  7058  0A30  0021               	movlb	1	; select bank1
  7059  0A31  00E1               	movwf	_buff^(0+128)
  7060  0A32                     l3626:
  7061                           
  7062                           ;enhaced_spi.c: 54:     while (SSP1STATbits.BF)
  7063  0A32  0024               	movlb	4	; select bank4
  7064  0A33  1814               	btfsc	20,0	;volatile
  7065  0A34  2A36               	goto	u2381
  7066  0A35  2A37               	goto	u2380
  7067  0A36                     u2381:
  7068  0A36  2A2D               	goto	l3624
  7069  0A37                     u2380:
  7070  0A37                     l857:
  7071  0A37  0008               	return
  7072  0A38                     __end_of_espi_rst:
  7073                           
  7074                           	psect	text29
  7075  08A1                     __ptext29:	
  7076 ;; *************** function _espi_int *****************
  7077 ;; Defined at:
  7078 ;;		line 58 in file "enhaced_spi.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  ie              1    0[COMMON] _Bool 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;		None
  7083 ;; Return value:  Size  Location     Type
  7084 ;;                  1    wreg      void 
  7085 ;; Registers used:
  7086 ;;		wreg, status,2, status,0
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7092 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;Total ram usage:        1 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    6
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		_appTasks
  7103 ;;		_reset
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           
  7108                           ;psect for function _espi_int
  7109  08A1                     _espi_int:
  7110  08A1                     l3628:	
  7111                           ;incstack = 0
  7112                           ; Regs used in _espi_int: [wreg+status,2+status,0]
  7113                           
  7114                           
  7115                           ;enhaced_spi.c: 59:     if (ie) {
  7116  08A1  0870               	movf	espi_int@ie,w
  7117  08A2  1903               	btfsc	3,2
  7118  08A3  28A5               	goto	u2391
  7119  08A4  28A6               	goto	u2390
  7120  08A5                     u2391:
  7121  08A5  28AA               	goto	l860
  7122  08A6                     u2390:
  7123  08A6                     l3630:
  7124                           
  7125                           ;enhaced_spi.c: 60:         PIE2bits.BCL1IE = 1;
  7126  08A6  0021               	movlb	1	; select bank1
  7127  08A7  1592               	bsf	18,3	;volatile
  7128                           
  7129                           ;enhaced_spi.c: 61:         PIE1bits.SSP1IE = 1;
  7130  08A8  1591               	bsf	17,3	;volatile
  7131                           
  7132                           ;enhaced_spi.c: 62:     } else {
  7133  08A9  28AD               	goto	l862
  7134  08AA                     l860:
  7135                           
  7136                           ;enhaced_spi.c: 63:         PIE2bits.BCL1IE = 0;
  7137  08AA  0021               	movlb	1	; select bank1
  7138  08AB  1192               	bcf	18,3	;volatile
  7139                           
  7140                           ;enhaced_spi.c: 64:         PIE1bits.SSP1IE = 0;
  7141  08AC  1191               	bcf	17,3	;volatile
  7142  08AD                     l862:
  7143  08AD  0008               	return
  7144  08AE                     __end_of_espi_int:
  7145                           
  7146                           	psect	text30
  7147  0A6C                     __ptext30:	
  7148 ;; *************** function _getSUM *****************
  7149 ;; Defined at:
  7150 ;;		line 104 in file "Comm.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  buff            1    wreg     PTR unsigned char 
  7153 ;;		 -> outFrame(5), inputFrame(5), 
  7154 ;;  n               1    0[COMMON] unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  buff            1    4[COMMON] PTR unsigned char 
  7157 ;;		 -> outFrame(5), inputFrame(5), 
  7158 ;;  i               1    3[COMMON] unsigned char 
  7159 ;;  out             1    2[COMMON] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      unsigned char 
  7162 ;; Registers used:
  7163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7169 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;Total ram usage:        5 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    6
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_commandHandler
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _getSUM
  7185  0A6C                     _getSUM:
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _getSUM: [wreg+fsr1l+fsr1h+status,2+status,0]
  7189                           ;getSUM@buff stored from wreg
  7190  0A6C  00F4               	movwf	getSUM@buff
  7191  0A6D                     l3728:
  7192                           
  7193                           ;Comm.c: 105:     uint8_t out = 0;
  7194  0A6D  01F2               	clrf	getSUM@out
  7195                           
  7196                           ;Comm.c: 106:     for (uint8_t i = 0; i < n; i++)
  7197  0A6E  01F3               	clrf	getSUM@i
  7198  0A6F  2A7F               	goto	l3736
  7199  0A70                     l3730:
  7200                           
  7201                           ;Comm.c: 107:         out += *buff++;
  7202  0A70  0874               	movf	getSUM@buff,w
  7203  0A71  0086               	movwf	6
  7204  0A72  0187               	clrf	7
  7205  0A73  0801               	movf	1,w
  7206  0A74  00F1               	movwf	??_getSUM
  7207  0A75  0871               	movf	??_getSUM,w
  7208  0A76  07F2               	addwf	getSUM@out,f
  7209  0A77                     l3732:
  7210  0A77  3001               	movlw	1
  7211  0A78  00F1               	movwf	??_getSUM
  7212  0A79  0871               	movf	??_getSUM,w
  7213  0A7A  07F4               	addwf	getSUM@buff,f
  7214  0A7B                     l3734:
  7215  0A7B  3001               	movlw	1
  7216  0A7C  00F1               	movwf	??_getSUM
  7217  0A7D  0871               	movf	??_getSUM,w
  7218  0A7E  07F3               	addwf	getSUM@i,f
  7219  0A7F                     l3736:
  7220  0A7F  0870               	movf	getSUM@n,w
  7221  0A80  0273               	subwf	getSUM@i,w
  7222  0A81  1C03               	skipc
  7223  0A82  2A84               	goto	u2471
  7224  0A83  2A85               	goto	u2470
  7225  0A84                     u2471:
  7226  0A84  2A70               	goto	l3730
  7227  0A85                     u2470:
  7228  0A85                     l3738:
  7229                           
  7230                           ;Comm.c: 108:     return out;
  7231  0A85  0872               	movf	getSUM@out,w
  7232  0A86                     l761:
  7233  0A86  0008               	return
  7234  0A87                     __end_of_getSUM:
  7235                           
  7236                           	psect	text31
  7237  0B80                     __ptext31:	
  7238 ;; *************** function _getRegister *****************
  7239 ;; Defined at:
  7240 ;;		line 168 in file "Comm.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;  address         1   12[COMMON] unsigned char 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  i               1    0[BANK0 ] unsigned char 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      PTR struct COMM_REG
  7247 ;; Registers used:
  7248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7254 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;Total ram usage:        3 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:    7
  7261 ;; This function calls:
  7262 ;;		___bmul
  7263 ;; This function is called by:
  7264 ;;		_commandHandler
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _getRegister
  7270  0B80                     _getRegister:
  7271  0B80                     l3758:	
  7272                           ;incstack = 0
  7273                           ; Regs used in _getRegister: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7274                           
  7275                           
  7276                           ;Comm.c: 169:     if (address) {
  7277  0B80  087C               	movf	getRegister@address,w
  7278  0B81  1903               	btfsc	3,2
  7279  0B82  2B84               	goto	u2491
  7280  0B83  2B85               	goto	u2490
  7281  0B84                     u2491:
  7282  0B84  2BAF               	goto	l3776
  7283  0B85                     u2490:
  7284  0B85                     l3760:
  7285                           
  7286                           ;Comm.c: 170:         for (uint8_t i = 0; i < 10; i++) {
  7287  0B85  0020               	movlb	0	; select bank0
  7288  0B86  01A0               	clrf	getRegister@i
  7289  0B87                     l3766:
  7290                           
  7291                           ;Comm.c: 171:             if (table.regs[i].reg == address)
  7292  0B87  3005               	movlw	5
  7293  0B88  00FD               	movwf	??_getRegister
  7294  0B89  087D               	movf	??_getRegister,w
  7295  0B8A  00F8               	movwf	___bmul@multiplicand
  7296  0B8B  0820               	movf	getRegister@i,w
  7297  0B8C  3189  21A1  318B   	fcall	___bmul
  7298  0B8F  3EA6               	addlw	(low ((_table| (0+512)+6)))& (0+255)
  7299  0B90  0086               	movwf	6
  7300  0B91  3002               	movlw	2	; select bank5/6
  7301  0B92  0087               	movwf	7
  7302  0B93  0801               	movf	1,w
  7303  0B94  067C               	xorwf	getRegister@address,w
  7304  0B95  1D03               	skipz
  7305  0B96  2B98               	goto	u2501
  7306  0B97  2B99               	goto	u2500
  7307  0B98                     u2501:
  7308  0B98  2BA4               	goto	l3772
  7309  0B99                     u2500:
  7310  0B99                     l3768:
  7311                           
  7312                           ;Comm.c: 172:                 return &table.regs[i];
  7313  0B99  3005               	movlw	5
  7314  0B9A  00FD               	movwf	??_getRegister
  7315  0B9B  087D               	movf	??_getRegister,w
  7316  0B9C  00F8               	movwf	___bmul@multiplicand
  7317  0B9D  0020               	movlb	0	; select bank0
  7318  0B9E  0820               	movf	getRegister@i,w
  7319  0B9F  3189  21A1  318B   	fcall	___bmul
  7320  0BA2  3EA2               	addlw	(low ((_table| (0+512)+2)))& (0+255)
  7321  0BA3  2BB0               	goto	l797
  7322  0BA4                     l3772:
  7323                           
  7324                           ;Comm.c: 173:         }
  7325  0BA4  3001               	movlw	1
  7326  0BA5  00FD               	movwf	??_getRegister
  7327  0BA6  087D               	movf	??_getRegister,w
  7328  0BA7  0020               	movlb	0	; select bank0
  7329  0BA8  07A0               	addwf	getRegister@i,f
  7330  0BA9                     l3774:
  7331  0BA9  300A               	movlw	10
  7332  0BAA  0220               	subwf	getRegister@i,w
  7333  0BAB  1C03               	skipc
  7334  0BAC  2BAE               	goto	u2511
  7335  0BAD  2BAF               	goto	u2510
  7336  0BAE                     u2511:
  7337  0BAE  2B87               	goto	l3766
  7338  0BAF                     u2510:
  7339  0BAF                     l3776:
  7340                           
  7341                           ;Comm.c: 175:     return 0;
  7342  0BAF  3000               	movlw	0
  7343  0BB0                     l797:
  7344  0BB0  0008               	return
  7345  0BB1                     __end_of_getRegister:
  7346                           
  7347                           	psect	text32
  7348  0940                     __ptext32:	
  7349 ;; *************** function _creatErrorFrame *****************
  7350 ;; Defined at:
  7351 ;;		line 115 in file "Comm.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  1    wreg      void 
  7358 ;; Registers used:
  7359 ;;		wreg
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;Total ram usage:        1 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    6
  7372 ;; This function calls:
  7373 ;;		Nothing
  7374 ;; This function is called by:
  7375 ;;		_commandHandler
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _creatErrorFrame
  7381  0940                     _creatErrorFrame:
  7382  0940                     l3746:	
  7383                           ;incstack = 0
  7384                           ; Regs used in _creatErrorFrame: [wreg]
  7385                           
  7386                           
  7387                           ;Comm.c: 116:     outFrame.fields.header = inputFrame.fields.header;
  7388  0940  0021               	movlb	1	; select bank1
  7389  0941  0868               	movf	_inputFrame^(0+128),w
  7390  0942  00F0               	movwf	??_creatErrorFrame
  7391  0943  0870               	movf	??_creatErrorFrame,w
  7392  0944  00E3               	movwf	_outFrame^(0+128)
  7393                           
  7394                           ;Comm.c: 117:     outFrame.fields.reg = 100;
  7395  0945  3064               	movlw	100
  7396  0946  00F0               	movwf	??_creatErrorFrame
  7397  0947  0870               	movf	??_creatErrorFrame,w
  7398  0948  00E4               	movwf	(_outFrame^(0+128)+1)
  7399                           
  7400                           ;Comm.c: 118:     outFrame.fields.value = instance.errorCode;
  7401  0949  0020               	movlb	0	; select bank0
  7402  094A  086A               	movf	_instance@Comm$F3017+7,w
  7403  094B  0021               	movlb	1	; select bank1
  7404  094C  00E6               	movwf	((_outFrame+1)^(0+128)+2)
  7405  094D  0020               	movlb	0	; select bank0
  7406  094E  0869               	movf	_instance@Comm$F3017+6,w
  7407  094F  0021               	movlb	1	; select bank1
  7408  0950  00E5               	movwf	(_outFrame^(0+128)+2)
  7409  0951                     l767:
  7410  0951  0008               	return
  7411  0952                     __end_of_creatErrorFrame:
  7412                           
  7413                           	psect	text33
  7414  0272                     __ptext33:	
  7415 ;; *************** function _tasks *****************
  7416 ;; Defined at:
  7417 ;;		line 98 in file "DCMotor.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  this            1   14[BANK0 ] PTR struct DCMOTOR
  7420 ;;		 -> motor2(32), motor1(32), 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;		None
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7432 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;Total ram usage:        9 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    8
  7439 ;; This function calls:
  7440 ;;		Absolute function
  7441 ;;		_EPWM1_LoadDutyValue
  7442 ;;		_PWM3_LoadDutyValue
  7443 ;;		_getHWSpeed
  7444 ;;		_motor1SetDir
  7445 ;;		_motor2SetDir
  7446 ;; This function is called by:
  7447 ;;		_NewDCMotor
  7448 ;;		_appTasks
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           
  7453                           ;psect for function _tasks
  7454  0272                     _tasks:
  7455  0272                     l4160:	
  7456                           ;incstack = 0
  7457                           ; Regs used in _tasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7458                           
  7459                           
  7460                           ;DCMotor.c: 99:     switch (this->state) {
  7461  0272  2B8A               	goto	l4194
  7462  0273                     l4162:
  7463                           
  7464                           ;DCMotor.c: 101:             if (!this->running) {
  7465  0273  082E               	movf	tasks@this,w
  7466  0274  3E17               	addlw	23
  7467  0275  0086               	movwf	6
  7468  0276  3001               	movlw	1	; select bank2/3
  7469  0277  0087               	movwf	7
  7470  0278  0801               	movf	1,w
  7471  0279  1D03               	btfss	3,2
  7472  027A  2A7C               	goto	u3021
  7473  027B  2A7D               	goto	u3020
  7474  027C                     u3021:
  7475  027C  2A94               	goto	l4168
  7476  027D                     u3020:
  7477  027D                     l4164:
  7478                           
  7479                           ;DCMotor.c: 102:                 this->hwSetSpeed(500);
  7480  027D  30F4               	movlw	244
  7481  027E  00AC               	movwf	EPWM1_LoadDutyValue@dutyValue
  7482  027F  3001               	movlw	1
  7483  0280  00AD               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  7484  0281  082E               	movf	tasks@this,w
  7485  0282  3E14               	addlw	20
  7486  0283  0086               	movwf	6
  7487  0284  3001               	movlw	1	; select bank2/3
  7488  0285  0087               	movwf	7
  7489  0286  3F41               	moviw [1]fsr1
  7490  0287  008A               	movwf	10
  7491  0288  3F40               	moviw [0]fsr1
  7492  0289  000A               	callw
  7493  028A  3182               	pagesel	$
  7494  028B                     l4166:
  7495                           
  7496                           ;DCMotor.c: 103:                 this->state = MOTOR_OFF;
  7497  028B  0020               	movlb	0	; select bank0
  7498  028C  082E               	movf	tasks@this,w
  7499  028D  3E18               	addlw	24
  7500  028E  0086               	movwf	6
  7501  028F  3001               	movlw	1	; select bank2/3
  7502  0290  0087               	movwf	7
  7503  0291  0181               	clrf	1
  7504  0292  0A81               	incf	1,f
  7505                           
  7506                           ;DCMotor.c: 104:             } else if (this->changed) {
  7507  0293  2BA6               	goto	l536
  7508  0294                     l4168:
  7509  0294  082E               	movf	tasks@this,w
  7510  0295  3E1F               	addlw	31
  7511  0296  0086               	movwf	6
  7512  0297  3001               	movlw	1	; select bank2/3
  7513  0298  0087               	movwf	7
  7514  0299  0801               	movf	1,w
  7515  029A  1903               	btfsc	3,2
  7516  029B  2A9D               	goto	u3031
  7517  029C  2A9E               	goto	u3030
  7518  029D                     u3031:
  7519  029D  2BA6               	goto	l536
  7520  029E                     u3030:
  7521  029E                     l4170:
  7522                           
  7523                           ;DCMotor.c: 105:                 this->changed = 0;
  7524  029E  082E               	movf	tasks@this,w
  7525  029F  3E1F               	addlw	31
  7526  02A0  0086               	movwf	6
  7527  02A1  3001               	movlw	1	; select bank2/3
  7528  02A2  0087               	movwf	7
  7529  02A3  0181               	clrf	1
  7530  02A4                     l4172:
  7531                           
  7532                           ;DCMotor.c: 106:                 this->hwSetSpeed(getHWSpeed(this->speed));
  7533  02A4  082E               	movf	tasks@this,w
  7534  02A5  3E19               	addlw	25
  7535  02A6  0086               	movwf	6
  7536  02A7  3001               	movlw	1	; select bank2/3
  7537  02A8  0087               	movwf	7
  7538  02A9  3F40               	moviw [0]fsr1
  7539  02AA  00A6               	movwf	getHWSpeed@speed_X10
  7540  02AB  3F41               	moviw [1]fsr1
  7541  02AC  00A7               	movwf	getHWSpeed@speed_X10+1
  7542  02AD  318E  269C  3182   	fcall	_getHWSpeed
  7543  02B0  0020               	movlb	0	; select bank0
  7544  02B1  0827               	movf	?_getHWSpeed+1,w
  7545  02B2  00AD               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  7546  02B3  0826               	movf	?_getHWSpeed,w
  7547  02B4  00AC               	movwf	EPWM1_LoadDutyValue@dutyValue
  7548  02B5  082E               	movf	tasks@this,w
  7549  02B6  3E14               	addlw	20
  7550  02B7  0086               	movwf	6
  7551  02B8  3001               	movlw	1	; select bank2/3
  7552  02B9  0087               	movwf	7
  7553  02BA  3F41               	moviw [1]fsr1
  7554  02BB  008A               	movwf	10
  7555  02BC  3F40               	moviw [0]fsr1
  7556  02BD  000A               	callw
  7557  02BE  3182               	pagesel	$
  7558  02BF  2BA6               	goto	l536
  7559  02C0                     l4174:
  7560                           
  7561                           ;DCMotor.c: 110:             if (this->running) {
  7562  02C0  082E               	movf	tasks@this,w
  7563  02C1  3E17               	addlw	23
  7564  02C2  0086               	movwf	6
  7565  02C3  3001               	movlw	1	; select bank2/3
  7566  02C4  0087               	movwf	7
  7567  02C5  0801               	movf	1,w
  7568  02C6  1903               	btfsc	3,2
  7569  02C7  2AC9               	goto	u3041
  7570  02C8  2ACA               	goto	u3040
  7571  02C9                     u3041:
  7572  02C9  2BA6               	goto	l536
  7573  02CA                     u3040:
  7574  02CA                     l4176:
  7575                           
  7576                           ;DCMotor.c: 111:                 this->hwSetSpeed(getHWSpeed(this->speed));
  7577  02CA  082E               	movf	tasks@this,w
  7578  02CB  3E19               	addlw	25
  7579  02CC  0086               	movwf	6
  7580  02CD  3001               	movlw	1	; select bank2/3
  7581  02CE  0087               	movwf	7
  7582  02CF  3F40               	moviw [0]fsr1
  7583  02D0  00A6               	movwf	getHWSpeed@speed_X10
  7584  02D1  3F41               	moviw [1]fsr1
  7585  02D2  00A7               	movwf	getHWSpeed@speed_X10+1
  7586  02D3  318E  269C  3182   	fcall	_getHWSpeed
  7587  02D6  0020               	movlb	0	; select bank0
  7588  02D7  0827               	movf	?_getHWSpeed+1,w
  7589  02D8  00AD               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  7590  02D9  0826               	movf	?_getHWSpeed,w
  7591  02DA  00AC               	movwf	EPWM1_LoadDutyValue@dutyValue
  7592  02DB  082E               	movf	tasks@this,w
  7593  02DC  3E14               	addlw	20
  7594  02DD  0086               	movwf	6
  7595  02DE  3001               	movlw	1	; select bank2/3
  7596  02DF  0087               	movwf	7
  7597  02E0  3F41               	moviw [1]fsr1
  7598  02E1  008A               	movwf	10
  7599  02E2  3F40               	moviw [0]fsr1
  7600  02E3  000A               	callw
  7601  02E4  3182               	pagesel	$
  7602  02E5                     l4178:
  7603                           
  7604                           ;DCMotor.c: 112:                 this->state = MOTOR_RUNNING;
  7605  02E5  0020               	movlb	0	; select bank0
  7606  02E6  082E               	movf	tasks@this,w
  7607  02E7  3E18               	addlw	24
  7608  02E8  0086               	movwf	6
  7609  02E9  3001               	movlw	1	; select bank2/3
  7610  02EA  0087               	movwf	7
  7611  02EB  0181               	clrf	1
  7612  02EC  2BA6               	goto	l536
  7613  02ED                     l4180:
  7614                           
  7615                           ;DCMotor.c: 116:             if ((*timeBase - this->timer) > 2) {
  7616  02ED  082E               	movf	tasks@this,w
  7617  02EE  3E1B               	addlw	27
  7618  02EF  0086               	movwf	6
  7619  02F0  3001               	movlw	1	; select bank2/3
  7620  02F1  0087               	movwf	7
  7621  02F2  3F40               	moviw [0]fsr1
  7622  02F3  00AF               	movwf	??_tasks
  7623  02F4  3F41               	moviw [1]fsr1
  7624  02F5  00B0               	movwf	??_tasks+1
  7625  02F6  3F42               	moviw [2]fsr1
  7626  02F7  00B1               	movwf	??_tasks+2
  7627  02F8  3F43               	moviw [3]fsr1
  7628  02F9  00B2               	movwf	??_tasks+3
  7629  02FA  086F               	movf	_timeBase,w
  7630  02FB  0086               	movwf	6
  7631  02FC  3001               	movlw	1	; select bank2/3
  7632  02FD  0087               	movwf	7
  7633  02FE  3F40               	moviw [0]fsr1
  7634  02FF  00B3               	movwf	??_tasks+4
  7635  0300  3F41               	moviw [1]fsr1
  7636  0301  00B4               	movwf	??_tasks+5
  7637  0302  3F42               	moviw [2]fsr1
  7638  0303  00B5               	movwf	??_tasks+6
  7639  0304  3F43               	moviw [3]fsr1
  7640  0305  00B6               	movwf	??_tasks+7
  7641  0306  082F               	movf	??_tasks,w
  7642  0307  02B3               	subwf	??_tasks+4,f
  7643  0308  0830               	movf	??_tasks+1,w
  7644  0309  3BB4               	subwfb	??_tasks+5,f
  7645  030A  0831               	movf	??_tasks+2,w
  7646  030B  3BB5               	subwfb	??_tasks+6,f
  7647  030C  0832               	movf	??_tasks+3,w
  7648  030D  3BB6               	subwfb	??_tasks+7,f
  7649  030E  0836               	movf	??_tasks+7,w
  7650  030F  1D03               	btfss	3,2
  7651  0310  2B1D               	goto	u3050
  7652  0311  0835               	movf	??_tasks+6,w
  7653  0312  1D03               	btfss	3,2
  7654  0313  2B1D               	goto	u3050
  7655  0314  0834               	movf	??_tasks+5,w
  7656  0315  1D03               	btfss	3,2
  7657  0316  2B1D               	goto	u3050
  7658  0317  3003               	movlw	3
  7659  0318  0233               	subwf	??_tasks+4,w
  7660  0319  1C03               	btfss	3,0
  7661  031A  2B1C               	goto	u3051
  7662  031B  2B1D               	goto	u3050
  7663  031C                     u3051:
  7664  031C  2BA6               	goto	l536
  7665  031D                     u3050:
  7666  031D                     l4182:
  7667                           
  7668                           ;DCMotor.c: 117:                 this->hwSetDir(this->dir);
  7669  031D  082E               	movf	tasks@this,w
  7670  031E  0086               	movwf	6
  7671  031F  3001               	movlw	1	; select bank2/3
  7672  0320  0087               	movwf	7
  7673  0321  3001               	movlw	1	; select bank2/3
  7674  0322  3F56               	moviw [22]fsr1
  7675  0323  00F0               	movwf	motor2SetDir@dir
  7676  0324  082E               	movf	tasks@this,w
  7677  0325  3E12               	addlw	18
  7678  0326  0086               	movwf	6
  7679  0327  3001               	movlw	1	; select bank2/3
  7680  0328  0087               	movwf	7
  7681  0329  3F41               	moviw [1]fsr1
  7682  032A  008A               	movwf	10
  7683  032B  3F40               	moviw [0]fsr1
  7684  032C  000A               	callw
  7685  032D  3182               	pagesel	$
  7686  032E                     l4184:
  7687                           
  7688                           ;DCMotor.c: 118:                 this->timer = *timeBase;
  7689  032E  0020               	movlb	0	; select bank0
  7690  032F  086F               	movf	_timeBase,w
  7691  0330  0086               	movwf	6
  7692  0331  3001               	movlw	1	; select bank2/3
  7693  0332  0087               	movwf	7
  7694  0333  3F40               	moviw [0]fsr1
  7695  0334  00AF               	movwf	??_tasks
  7696  0335  3F41               	moviw [1]fsr1
  7697  0336  00B0               	movwf	??_tasks+1
  7698  0337  3F42               	moviw [2]fsr1
  7699  0338  00B1               	movwf	??_tasks+2
  7700  0339  3F43               	moviw [3]fsr1
  7701  033A  00B2               	movwf	??_tasks+3
  7702  033B  082E               	movf	tasks@this,w
  7703  033C  3E1B               	addlw	27
  7704  033D  0086               	movwf	6
  7705  033E  3001               	movlw	1	; select bank2/3
  7706  033F  0087               	movwf	7
  7707  0340  082F               	movf	??_tasks,w
  7708  0341  3FC0               	movwi [0]fsr1
  7709  0342  0830               	movf	??_tasks+1,w
  7710  0343  3FC1               	movwi [1]fsr1
  7711  0344  0831               	movf	??_tasks+2,w
  7712  0345  3FC2               	movwi [2]fsr1
  7713  0346  0832               	movf	??_tasks+3,w
  7714  0347  3FC3               	movwi [3]fsr1
  7715  0348                     l4186:
  7716                           
  7717                           ;DCMotor.c: 119:                 this->state = MOTOR_WAITING_CHANGE_DIR;
  7718  0348  3003               	movlw	3
  7719  0349  00AF               	movwf	??_tasks
  7720  034A  082E               	movf	tasks@this,w
  7721  034B  3E18               	addlw	24
  7722  034C  0086               	movwf	6
  7723  034D  3001               	movlw	1	; select bank2/3
  7724  034E  0087               	movwf	7
  7725  034F  082F               	movf	??_tasks,w
  7726  0350  0081               	movwf	1
  7727  0351  2BA6               	goto	l536
  7728  0352                     l4188:
  7729                           
  7730                           ;DCMotor.c: 123:             if ((*timeBase - this->timer) > 2)
  7731  0352  082E               	movf	tasks@this,w
  7732  0353  3E1B               	addlw	27
  7733  0354  0086               	movwf	6
  7734  0355  3001               	movlw	1	; select bank2/3
  7735  0356  0087               	movwf	7
  7736  0357  3F40               	moviw [0]fsr1
  7737  0358  00AF               	movwf	??_tasks
  7738  0359  3F41               	moviw [1]fsr1
  7739  035A  00B0               	movwf	??_tasks+1
  7740  035B  3F42               	moviw [2]fsr1
  7741  035C  00B1               	movwf	??_tasks+2
  7742  035D  3F43               	moviw [3]fsr1
  7743  035E  00B2               	movwf	??_tasks+3
  7744  035F  086F               	movf	_timeBase,w
  7745  0360  0086               	movwf	6
  7746  0361  3001               	movlw	1	; select bank2/3
  7747  0362  0087               	movwf	7
  7748  0363  3F40               	moviw [0]fsr1
  7749  0364  00B3               	movwf	??_tasks+4
  7750  0365  3F41               	moviw [1]fsr1
  7751  0366  00B4               	movwf	??_tasks+5
  7752  0367  3F42               	moviw [2]fsr1
  7753  0368  00B5               	movwf	??_tasks+6
  7754  0369  3F43               	moviw [3]fsr1
  7755  036A  00B6               	movwf	??_tasks+7
  7756  036B  082F               	movf	??_tasks,w
  7757  036C  02B3               	subwf	??_tasks+4,f
  7758  036D  0830               	movf	??_tasks+1,w
  7759  036E  3BB4               	subwfb	??_tasks+5,f
  7760  036F  0831               	movf	??_tasks+2,w
  7761  0370  3BB5               	subwfb	??_tasks+6,f
  7762  0371  0832               	movf	??_tasks+3,w
  7763  0372  3BB6               	subwfb	??_tasks+7,f
  7764  0373  0836               	movf	??_tasks+7,w
  7765  0374  1D03               	btfss	3,2
  7766  0375  2B82               	goto	u3060
  7767  0376  0835               	movf	??_tasks+6,w
  7768  0377  1D03               	btfss	3,2
  7769  0378  2B82               	goto	u3060
  7770  0379  0834               	movf	??_tasks+5,w
  7771  037A  1D03               	btfss	3,2
  7772  037B  2B82               	goto	u3060
  7773  037C  3003               	movlw	3
  7774  037D  0233               	subwf	??_tasks+4,w
  7775  037E  1C03               	btfss	3,0
  7776  037F  2B81               	goto	u3061
  7777  0380  2B82               	goto	u3060
  7778  0381                     u3061:
  7779  0381  2BA6               	goto	l536
  7780  0382                     u3060:
  7781  0382                     l4190:
  7782                           
  7783                           ;DCMotor.c: 124:                 this->state = MOTOR_OFF;
  7784  0382  082E               	movf	tasks@this,w
  7785  0383  3E18               	addlw	24
  7786  0384  0086               	movwf	6
  7787  0385  3001               	movlw	1	; select bank2/3
  7788  0386  0087               	movwf	7
  7789  0387  0181               	clrf	1
  7790  0388  0A81               	incf	1,f
  7791  0389  2BA6               	goto	l536
  7792  038A                     l4194:
  7793  038A  0020               	movlb	0	; select bank0
  7794  038B  082E               	movf	tasks@this,w
  7795  038C  3E18               	addlw	24
  7796  038D  0086               	movwf	6
  7797  038E  3001               	movlw	1	; select bank2/3
  7798  038F  0087               	movwf	7
  7799  0390  0801               	movf	1,w
  7800  0391  00AF               	movwf	??_tasks
  7801  0392  01B0               	clrf	??_tasks+1
  7802                           
  7803                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7804                           ; Switch size 1, requested type "simple"
  7805                           ; Number of cases is 1, Range of values is 0 to 0
  7806                           ; switch strategies available:
  7807                           ; Name         Instructions Cycles
  7808                           ; simple_byte            4     3 (average)
  7809                           ; direct_byte            8     6 (fixed)
  7810                           ; jumptable            260     6 (fixed)
  7811                           ;	Chosen strategy is simple_byte
  7812  0393  0830               	movf	??_tasks+1,w
  7813  0394  3A00               	xorlw	0	; case 0
  7814  0395  1903               	skipnz
  7815  0396  2B98               	goto	l4462
  7816  0397  2BA6               	goto	l536
  7817  0398                     l4462:
  7818                           
  7819                           ; Switch size 1, requested type "simple"
  7820                           ; Number of cases is 4, Range of values is 0 to 3
  7821                           ; switch strategies available:
  7822                           ; Name         Instructions Cycles
  7823                           ; simple_byte           13     7 (average)
  7824                           ; direct_byte           14     6 (fixed)
  7825                           ; jumptable            260     6 (fixed)
  7826                           ;	Chosen strategy is simple_byte
  7827  0398  082F               	movf	??_tasks,w
  7828  0399  3A00               	xorlw	0	; case 0
  7829  039A  1903               	skipnz
  7830  039B  2A73               	goto	l4162
  7831  039C  3A01               	xorlw	1	; case 1
  7832  039D  1903               	skipnz
  7833  039E  2AC0               	goto	l4174
  7834  039F  3A03               	xorlw	3	; case 2
  7835  03A0  1903               	skipnz
  7836  03A1  2AED               	goto	l4180
  7837  03A2  3A01               	xorlw	1	; case 3
  7838  03A3  1903               	skipnz
  7839  03A4  2B52               	goto	l4188
  7840  03A5  2BA6               	goto	l536
  7841  03A6                     l536:
  7842  03A6  0008               	return
  7843  03A7                     __end_of_tasks:
  7844                           
  7845                           	psect	text34
  7846  084C                     __ptext34:	
  7847 ;; *************** function _motor1SetDir *****************
  7848 ;; Defined at:
  7849 ;;		line 40 in file "app.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  dir             1    0[COMMON] _Bool 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  1    wreg      void 
  7856 ;; Registers used:
  7857 ;;		wreg, status,2, status,0
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7863 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;Total ram usage:        1 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:    6
  7870 ;; This function calls:
  7871 ;;		Nothing
  7872 ;; This function is called by:
  7873 ;;		_appTasks
  7874 ;;		_tasks
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           
  7879                           ;psect for function _motor1SetDir
  7880  084C                     _motor1SetDir:
  7881  084C                     l3838:	
  7882                           ;incstack = 0
  7883                           ; Regs used in _motor1SetDir: [wreg+status,2+status,0]
  7884                           
  7885                           
  7886                           ;app.c: 41:     if (dir)
  7887  084C  0870               	movf	motor1SetDir@dir,w
  7888  084D  1903               	btfsc	3,2
  7889  084E  2850               	goto	u2661
  7890  084F  2851               	goto	u2660
  7891  0850                     u2661:
  7892  0850  2854               	goto	l421
  7893  0851                     u2660:
  7894  0851                     l418:	
  7895                           ;app.c: 42:         do { LATCbits.LATC5 = 1; } while(0);
  7896                           
  7897  0851  0022               	movlb	2	; select bank2
  7898  0852  168E               	bsf	14,5	;volatile
  7899  0853  2856               	goto	l423
  7900  0854                     l421:	
  7901                           ;app.c: 44:         do { LATCbits.LATC5 = 0; } while(0);
  7902                           
  7903  0854  0022               	movlb	2	; select bank2
  7904  0855  128E               	bcf	14,5	;volatile
  7905  0856                     l423:
  7906  0856  0008               	return
  7907  0857                     __end_of_motor1SetDir:
  7908                           
  7909                           	psect	text35
  7910  0841                     __ptext35:	
  7911 ;; *************** function _motor2SetDir *****************
  7912 ;; Defined at:
  7913 ;;		line 47 in file "app.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  dir             1    0[COMMON] _Bool 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7927 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;Total ram usage:        1 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    6
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_appTasks
  7938 ;;		_tasks
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           
  7943                           ;psect for function _motor2SetDir
  7944  0841                     _motor2SetDir:
  7945  0841                     l3840:	
  7946                           ;incstack = 0
  7947                           ; Regs used in _motor2SetDir: [wreg+status,2+status,0]
  7948                           
  7949                           
  7950                           ;app.c: 48:     if (dir)
  7951  0841  0870               	movf	motor2SetDir@dir,w
  7952  0842  1903               	btfsc	3,2
  7953  0843  2845               	goto	u2671
  7954  0844  2846               	goto	u2670
  7955  0845                     u2671:
  7956  0845  2849               	goto	l430
  7957  0846                     u2670:
  7958  0846                     l427:	
  7959                           ;app.c: 49:         do { LATAbits.LATA0 = 1; } while(0);
  7960                           
  7961  0846  0022               	movlb	2	; select bank2
  7962  0847  140C               	bsf	12,0	;volatile
  7963  0848  284B               	goto	l432
  7964  0849                     l430:	
  7965                           ;app.c: 51:         do { LATAbits.LATA0 = 0; } while(0);
  7966                           
  7967  0849  0022               	movlb	2	; select bank2
  7968  084A  100C               	bcf	12,0	;volatile
  7969  084B                     l432:
  7970  084B  0008               	return
  7971  084C                     __end_of_motor2SetDir:
  7972                           
  7973                           	psect	text36
  7974  0E9C                     __ptext36:	
  7975 ;; *************** function _getHWSpeed *****************
  7976 ;; Defined at:
  7977 ;;		line 129 in file "DCMotor.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  speed_X10       2    6[BANK0 ] unsigned short 
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  sp              4    8[BANK0 ] long 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  2    6[BANK0 ] unsigned short 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0, pclath, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7991 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;Total ram usage:        6 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    7
  7998 ;; This function calls:
  7999 ;;		___aldiv
  8000 ;;		___lmul
  8001 ;; This function is called by:
  8002 ;;		_tasks
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _getHWSpeed
  8008  0E9C                     _getHWSpeed:
  8009  0E9C                     l3842:	
  8010                           ;incstack = 0
  8011                           ; Regs used in _getHWSpeed: [wreg+status,2+status,0+pclath+cstack]
  8012                           
  8013                           
  8014                           ;DCMotor.c: 130:     if (speed_X10 > 950)
  8015  0E9C  3003               	movlw	3
  8016  0E9D  0020               	movlb	0	; select bank0
  8017  0E9E  0227               	subwf	getHWSpeed@speed_X10+1,w
  8018  0E9F  30B7               	movlw	183
  8019  0EA0  1903               	skipnz
  8020  0EA1  0226               	subwf	getHWSpeed@speed_X10,w
  8021  0EA2  1C03               	skipc
  8022  0EA3  2EA5               	goto	u2681
  8023  0EA4  2EA6               	goto	u2680
  8024  0EA5                     u2681:
  8025  0EA5  2EA9               	goto	l3850
  8026  0EA6                     u2680:
  8027  0EA6                     l3844:
  8028                           
  8029                           ;DCMotor.c: 131:         return 0;
  8030  0EA6  01A6               	clrf	?_getHWSpeed
  8031  0EA7  01A7               	clrf	?_getHWSpeed+1
  8032  0EA8  2F04               	goto	l540
  8033  0EA9                     l3850:
  8034  0EA9  3000               	movlw	0
  8035  0EAA  0227               	subwf	getHWSpeed@speed_X10+1,w
  8036  0EAB  30C8               	movlw	200
  8037  0EAC  1903               	skipnz
  8038  0EAD  0226               	subwf	getHWSpeed@speed_X10,w
  8039  0EAE  1803               	skipnc
  8040  0EAF  2EB1               	goto	u2691
  8041  0EB0  2EB2               	goto	u2690
  8042  0EB1                     u2691:
  8043  0EB1  2EB7               	goto	l3858
  8044  0EB2                     u2690:
  8045  0EB2                     l3852:
  8046                           
  8047                           ;DCMotor.c: 133:         return 500;
  8048  0EB2  30F4               	movlw	244
  8049  0EB3  00A6               	movwf	?_getHWSpeed
  8050  0EB4  3001               	movlw	1
  8051  0EB5  00A7               	movwf	?_getHWSpeed+1
  8052  0EB6  2F04               	goto	l540
  8053  0EB7                     l3858:
  8054                           
  8055                           ;DCMotor.c: 135:         int32_t sp;;DCMotor.c: 136:         sp = (0 - 500);
  8056  0EB7  30FF               	movlw	255
  8057  0EB8  00AB               	movwf	getHWSpeed@sp+3
  8058  0EB9  30FF               	movlw	255
  8059  0EBA  00AA               	movwf	getHWSpeed@sp+2
  8060  0EBB  30FE               	movlw	254
  8061  0EBC  00A9               	movwf	getHWSpeed@sp+1
  8062  0EBD  300C               	movlw	12
  8063  0EBE  00A8               	movwf	getHWSpeed@sp
  8064  0EBF                     l3860:
  8065                           
  8066                           ;DCMotor.c: 137:         sp *= (int16_t) speed_X10;
  8067  0EBF  0826               	movf	getHWSpeed@speed_X10,w
  8068  0EC0  00F0               	movwf	___lmul@multiplier
  8069  0EC1  0827               	movf	getHWSpeed@speed_X10+1,w
  8070  0EC2  00F1               	movwf	___lmul@multiplier+1
  8071  0EC3  0D89               	rlf	9,f
  8072  0EC4  3B89               	subwfb	9,f
  8073  0EC5  0989               	comf	9,f
  8074  0EC6  00F2               	movwf	___lmul@multiplier+2
  8075  0EC7  00F3               	movwf	___lmul@multiplier+3
  8076  0EC8  082B               	movf	getHWSpeed@sp+3,w
  8077  0EC9  00F7               	movwf	___lmul@multiplicand+3
  8078  0ECA  082A               	movf	getHWSpeed@sp+2,w
  8079  0ECB  00F6               	movwf	___lmul@multiplicand+2
  8080  0ECC  0829               	movf	getHWSpeed@sp+1,w
  8081  0ECD  00F5               	movwf	___lmul@multiplicand+1
  8082  0ECE  0828               	movf	getHWSpeed@sp,w
  8083  0ECF  00F4               	movwf	___lmul@multiplicand
  8084  0ED0  318B  23B1  318E   	fcall	___lmul
  8085  0ED3  0873               	movf	?___lmul+3,w
  8086  0ED4  0020               	movlb	0	; select bank0
  8087  0ED5  00AB               	movwf	getHWSpeed@sp+3
  8088  0ED6  0872               	movf	?___lmul+2,w
  8089  0ED7  00AA               	movwf	getHWSpeed@sp+2
  8090  0ED8  0871               	movf	?___lmul+1,w
  8091  0ED9  00A9               	movwf	getHWSpeed@sp+1
  8092  0EDA  0870               	movf	?___lmul,w
  8093  0EDB  00A8               	movwf	getHWSpeed@sp
  8094  0EDC                     l3862:
  8095                           
  8096                           ;DCMotor.c: 138:         sp = sp / 1000;
  8097  0EDC  3000               	movlw	0
  8098  0EDD  00F3               	movwf	___aldiv@divisor+3
  8099  0EDE  3000               	movlw	0
  8100  0EDF  00F2               	movwf	___aldiv@divisor+2
  8101  0EE0  3003               	movlw	3
  8102  0EE1  00F1               	movwf	___aldiv@divisor+1
  8103  0EE2  30E8               	movlw	232
  8104  0EE3  00F0               	movwf	___aldiv@divisor
  8105  0EE4  082B               	movf	getHWSpeed@sp+3,w
  8106  0EE5  00F7               	movwf	___aldiv@dividend+3
  8107  0EE6  082A               	movf	getHWSpeed@sp+2,w
  8108  0EE7  00F6               	movwf	___aldiv@dividend+2
  8109  0EE8  0829               	movf	getHWSpeed@sp+1,w
  8110  0EE9  00F5               	movwf	___aldiv@dividend+1
  8111  0EEA  0828               	movf	getHWSpeed@sp,w
  8112  0EEB  00F4               	movwf	___aldiv@dividend
  8113  0EEC  318F  2770  318E   	fcall	___aldiv
  8114  0EEF  0873               	movf	?___aldiv+3,w
  8115  0EF0  0020               	movlb	0	; select bank0
  8116  0EF1  00AB               	movwf	getHWSpeed@sp+3
  8117  0EF2  0872               	movf	?___aldiv+2,w
  8118  0EF3  00AA               	movwf	getHWSpeed@sp+2
  8119  0EF4  0871               	movf	?___aldiv+1,w
  8120  0EF5  00A9               	movwf	getHWSpeed@sp+1
  8121  0EF6  0870               	movf	?___aldiv,w
  8122  0EF7  00A8               	movwf	getHWSpeed@sp
  8123                           
  8124                           ;DCMotor.c: 139:         sp += 500;
  8125  0EF8  30F4               	movlw	244
  8126  0EF9  07A8               	addwf	getHWSpeed@sp,f
  8127  0EFA  3001               	movlw	1
  8128  0EFB  3DA9               	addwfc	getHWSpeed@sp+1,f
  8129  0EFC  3000               	movlw	0
  8130  0EFD  3DAA               	addwfc	getHWSpeed@sp+2,f
  8131  0EFE  3000               	movlw	0
  8132  0EFF  3DAB               	addwfc	getHWSpeed@sp+3,f
  8133                           
  8134                           ;DCMotor.c: 140:         return (uint16_t) sp;
  8135  0F00  0829               	movf	getHWSpeed@sp+1,w
  8136  0F01  00A7               	movwf	?_getHWSpeed+1
  8137  0F02  0828               	movf	getHWSpeed@sp,w
  8138  0F03  00A6               	movwf	?_getHWSpeed
  8139  0F04                     l540:
  8140  0F04  0008               	return
  8141  0F05                     __end_of_getHWSpeed:
  8142                           
  8143                           	psect	text37
  8144  0BB1                     __ptext37:	
  8145 ;; *************** function ___lmul *****************
  8146 ;; Defined at:
  8147 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  multiplier      4    0[COMMON] unsigned long 
  8150 ;;  multiplicand    4    4[COMMON] unsigned long 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  product         4    8[COMMON] unsigned long 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  4    0[COMMON] unsigned long 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:       12 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    6
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		_getHWSpeed
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function ___lmul
  8178  0BB1                     ___lmul:
  8179  0BB1                     l3780:	
  8180                           ;incstack = 0
  8181                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8182                           
  8183  0BB1  3000               	movlw	0
  8184  0BB2  00FB               	movwf	___lmul@product+3
  8185  0BB3  3000               	movlw	0
  8186  0BB4  00FA               	movwf	___lmul@product+2
  8187  0BB5  3000               	movlw	0
  8188  0BB6  00F9               	movwf	___lmul@product+1
  8189  0BB7  3000               	movlw	0
  8190  0BB8  00F8               	movwf	___lmul@product
  8191  0BB9                     l3782:
  8192  0BB9  1C70               	btfss	___lmul@multiplier,0
  8193  0BBA  2BBC               	goto	u2521
  8194  0BBB  2BBD               	goto	u2520
  8195  0BBC                     u2521:
  8196  0BBC  2BC5               	goto	l3786
  8197  0BBD                     u2520:
  8198  0BBD                     l3784:
  8199  0BBD  0874               	movf	___lmul@multiplicand,w
  8200  0BBE  07F8               	addwf	___lmul@product,f
  8201  0BBF  0875               	movf	___lmul@multiplicand+1,w
  8202  0BC0  3DF9               	addwfc	___lmul@product+1,f
  8203  0BC1  0876               	movf	___lmul@multiplicand+2,w
  8204  0BC2  3DFA               	addwfc	___lmul@product+2,f
  8205  0BC3  0877               	movf	___lmul@multiplicand+3,w
  8206  0BC4  3DFB               	addwfc	___lmul@product+3,f
  8207  0BC5                     l3786:
  8208  0BC5  3001               	movlw	1
  8209  0BC6                     u2535:
  8210  0BC6  35F4               	lslf	___lmul@multiplicand,f
  8211  0BC7  0DF5               	rlf	___lmul@multiplicand+1,f
  8212  0BC8  0DF6               	rlf	___lmul@multiplicand+2,f
  8213  0BC9  0DF7               	rlf	___lmul@multiplicand+3,f
  8214  0BCA  0B89               	decfsz	9,f
  8215  0BCB  2BC6               	goto	u2535
  8216  0BCC                     l3788:
  8217  0BCC  3001               	movlw	1
  8218  0BCD                     u2545:
  8219  0BCD  36F3               	lsrf	___lmul@multiplier+3,f
  8220  0BCE  0CF2               	rrf	___lmul@multiplier+2,f
  8221  0BCF  0CF1               	rrf	___lmul@multiplier+1,f
  8222  0BD0  0CF0               	rrf	___lmul@multiplier,f
  8223  0BD1  0B89               	decfsz	9,f
  8224  0BD2  2BCD               	goto	u2545
  8225  0BD3  0873               	movf	___lmul@multiplier+3,w
  8226  0BD4  0472               	iorwf	___lmul@multiplier+2,w
  8227  0BD5  0471               	iorwf	___lmul@multiplier+1,w
  8228  0BD6  0470               	iorwf	___lmul@multiplier,w
  8229  0BD7  1D03               	skipz
  8230  0BD8  2BDA               	goto	u2551
  8231  0BD9  2BDB               	goto	u2550
  8232  0BDA                     u2551:
  8233  0BDA  2BB9               	goto	l3782
  8234  0BDB                     u2550:
  8235  0BDB                     l3790:
  8236  0BDB  087B               	movf	___lmul@product+3,w
  8237  0BDC  00F3               	movwf	?___lmul+3
  8238  0BDD  087A               	movf	___lmul@product+2,w
  8239  0BDE  00F2               	movwf	?___lmul+2
  8240  0BDF  0879               	movf	___lmul@product+1,w
  8241  0BE0  00F1               	movwf	?___lmul+1
  8242  0BE1  0878               	movf	___lmul@product,w
  8243  0BE2  00F0               	movwf	?___lmul
  8244  0BE3                     l1026:
  8245  0BE3  0008               	return
  8246  0BE4                     __end_of___lmul:
  8247                           
  8248                           	psect	text38
  8249  0F70                     __ptext38:	
  8250 ;; *************** function ___aldiv *****************
  8251 ;; Defined at:
  8252 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  divisor         4    0[COMMON] long 
  8255 ;;  dividend        4    4[COMMON] long 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  quotient        4    2[BANK0 ] long 
  8258 ;;  sign            1    1[BANK0 ] unsigned char 
  8259 ;;  counter         1    0[BANK0 ] unsigned char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  4    0[COMMON] long 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:       15 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    6
  8276 ;; This function calls:
  8277 ;;		Nothing
  8278 ;; This function is called by:
  8279 ;;		_getHWSpeed
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function ___aldiv
  8285  0F70                     ___aldiv:
  8286  0F70                     l3794:	
  8287                           ;incstack = 0
  8288                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  8289                           
  8290  0F70  0020               	movlb	0	; select bank0
  8291  0F71  01A1               	clrf	___aldiv@sign
  8292  0F72                     l3796:
  8293  0F72  1FF3               	btfss	___aldiv@divisor+3,7
  8294  0F73  2F75               	goto	u2561
  8295  0F74  2F76               	goto	u2560
  8296  0F75                     u2561:
  8297  0F75  2F83               	goto	l1077
  8298  0F76                     u2560:
  8299  0F76                     l3798:
  8300  0F76  09F0               	comf	___aldiv@divisor,f
  8301  0F77  09F1               	comf	___aldiv@divisor+1,f
  8302  0F78  09F2               	comf	___aldiv@divisor+2,f
  8303  0F79  09F3               	comf	___aldiv@divisor+3,f
  8304  0F7A  0AF0               	incf	___aldiv@divisor,f
  8305  0F7B  1903               	skipnz
  8306  0F7C  0AF1               	incf	___aldiv@divisor+1,f
  8307  0F7D  1903               	skipnz
  8308  0F7E  0AF2               	incf	___aldiv@divisor+2,f
  8309  0F7F  1903               	skipnz
  8310  0F80  0AF3               	incf	___aldiv@divisor+3,f
  8311  0F81  01A1               	clrf	___aldiv@sign
  8312  0F82  0AA1               	incf	___aldiv@sign,f
  8313  0F83                     l1077:
  8314  0F83  1FF7               	btfss	___aldiv@dividend+3,7
  8315  0F84  2F86               	goto	u2571
  8316  0F85  2F87               	goto	u2570
  8317  0F86                     u2571:
  8318  0F86  2F96               	goto	l3804
  8319  0F87                     u2570:
  8320  0F87                     l3800:
  8321  0F87  09F4               	comf	___aldiv@dividend,f
  8322  0F88  09F5               	comf	___aldiv@dividend+1,f
  8323  0F89  09F6               	comf	___aldiv@dividend+2,f
  8324  0F8A  09F7               	comf	___aldiv@dividend+3,f
  8325  0F8B  0AF4               	incf	___aldiv@dividend,f
  8326  0F8C  1903               	skipnz
  8327  0F8D  0AF5               	incf	___aldiv@dividend+1,f
  8328  0F8E  1903               	skipnz
  8329  0F8F  0AF6               	incf	___aldiv@dividend+2,f
  8330  0F90  1903               	skipnz
  8331  0F91  0AF7               	incf	___aldiv@dividend+3,f
  8332  0F92                     l3802:
  8333  0F92  3001               	movlw	1
  8334  0F93  00F8               	movwf	??___aldiv
  8335  0F94  0878               	movf	??___aldiv,w
  8336  0F95  06A1               	xorwf	___aldiv@sign,f
  8337  0F96                     l3804:
  8338  0F96  3000               	movlw	0
  8339  0F97  00A5               	movwf	___aldiv@quotient+3
  8340  0F98  3000               	movlw	0
  8341  0F99  00A4               	movwf	___aldiv@quotient+2
  8342  0F9A  3000               	movlw	0
  8343  0F9B  00A3               	movwf	___aldiv@quotient+1
  8344  0F9C  3000               	movlw	0
  8345  0F9D  00A2               	movwf	___aldiv@quotient
  8346  0F9E                     l3806:
  8347  0F9E  0873               	movf	___aldiv@divisor+3,w
  8348  0F9F  0472               	iorwf	___aldiv@divisor+2,w
  8349  0FA0  0471               	iorwf	___aldiv@divisor+1,w
  8350  0FA1  0470               	iorwf	___aldiv@divisor,w
  8351  0FA2  1903               	skipnz
  8352  0FA3  2FA5               	goto	u2581
  8353  0FA4  2FA6               	goto	u2580
  8354  0FA5                     u2581:
  8355  0FA5  2FE7               	goto	l3826
  8356  0FA6                     u2580:
  8357  0FA6                     l3808:
  8358  0FA6  01A0               	clrf	___aldiv@counter
  8359  0FA7  0AA0               	incf	___aldiv@counter,f
  8360  0FA8  2FB4               	goto	l3812
  8361  0FA9                     l3810:
  8362  0FA9  3001               	movlw	1
  8363  0FAA                     u2595:
  8364  0FAA  35F0               	lslf	___aldiv@divisor,f
  8365  0FAB  0DF1               	rlf	___aldiv@divisor+1,f
  8366  0FAC  0DF2               	rlf	___aldiv@divisor+2,f
  8367  0FAD  0DF3               	rlf	___aldiv@divisor+3,f
  8368  0FAE  0B89               	decfsz	9,f
  8369  0FAF  2FAA               	goto	u2595
  8370  0FB0  3001               	movlw	1
  8371  0FB1  00F8               	movwf	??___aldiv
  8372  0FB2  0878               	movf	??___aldiv,w
  8373  0FB3  07A0               	addwf	___aldiv@counter,f
  8374  0FB4                     l3812:
  8375  0FB4  1FF3               	btfss	___aldiv@divisor+3,7
  8376  0FB5  2FB7               	goto	u2601
  8377  0FB6  2FB8               	goto	u2600
  8378  0FB7                     u2601:
  8379  0FB7  2FA9               	goto	l3810
  8380  0FB8                     u2600:
  8381  0FB8                     l3814:
  8382  0FB8  3001               	movlw	1
  8383  0FB9                     u2615:
  8384  0FB9  35A2               	lslf	___aldiv@quotient,f
  8385  0FBA  0DA3               	rlf	___aldiv@quotient+1,f
  8386  0FBB  0DA4               	rlf	___aldiv@quotient+2,f
  8387  0FBC  0DA5               	rlf	___aldiv@quotient+3,f
  8388  0FBD  0B89               	decfsz	9,f
  8389  0FBE  2FB9               	goto	u2615
  8390  0FBF                     l3816:
  8391  0FBF  0873               	movf	___aldiv@divisor+3,w
  8392  0FC0  0277               	subwf	___aldiv@dividend+3,w
  8393  0FC1  1D03               	skipz
  8394  0FC2  2FCD               	goto	u2625
  8395  0FC3  0872               	movf	___aldiv@divisor+2,w
  8396  0FC4  0276               	subwf	___aldiv@dividend+2,w
  8397  0FC5  1D03               	skipz
  8398  0FC6  2FCD               	goto	u2625
  8399  0FC7  0871               	movf	___aldiv@divisor+1,w
  8400  0FC8  0275               	subwf	___aldiv@dividend+1,w
  8401  0FC9  1D03               	skipz
  8402  0FCA  2FCD               	goto	u2625
  8403  0FCB  0870               	movf	___aldiv@divisor,w
  8404  0FCC  0274               	subwf	___aldiv@dividend,w
  8405  0FCD                     u2625:
  8406  0FCD  1C03               	skipc
  8407  0FCE  2FD0               	goto	u2621
  8408  0FCF  2FD1               	goto	u2620
  8409  0FD0                     u2621:
  8410  0FD0  2FDA               	goto	l3822
  8411  0FD1                     u2620:
  8412  0FD1                     l3818:
  8413  0FD1  0870               	movf	___aldiv@divisor,w
  8414  0FD2  02F4               	subwf	___aldiv@dividend,f
  8415  0FD3  0871               	movf	___aldiv@divisor+1,w
  8416  0FD4  3BF5               	subwfb	___aldiv@dividend+1,f
  8417  0FD5  0872               	movf	___aldiv@divisor+2,w
  8418  0FD6  3BF6               	subwfb	___aldiv@dividend+2,f
  8419  0FD7  0873               	movf	___aldiv@divisor+3,w
  8420  0FD8  3BF7               	subwfb	___aldiv@dividend+3,f
  8421  0FD9                     l3820:
  8422  0FD9  1422               	bsf	___aldiv@quotient,0
  8423  0FDA                     l3822:
  8424  0FDA  3001               	movlw	1
  8425  0FDB                     u2635:
  8426  0FDB  36F3               	lsrf	___aldiv@divisor+3,f
  8427  0FDC  0CF2               	rrf	___aldiv@divisor+2,f
  8428  0FDD  0CF1               	rrf	___aldiv@divisor+1,f
  8429  0FDE  0CF0               	rrf	___aldiv@divisor,f
  8430  0FDF  0B89               	decfsz	9,f
  8431  0FE0  2FDB               	goto	u2635
  8432  0FE1                     l3824:
  8433  0FE1  3001               	movlw	1
  8434  0FE2  02A0               	subwf	___aldiv@counter,f
  8435  0FE3  1D03               	btfss	3,2
  8436  0FE4  2FE6               	goto	u2641
  8437  0FE5  2FE7               	goto	u2640
  8438  0FE6                     u2641:
  8439  0FE6  2FB8               	goto	l3814
  8440  0FE7                     u2640:
  8441  0FE7                     l3826:
  8442  0FE7  0821               	movf	___aldiv@sign,w
  8443  0FE8  1903               	btfsc	3,2
  8444  0FE9  2FEB               	goto	u2651
  8445  0FEA  2FEC               	goto	u2650
  8446  0FEB                     u2651:
  8447  0FEB  2FF7               	goto	l3830
  8448  0FEC                     u2650:
  8449  0FEC                     l3828:
  8450  0FEC  09A2               	comf	___aldiv@quotient,f
  8451  0FED  09A3               	comf	___aldiv@quotient+1,f
  8452  0FEE  09A4               	comf	___aldiv@quotient+2,f
  8453  0FEF  09A5               	comf	___aldiv@quotient+3,f
  8454  0FF0  0AA2               	incf	___aldiv@quotient,f
  8455  0FF1  1903               	skipnz
  8456  0FF2  0AA3               	incf	___aldiv@quotient+1,f
  8457  0FF3  1903               	skipnz
  8458  0FF4  0AA4               	incf	___aldiv@quotient+2,f
  8459  0FF5  1903               	skipnz
  8460  0FF6  0AA5               	incf	___aldiv@quotient+3,f
  8461  0FF7                     l3830:
  8462  0FF7  0825               	movf	___aldiv@quotient+3,w
  8463  0FF8  00F3               	movwf	?___aldiv+3
  8464  0FF9  0824               	movf	___aldiv@quotient+2,w
  8465  0FFA  00F2               	movwf	?___aldiv+2
  8466  0FFB  0823               	movf	___aldiv@quotient+1,w
  8467  0FFC  00F1               	movwf	?___aldiv+1
  8468  0FFD  0822               	movf	___aldiv@quotient,w
  8469  0FFE  00F0               	movwf	?___aldiv
  8470  0FFF                     l1087:
  8471  0FFF  0008               	return
  8472  1000                     __end_of___aldiv:
  8473                           
  8474                           	psect	text39
  8475  0A52                     __ptext39:	
  8476 ;; *************** function _EPWM1_LoadDutyValue *****************
  8477 ;; Defined at:
  8478 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  dutyValue       2   12[BANK0 ] unsigned short 
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;		None
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  1    wreg      void 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2, status,0
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;Total ram usage:        4 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:    6
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_appTasks
  8503 ;;		_setDir
  8504 ;;		_tasks
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           
  8509                           ;psect for function _EPWM1_LoadDutyValue
  8510  0A52                     _EPWM1_LoadDutyValue:
  8511  0A52                     l3614:	
  8512                           ;incstack = 0
  8513                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  8514                           
  8515                           
  8516                           ;mcc_generated_files/epwm1.c: 90: void EPWM1_LoadDutyValue(uint16_t dutyValue);mcc_gener
      +                          ated_files/epwm1.c: 91: {;mcc_generated_files/epwm1.c: 93:     CCPR1L = ((dutyValue & 0x
      +                          03FC)>>2);
  8517  0A52  0020               	movlb	0	; select bank0
  8518  0A53  082D               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  8519  0A54  00FD               	movwf	??_EPWM1_LoadDutyValue+1
  8520  0A55  082C               	movf	EPWM1_LoadDutyValue@dutyValue,w
  8521  0A56  00FC               	movwf	??_EPWM1_LoadDutyValue
  8522  0A57  36FD               	lsrf	??_EPWM1_LoadDutyValue+1,f
  8523  0A58  0CFC               	rrf	??_EPWM1_LoadDutyValue,f
  8524  0A59  36FD               	lsrf	??_EPWM1_LoadDutyValue+1,f
  8525  0A5A  0CFC               	rrf	??_EPWM1_LoadDutyValue,f
  8526  0A5B  087C               	movf	??_EPWM1_LoadDutyValue,w
  8527  0A5C  0025               	movlb	5	; select bank5
  8528  0A5D  0091               	movwf	17	;volatile
  8529                           
  8530                           ;mcc_generated_files/epwm1.c: 96:     CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue
      +                           & 0x0003)<<4));
  8531  0A5E  0020               	movlb	0	; select bank0
  8532  0A5F  082C               	movf	EPWM1_LoadDutyValue@dutyValue,w
  8533  0A60  3903               	andlw	3
  8534  0A61  00FC               	movwf	??_EPWM1_LoadDutyValue
  8535  0A62  3004               	movlw	4
  8536  0A63                     u2375:
  8537  0A63  35FC               	lslf	??_EPWM1_LoadDutyValue,f
  8538  0A64  0B89               	decfsz	9,f
  8539  0A65  2A63               	goto	u2375
  8540  0A66  0025               	movlb	5	; select bank5
  8541  0A67  0813               	movf	19,w	;volatile
  8542  0A68  39CF               	andlw	207
  8543  0A69  047C               	iorwf	??_EPWM1_LoadDutyValue,w
  8544  0A6A  0093               	movwf	19	;volatile
  8545  0A6B                     l117:
  8546  0A6B  0008               	return
  8547  0A6C                     __end_of_EPWM1_LoadDutyValue:
  8548                           
  8549                           	psect	text40
  8550  0A38                     __ptext40:	
  8551 ;; *************** function _PWM3_LoadDutyValue *****************
  8552 ;; Defined at:
  8553 ;;		line 82 in file "mcc_generated_files/pwm3.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;  dutyValue       2   12[BANK0 ] unsigned short 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;		None
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      void 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;Total ram usage:        4 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    6
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_appTasks
  8578 ;;		_setDir
  8579 ;;		_tasks
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _PWM3_LoadDutyValue
  8585  0A38                     _PWM3_LoadDutyValue:
  8586  0A38                     l3612:	
  8587                           ;incstack = 0
  8588                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  8589                           
  8590                           
  8591                           ;mcc_generated_files/pwm3.c: 82: void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_generat
      +                          ed_files/pwm3.c: 83: {;mcc_generated_files/pwm3.c: 85:     CCPR3L = ((dutyValue & 0x03FC
      +                          )>>2);
  8592  0A38  0020               	movlb	0	; select bank0
  8593  0A39  082D               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  8594  0A3A  00FD               	movwf	??_PWM3_LoadDutyValue+1
  8595  0A3B  082C               	movf	PWM3_LoadDutyValue@dutyValue,w
  8596  0A3C  00FC               	movwf	??_PWM3_LoadDutyValue
  8597  0A3D  36FD               	lsrf	??_PWM3_LoadDutyValue+1,f
  8598  0A3E  0CFC               	rrf	??_PWM3_LoadDutyValue,f
  8599  0A3F  36FD               	lsrf	??_PWM3_LoadDutyValue+1,f
  8600  0A40  0CFC               	rrf	??_PWM3_LoadDutyValue,f
  8601  0A41  087C               	movf	??_PWM3_LoadDutyValue,w
  8602  0A42  0026               	movlb	6	; select bank6
  8603  0A43  0091               	movwf	17	;volatile
  8604                           
  8605                           ;mcc_generated_files/pwm3.c: 88:     CCP3CON = ((uint8_t)(CCP3CON & 0xCF) | ((dutyValue 
      +                          & 0x0003)<<4));
  8606  0A44  0020               	movlb	0	; select bank0
  8607  0A45  082C               	movf	PWM3_LoadDutyValue@dutyValue,w
  8608  0A46  3903               	andlw	3
  8609  0A47  00FC               	movwf	??_PWM3_LoadDutyValue
  8610  0A48  3004               	movlw	4
  8611  0A49                     u2365:
  8612  0A49  35FC               	lslf	??_PWM3_LoadDutyValue,f
  8613  0A4A  0B89               	decfsz	9,f
  8614  0A4B  2A49               	goto	u2365
  8615  0A4C  0026               	movlb	6	; select bank6
  8616  0A4D  0813               	movf	19,w	;volatile
  8617  0A4E  39CF               	andlw	207
  8618  0A4F  047C               	iorwf	??_PWM3_LoadDutyValue,w
  8619  0A50  0093               	movwf	19	;volatile
  8620  0A51                     l14:
  8621  0A51  0008               	return
  8622  0A52                     __end_of_PWM3_LoadDutyValue:
  8623                           
  8624                           	psect	text41
  8625  17FA                     __ptext41:	
  8626 ;; *************** function _setTimeBaseCounter@SpiCommunication$F2153 *****************
  8627 ;; Defined at:
  8628 ;;		line 140 in file "SpiCommunication.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  timeMillis      1    0[COMMON] PTR unsigned long 
  8631 ;;		 -> instance(16), NULL(0), 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;		None
  8634 ;; Return value:  Size  Location     Type
  8635 ;;                  1    wreg      void 
  8636 ;; Registers used:
  8637 ;;		wreg
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8643 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;Total ram usage:        2 bytes
  8648 ;; Hardware stack levels used:    1
  8649 ;; Hardware stack levels required when called:    6
  8650 ;; This function calls:
  8651 ;;		Nothing
  8652 ;; This function is called by:
  8653 ;;		_NewSpiDriver
  8654 ;;		_appTasks
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _setTimeBaseCounter@SpiCommunication$F2153
  8660  17FA                     _setTimeBaseCounter@SpiCommunication$F2153:
  8661  17FA                     l4214:	
  8662                           ;incstack = 0
  8663                           ; Regs used in _setTimeBaseCounter@SpiCommunication$F2153: [wreg]
  8664                           
  8665                           
  8666                           ;SpiCommunication.c: 141:     currentTimeMillis = timeMillis;
  8667  17FA  0870               	movf	setTimeBaseCounter@SpiCommunication$F2153@timeMillis,w
  8668  17FB  00F1               	movwf	??_setTimeBaseCounter@SpiCommunication$F2157
  8669  17FC  0871               	movf	??_setTimeBaseCounter@SpiCommunication$F2157,w
  8670  17FD  0020               	movlb	0	; select bank0
  8671  17FE  00ED               	movwf	_currentTimeMillis@SpiCommunication$F2173
  8672  17FF                     l687:
  8673  17FF  0008               	return
  8674  1800                     __end_of_setTimeBaseCounter@SpiCommunication$F2153:
  8675                           
  8676                           	psect	text42
  8677  17F4                     __ptext42:	
  8678 ;; *************** function _setTimeBaseCounter@Comm$F2954 *****************
  8679 ;; Defined at:
  8680 ;;		line 178 in file "Comm.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;  timeMillis      1    0[COMMON] PTR unsigned long 
  8683 ;;		 -> instance(16), NULL(0), 
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  1    wreg      void 
  8688 ;; Registers used:
  8689 ;;		wreg
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8695 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;Total ram usage:        2 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    6
  8702 ;; This function calls:
  8703 ;;		Nothing
  8704 ;; This function is called by:
  8705 ;;		_appTasks
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           
  8710                           ;psect for function _setTimeBaseCounter@Comm$F2954
  8711  17F4                     _setTimeBaseCounter@Comm$F2954:
  8712  17F4                     l4298:	
  8713                           ;incstack = 0
  8714                           ; Regs used in _setTimeBaseCounter@Comm$F2954: [wreg]
  8715                           
  8716                           
  8717                           ;Comm.c: 179:     currentTimeMillis = timeMillis;
  8718  17F4  0870               	movf	setTimeBaseCounter@Comm$F2954@timeMillis,w
  8719  17F5  00F1               	movwf	??_setTimeBaseCounter@Comm$F2958
  8720  17F6  0871               	movf	??_setTimeBaseCounter@Comm$F2958,w
  8721  17F7  0020               	movlb	0	; select bank0
  8722  17F8  00EB               	movwf	_currentTimeMillis@Comm$F3024
  8723  17F9                     l800:
  8724  17F9  0008               	return
  8725  17FA                     __end_of_setTimeBaseCounter@Comm$F2954:
  8726                           
  8727                           	psect	text43
  8728  17EE                     __ptext43:	
  8729 ;; *************** function _setTimeBaseCounter *****************
  8730 ;; Defined at:
  8731 ;;		line 63 in file "DCMotor.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  timeMillis      1    0[COMMON] PTR unsigned long 
  8734 ;;		 -> instance(16), NULL(0), 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		wreg
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8746 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;Total ram usage:        2 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    6
  8753 ;; This function calls:
  8754 ;;		Nothing
  8755 ;; This function is called by:
  8756 ;;		_NewDCMotor
  8757 ;;		_appTasks
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function _setTimeBaseCounter
  8763  17EE                     _setTimeBaseCounter:
  8764  17EE                     l4158:	
  8765                           ;incstack = 0
  8766                           ; Regs used in _setTimeBaseCounter: [wreg]
  8767                           
  8768                           
  8769                           ;DCMotor.c: 64:     timeBase = timeMillis;
  8770  17EE  0870               	movf	setTimeBaseCounter@timeMillis,w
  8771  17EF  00F1               	movwf	??_setTimeBaseCounter
  8772  17F0  0871               	movf	??_setTimeBaseCounter,w
  8773  17F1  0020               	movlb	0	; select bank0
  8774  17F2  00EF               	movwf	_timeBase
  8775  17F3                     l501:
  8776  17F3  0008               	return
  8777  17F4                     __end_of_setTimeBaseCounter:
  8778                           
  8779                           	psect	text44
  8780  0C1A                     __ptext44:	
  8781 ;; *************** function _setSpeed *****************
  8782 ;; Defined at:
  8783 ;;		line 53 in file "DCMotor.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  this            1    0[COMMON] PTR struct DCMOTOR
  8786 ;;		 -> motor2(32), motor1(32), 
  8787 ;;  speed_X10       2    1[COMMON] unsigned short 
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;		None
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      void 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        5 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    6
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_NewDCMotor
  8810 ;;		_appTasks
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _setSpeed
  8816  0C1A                     _setSpeed:
  8817  0C1A                     l4150:	
  8818                           ;incstack = 0
  8819                           ; Regs used in _setSpeed: [wreg+fsr1l+fsr1h+status,2+status,0]
  8820                           
  8821                           
  8822                           ;DCMotor.c: 54:     if (this->speed != speed_X10) {
  8823  0C1A  0870               	movf	setSpeed@this,w
  8824  0C1B  3E19               	addlw	25
  8825  0C1C  0086               	movwf	6
  8826  0C1D  3001               	movlw	1	; select bank2/3
  8827  0C1E  0087               	movwf	7
  8828  0C1F  3F40               	moviw [0]fsr1
  8829  0C20  00F3               	movwf	??_setSpeed
  8830  0C21  3F41               	moviw [1]fsr1
  8831  0C22  00F4               	movwf	??_setSpeed+1
  8832  0C23  0872               	movf	setSpeed@speed_X10+1,w
  8833  0C24  0674               	xorwf	??_setSpeed+1,w
  8834  0C25  1D03               	skipz
  8835  0C26  2C29               	goto	u3005
  8836  0C27  0871               	movf	setSpeed@speed_X10,w
  8837  0C28  0673               	xorwf	??_setSpeed,w
  8838  0C29                     u3005:
  8839  0C29  1903               	skipnz
  8840  0C2A  2C2C               	goto	u3001
  8841  0C2B  2C2D               	goto	u3000
  8842  0C2C                     u3001:
  8843  0C2C  2C50               	goto	l498
  8844  0C2D                     u3000:
  8845  0C2D                     l4152:
  8846                           
  8847                           ;DCMotor.c: 55:         if (speed_X10 > 1000)
  8848  0C2D  3003               	movlw	3
  8849  0C2E  0272               	subwf	setSpeed@speed_X10+1,w
  8850  0C2F  30E9               	movlw	233
  8851  0C30  1903               	skipnz
  8852  0C31  0271               	subwf	setSpeed@speed_X10,w
  8853  0C32  1C03               	skipc
  8854  0C33  2C35               	goto	u3011
  8855  0C34  2C36               	goto	u3010
  8856  0C35                     u3011:
  8857  0C35  2C40               	goto	l4156
  8858  0C36                     u3010:
  8859  0C36                     l4154:
  8860                           
  8861                           ;DCMotor.c: 56:             this->speed = 1000;
  8862  0C36  0870               	movf	setSpeed@this,w
  8863  0C37  3E19               	addlw	25
  8864  0C38  0086               	movwf	6
  8865  0C39  3001               	movlw	1	; select bank2/3
  8866  0C3A  0087               	movwf	7
  8867  0C3B  30E8               	movlw	232
  8868  0C3C  3FC0               	movwi [0]fsr1
  8869  0C3D  3003               	movlw	3
  8870  0C3E  3FC1               	movwi [1]fsr1
  8871  0C3F  2C49               	goto	l497
  8872  0C40                     l4156:
  8873                           
  8874                           ;DCMotor.c: 58:             this->speed = speed_X10;
  8875  0C40  0870               	movf	setSpeed@this,w
  8876  0C41  3E19               	addlw	25
  8877  0C42  0086               	movwf	6
  8878  0C43  3001               	movlw	1	; select bank2/3
  8879  0C44  0087               	movwf	7
  8880  0C45  0871               	movf	setSpeed@speed_X10,w
  8881  0C46  3FC0               	movwi [0]fsr1
  8882  0C47  0872               	movf	setSpeed@speed_X10+1,w
  8883  0C48  3FC1               	movwi [1]fsr1
  8884  0C49                     l497:
  8885                           
  8886                           ;DCMotor.c: 59:         this->changed = 1;
  8887  0C49  0870               	movf	setSpeed@this,w
  8888  0C4A  3E1F               	addlw	31
  8889  0C4B  0086               	movwf	6
  8890  0C4C  3001               	movlw	1	; select bank2/3
  8891  0C4D  0087               	movwf	7
  8892  0C4E  0181               	clrf	1
  8893  0C4F  0A81               	incf	1,f
  8894  0C50                     l498:
  8895  0C50  0008               	return
  8896  0C51                     __end_of_setSpeed:
  8897                           
  8898                           	psect	text45
  8899  0E47                     __ptext45:	
  8900 ;; *************** function _setRegistersTable *****************
  8901 ;; Defined at:
  8902 ;;		line 124 in file "Comm.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  tab             1   12[COMMON] PTR struct COMM_REG
  8905 ;;		 -> appTasks@regs(40), 
  8906 ;;  length          1   13[COMMON] unsigned char 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  reg0            5    4[BANK0 ] struct COMM_REG
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8918 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;Total ram usage:       11 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    7
  8925 ;; This function calls:
  8926 ;;		___bmul
  8927 ;;		___lwdiv
  8928 ;;		_memcpy
  8929 ;;		_memset
  8930 ;; This function is called by:
  8931 ;;		_appTasks
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _setRegistersTable
  8937  0E47                     _setRegistersTable:
  8938  0E47                     l4240:	
  8939                           ;incstack = 0
  8940                           ; Regs used in _setRegistersTable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8941                           
  8942                           
  8943                           ;Comm.c: 125:     CommRegister reg0 = {.action = 0, .val = (uint16_t *) & instance.error
      +                          Code, .reg = 100};
  8944  0E47  3048               	movlw	low setRegistersTable@F441
  8945  0E48  0086               	movwf	6
  8946  0E49  3001               	movlw	high setRegistersTable@F441
  8947  0E4A  0087               	movwf	7
  8948  0E4B  3024               	movlw	low setRegistersTable@reg0
  8949  0E4C  0084               	movwf	4
  8950  0E4D  3000               	movlw	high setRegistersTable@reg0
  8951  0E4E  0085               	movwf	5
  8952  0E4F  3005               	movlw	5
  8953  0E50  0020               	movlb	0	; select bank0
  8954  0E51  00A0               	movwf	??_setRegistersTable
  8955  0E52                     u3140:
  8956  0E52  0016               	moviw fsr1++
  8957  0E53  001A               	movwi fsr0++
  8958  0E54  0BA0               	decfsz	??_setRegistersTable,f
  8959  0E55  2E52               	goto	u3140
  8960  0E56                     l4242:
  8961                           
  8962                           ;Comm.c: 126:     memset(table.regs, 0xFF, (sizeof reg0) * 10);
  8963  0E56  30FF               	movlw	255
  8964  0E57  00F0               	movwf	memset@c
  8965  0E58  3000               	movlw	0
  8966  0E59  00F1               	movwf	memset@c+1
  8967  0E5A  3032               	movlw	50
  8968  0E5B  00F2               	movwf	memset@n
  8969  0E5C  3000               	movlw	0
  8970  0E5D  00F3               	movwf	memset@n+1
  8971  0E5E  30A2               	movlw	(low ((_table| (0+512)+2)))& (0+255)
  8972  0E5F  3186  26BF  318E   	fcall	_memset
  8973  0E62                     l4244:
  8974                           
  8975                           ;Comm.c: 127:     memcpy(table.regs, tab, length);
  8976  0E62  30A2               	movlw	low (_table+2)
  8977  0E63  00F0               	movwf	memcpy@d1
  8978  0E64  3002               	movlw	high (_table+2)
  8979  0E65  00F1               	movwf	memcpy@d1+1
  8980  0E66  087C               	movf	setRegistersTable@tab,w
  8981  0E67  00F2               	movwf	memcpy@s1
  8982  0E68  3001               	movlw	1
  8983  0E69  00F3               	movwf	memcpy@s1+1
  8984  0E6A  087D               	movf	setRegistersTable@length,w
  8985  0E6B  0020               	movlb	0	; select bank0
  8986  0E6C  00A0               	movwf	??_setRegistersTable
  8987  0E6D  01A1               	clrf	??_setRegistersTable+1
  8988  0E6E  0820               	movf	??_setRegistersTable,w
  8989  0E6F  00F4               	movwf	memcpy@n
  8990  0E70  0821               	movf	??_setRegistersTable+1,w
  8991  0E71  00F5               	movwf	memcpy@n+1
  8992  0E72  318B  2354  318E   	fcall	_memcpy
  8993  0E75                     l4246:
  8994                           
  8995                           ;Comm.c: 128:     table.regs[length / (sizeof reg0)] = reg0;
  8996  0E75  3024               	movlw	low setRegistersTable@reg0
  8997  0E76  0086               	movwf	6
  8998  0E77  3000               	movlw	high setRegistersTable@reg0
  8999  0E78  0087               	movwf	7
  9000  0E79  3005               	movlw	5
  9001  0E7A  0020               	movlb	0	; select bank0
  9002  0E7B  00A0               	movwf	??_setRegistersTable
  9003  0E7C  0820               	movf	??_setRegistersTable,w
  9004  0E7D  00F8               	movwf	___bmul@multiplicand
  9005  0E7E  087D               	movf	setRegistersTable@length,w
  9006  0E7F  00A1               	movwf	??_setRegistersTable+1
  9007  0E80  01A2               	clrf	??_setRegistersTable+2
  9008  0E81  0821               	movf	??_setRegistersTable+1,w
  9009  0E82  00F2               	movwf	___lwdiv@dividend
  9010  0E83  0822               	movf	??_setRegistersTable+2,w
  9011  0E84  00F3               	movwf	___lwdiv@dividend+1
  9012  0E85  3005               	movlw	5
  9013  0E86  00F0               	movwf	___lwdiv@divisor
  9014  0E87  3000               	movlw	0
  9015  0E88  00F1               	movwf	___lwdiv@divisor+1
  9016  0E89  318C  2451  318E   	fcall	___lwdiv
  9017  0E8C  0870               	movf	?___lwdiv,w
  9018  0E8D  3189  21A1  318E   	fcall	___bmul
  9019  0E90  3EA2               	addlw	(low ((_table| (0+512)+2)))& (0+255)
  9020  0E91  0084               	movwf	4
  9021  0E92  3002               	movlw	2	; select bank5/6
  9022  0E93  0085               	movwf	5
  9023  0E94  3005               	movlw	5
  9024  0E95  0020               	movlb	0	; select bank0
  9025  0E96  00A3               	movwf	??_setRegistersTable+3
  9026  0E97                     u3150:
  9027  0E97  0016               	moviw fsr1++
  9028  0E98  001A               	movwi fsr0++
  9029  0E99  0BA3               	decfsz	??_setRegistersTable+3,f
  9030  0E9A  2E97               	goto	u3150
  9031  0E9B                     l772:
  9032  0E9B  0008               	return
  9033  0E9C                     __end_of_setRegistersTable:
  9034                           
  9035                           	psect	text46
  9036  06BF                     __ptext46:	
  9037 ;; *************** function _memset *****************
  9038 ;; Defined at:
  9039 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\memset.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  dest            1    wreg     PTR void 
  9042 ;;		 -> table(54), 
  9043 ;;  c               2    0[COMMON] int 
  9044 ;;  n               2    2[COMMON] unsigned int 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  dest            1    6[COMMON] PTR void 
  9047 ;;		 -> table(54), 
  9048 ;;  k               2    7[COMMON] unsigned int 
  9049 ;;  s               1    9[COMMON] PTR unsigned char 
  9050 ;;		 -> table(54), 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      PTR void 
  9053 ;; Registers used:
  9054 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:       10 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    6
  9067 ;; This function calls:
  9068 ;;		Nothing
  9069 ;; This function is called by:
  9070 ;;		_setRegistersTable
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _memset
  9076  06BF                     _memset:
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9080                           ;memset@dest stored from wreg
  9081  06BF  00F6               	movwf	memset@dest
  9082  06C0                     l3954:
  9083  06C0  0876               	movf	memset@dest,w
  9084  06C1  00F4               	movwf	??_memset
  9085  06C2  0874               	movf	??_memset,w
  9086  06C3  00F9               	movwf	memset@s
  9087  06C4                     l3956:
  9088  06C4  0872               	movf	memset@n,w
  9089  06C5  0473               	iorwf	memset@n+1,w
  9090  06C6  1D03               	btfss	3,2
  9091  06C7  2EC9               	goto	u2821
  9092  06C8  2ECA               	goto	u2820
  9093  06C9                     u2821:
  9094  06C9  2ECB               	goto	l3960
  9095  06CA                     u2820:
  9096  06CA  2F6B               	goto	l1478
  9097  06CB                     l3960:
  9098  06CB  0870               	movf	memset@c,w
  9099  06CC  00F4               	movwf	??_memset
  9100  06CD  0879               	movf	memset@s,w
  9101  06CE  0086               	movwf	6
  9102  06CF  3002               	movlw	2	; select bank4/5
  9103  06D0  0087               	movwf	7
  9104  06D1  0874               	movf	??_memset,w
  9105  06D2  0081               	movwf	1
  9106  06D3                     l3962:
  9107  06D3  0870               	movf	memset@c,w
  9108  06D4  00F4               	movwf	??_memset
  9109  06D5  0872               	movf	memset@n,w
  9110  06D6  0779               	addwf	memset@s,w
  9111  06D7  00F5               	movwf	??_memset+1
  9112  06D8  0875               	movf	??_memset+1,w
  9113  06D9  3EFF               	addlw	255
  9114  06DA  0086               	movwf	6
  9115  06DB  3002               	movlw	2	; select bank4/5
  9116  06DC  0087               	movwf	7
  9117  06DD  0874               	movf	??_memset,w
  9118  06DE  0081               	movwf	1
  9119  06DF                     l3964:
  9120  06DF  3000               	movlw	0
  9121  06E0  0273               	subwf	memset@n+1,w
  9122  06E1  3003               	movlw	3
  9123  06E2  1903               	skipnz
  9124  06E3  0272               	subwf	memset@n,w
  9125  06E4  1803               	skipnc
  9126  06E5  2EE7               	goto	u2831
  9127  06E6  2EE8               	goto	u2830
  9128  06E7                     u2831:
  9129  06E7  2EE9               	goto	l3968
  9130  06E8                     u2830:
  9131  06E8  2F6B               	goto	l1478
  9132  06E9                     l3968:
  9133  06E9  0870               	movf	memset@c,w
  9134  06EA  00F4               	movwf	??_memset
  9135  06EB  0A79               	incf	memset@s,w
  9136  06EC  0086               	movwf	6
  9137  06ED  3002               	movlw	2	; select bank4/5
  9138  06EE  0087               	movwf	7
  9139  06EF  0874               	movf	??_memset,w
  9140  06F0  0081               	movwf	1
  9141  06F1                     l3970:
  9142  06F1  0870               	movf	memset@c,w
  9143  06F2  00F4               	movwf	??_memset
  9144  06F3  0879               	movf	memset@s,w
  9145  06F4  3E02               	addlw	2
  9146  06F5  0086               	movwf	6
  9147  06F6  3002               	movlw	2	; select bank4/5
  9148  06F7  0087               	movwf	7
  9149  06F8  0874               	movf	??_memset,w
  9150  06F9  0081               	movwf	1
  9151  06FA                     l3972:
  9152  06FA  0870               	movf	memset@c,w
  9153  06FB  00F4               	movwf	??_memset
  9154  06FC  0872               	movf	memset@n,w
  9155  06FD  0779               	addwf	memset@s,w
  9156  06FE  00F5               	movwf	??_memset+1
  9157  06FF  0875               	movf	??_memset+1,w
  9158  0700  3EFE               	addlw	254
  9159  0701  0086               	movwf	6
  9160  0702  3002               	movlw	2	; select bank4/5
  9161  0703  0087               	movwf	7
  9162  0704  0874               	movf	??_memset,w
  9163  0705  0081               	movwf	1
  9164  0706                     l3974:
  9165  0706  0870               	movf	memset@c,w
  9166  0707  00F4               	movwf	??_memset
  9167  0708  0872               	movf	memset@n,w
  9168  0709  0779               	addwf	memset@s,w
  9169  070A  00F5               	movwf	??_memset+1
  9170  070B  0875               	movf	??_memset+1,w
  9171  070C  3EFD               	addlw	253
  9172  070D  0086               	movwf	6
  9173  070E  3002               	movlw	2	; select bank4/5
  9174  070F  0087               	movwf	7
  9175  0710  0874               	movf	??_memset,w
  9176  0711  0081               	movwf	1
  9177  0712                     l3976:
  9178  0712  3000               	movlw	0
  9179  0713  0273               	subwf	memset@n+1,w
  9180  0714  3007               	movlw	7
  9181  0715  1903               	skipnz
  9182  0716  0272               	subwf	memset@n,w
  9183  0717  1803               	skipnc
  9184  0718  2F1A               	goto	u2841
  9185  0719  2F1B               	goto	u2840
  9186  071A                     u2841:
  9187  071A  2F1C               	goto	l3980
  9188  071B                     u2840:
  9189  071B  2F6B               	goto	l1478
  9190  071C                     l3980:
  9191  071C  0870               	movf	memset@c,w
  9192  071D  00F4               	movwf	??_memset
  9193  071E  0879               	movf	memset@s,w
  9194  071F  3E03               	addlw	3
  9195  0720  0086               	movwf	6
  9196  0721  3002               	movlw	2	; select bank4/5
  9197  0722  0087               	movwf	7
  9198  0723  0874               	movf	??_memset,w
  9199  0724  0081               	movwf	1
  9200  0725  0870               	movf	memset@c,w
  9201  0726  00F4               	movwf	??_memset
  9202  0727  0872               	movf	memset@n,w
  9203  0728  0779               	addwf	memset@s,w
  9204  0729  00F5               	movwf	??_memset+1
  9205  072A  0875               	movf	??_memset+1,w
  9206  072B  3EFC               	addlw	252
  9207  072C  0086               	movwf	6
  9208  072D  3002               	movlw	2	; select bank4/5
  9209  072E  0087               	movwf	7
  9210  072F  0874               	movf	??_memset,w
  9211  0730  0081               	movwf	1
  9212  0731                     l3982:
  9213  0731  3000               	movlw	0
  9214  0732  0273               	subwf	memset@n+1,w
  9215  0733  3009               	movlw	9
  9216  0734  1903               	skipnz
  9217  0735  0272               	subwf	memset@n,w
  9218  0736  1803               	skipnc
  9219  0737  2F39               	goto	u2851
  9220  0738  2F3A               	goto	u2850
  9221  0739                     u2851:
  9222  0739  2F3B               	goto	l3986
  9223  073A                     u2850:
  9224  073A  2F6B               	goto	l1478
  9225  073B                     l3986:
  9226  073B  0979               	comf	memset@s,w
  9227  073C  00F4               	movwf	??_memset
  9228  073D  097A               	comf	memset@s+1,w
  9229  073E  00F5               	movwf	??_memset+1
  9230  073F  0AF4               	incf	??_memset,f
  9231  0740  1903               	skipnz
  9232  0741  0AF5               	incf	??_memset+1,f
  9233  0742  3003               	movlw	3
  9234  0743  0574               	andwf	??_memset,w
  9235  0744  00F7               	movwf	memset@k
  9236  0745  3000               	movlw	0
  9237  0746  0575               	andwf	??_memset+1,w
  9238  0747  00F8               	movwf	memset@k+1
  9239  0748  0877               	movf	memset@k,w
  9240  0749  00F4               	movwf	??_memset
  9241  074A  0874               	movf	??_memset,w
  9242  074B  07F9               	addwf	memset@s,f
  9243  074C                     l3988:
  9244  074C  0877               	movf	memset@k,w
  9245  074D  02F2               	subwf	memset@n,f
  9246  074E  0878               	movf	memset@k+1,w
  9247  074F  3BF3               	subwfb	memset@n+1,f
  9248  0750                     l3990:
  9249  0750  30FC               	movlw	252
  9250  0751  05F2               	andwf	memset@n,f
  9251  0752  30FF               	movlw	255
  9252  0753  05F3               	andwf	memset@n+1,f
  9253  0754  2F65               	goto	l3998
  9254  0755                     l3992:
  9255  0755  0870               	movf	memset@c,w
  9256  0756  00F4               	movwf	??_memset
  9257  0757  0879               	movf	memset@s,w
  9258  0758  0086               	movwf	6
  9259  0759  3002               	movlw	2	; select bank4/5
  9260  075A  0087               	movwf	7
  9261  075B  0874               	movf	??_memset,w
  9262  075C  0081               	movwf	1
  9263  075D                     l3994:
  9264  075D  3001               	movlw	1
  9265  075E  02F2               	subwf	memset@n,f
  9266  075F  3000               	movlw	0
  9267  0760  3BF3               	subwfb	memset@n+1,f
  9268  0761                     l3996:
  9269  0761  3001               	movlw	1
  9270  0762  00F4               	movwf	??_memset
  9271  0763  0874               	movf	??_memset,w
  9272  0764  07F9               	addwf	memset@s,f
  9273  0765                     l3998:
  9274  0765  0872               	movf	memset@n,w
  9275  0766  0473               	iorwf	memset@n+1,w
  9276  0767  1D03               	btfss	3,2
  9277  0768  2F6A               	goto	u2861
  9278  0769  2F6B               	goto	u2860
  9279  076A                     u2861:
  9280  076A  2F55               	goto	l3992
  9281  076B                     u2860:
  9282  076B                     l1478:
  9283  076B  0008               	return
  9284  076C                     __end_of_memset:
  9285                           
  9286                           	psect	text47
  9287  0B54                     __ptext47:	
  9288 ;; *************** function _memcpy *****************
  9289 ;; Defined at:
  9290 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\memcpy.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;  d1              2    0[COMMON] PTR void 
  9293 ;;		 -> outFrame(5), table(54), 
  9294 ;;  s1              2    2[COMMON] PTR const void 
  9295 ;;		 -> inputFrame(5), appTasks@regs(40), 
  9296 ;;  n               2    4[COMMON] unsigned int 
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;  s               2   10[COMMON] PTR const unsigned char 
  9299 ;;		 -> inputFrame(5), appTasks@regs(40), 
  9300 ;;  d               2    8[COMMON] PTR unsigned char 
  9301 ;;		 -> outFrame(5), table(54), 
  9302 ;;  tmp             1    7[COMMON] unsigned char 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  2    0[COMMON] PTR void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9312 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;Total ram usage:       12 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    6
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_transferFrames
  9323 ;;		_setRegistersTable
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           
  9328                           ;psect for function _memcpy
  9329  0B54                     _memcpy:
  9330  0B54                     l3748:	
  9331                           ;incstack = 0
  9332                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  9333                           
  9334  0B54  0873               	movf	memcpy@s1+1,w
  9335  0B55  00FB               	movwf	memcpy@s+1
  9336  0B56  0872               	movf	memcpy@s1,w
  9337  0B57  00FA               	movwf	memcpy@s
  9338  0B58  0871               	movf	memcpy@d1+1,w
  9339  0B59  00F9               	movwf	memcpy@d+1
  9340  0B5A  0870               	movf	memcpy@d1,w
  9341  0B5B  00F8               	movwf	memcpy@d
  9342  0B5C  2B73               	goto	l3756
  9343  0B5D                     l3750:
  9344  0B5D  087A               	movf	memcpy@s,w
  9345  0B5E  0086               	movwf	6
  9346  0B5F  087B               	movf	memcpy@s+1,w
  9347  0B60  0087               	movwf	7
  9348  0B61  0801               	movf	1,w
  9349  0B62  00F6               	movwf	??_memcpy
  9350  0B63  0876               	movf	??_memcpy,w
  9351  0B64  00F7               	movwf	memcpy@tmp
  9352  0B65                     l3752:
  9353  0B65  3001               	movlw	1
  9354  0B66  07FA               	addwf	memcpy@s,f
  9355  0B67  3000               	movlw	0
  9356  0B68  3DFB               	addwfc	memcpy@s+1,f
  9357  0B69                     l3754:
  9358  0B69  0878               	movf	memcpy@d,w
  9359  0B6A  0086               	movwf	6
  9360  0B6B  0879               	movf	memcpy@d+1,w
  9361  0B6C  0087               	movwf	7
  9362  0B6D  0877               	movf	memcpy@tmp,w
  9363  0B6E  0081               	movwf	1
  9364  0B6F  3001               	movlw	1
  9365  0B70  07F8               	addwf	memcpy@d,f
  9366  0B71  3000               	movlw	0
  9367  0B72  3DF9               	addwfc	memcpy@d+1,f
  9368  0B73                     l3756:
  9369  0B73  3001               	movlw	1
  9370  0B74  02F4               	subwf	memcpy@n,f
  9371  0B75  3000               	movlw	0
  9372  0B76  3BF5               	subwfb	memcpy@n+1,f
  9373  0B77  0A74               	incf	memcpy@n,w
  9374  0B78  1D03               	skipz
  9375  0B79  2B7E               	goto	u2481
  9376  0B7A  0A75               	incf	memcpy@n+1,w
  9377  0B7B  1D03               	btfss	3,2
  9378  0B7C  2B7E               	goto	u2481
  9379  0B7D  2B7F               	goto	u2480
  9380  0B7E                     u2481:
  9381  0B7E  2B5D               	goto	l3750
  9382  0B7F                     u2480:
  9383  0B7F                     l1474:
  9384  0B7F  0008               	return
  9385  0B80                     __end_of_memcpy:
  9386                           
  9387                           	psect	text48
  9388  0C51                     __ptext48:	
  9389 ;; *************** function ___lwdiv *****************
  9390 ;; Defined at:
  9391 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwdiv.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  divisor         2    0[COMMON] unsigned int 
  9394 ;;  dividend        2    2[COMMON] unsigned int 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  quotient        2    6[COMMON] unsigned int 
  9397 ;;  counter         1    5[COMMON] unsigned char 
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  2    0[COMMON] unsigned int 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;Total ram usage:        8 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    6
  9414 ;; This function calls:
  9415 ;;		Nothing
  9416 ;; This function is called by:
  9417 ;;		_setRegistersTable
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function ___lwdiv
  9423  0C51                     ___lwdiv:
  9424  0C51                     l4000:	
  9425                           ;incstack = 0
  9426                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9427                           
  9428  0C51  01F6               	clrf	___lwdiv@quotient
  9429  0C52  01F7               	clrf	___lwdiv@quotient+1
  9430  0C53                     l4002:
  9431  0C53  0870               	movf	___lwdiv@divisor,w
  9432  0C54  0471               	iorwf	___lwdiv@divisor+1,w
  9433  0C55  1903               	btfsc	3,2
  9434  0C56  2C58               	goto	u2871
  9435  0C57  2C59               	goto	u2870
  9436  0C58                     u2871:
  9437  0C58  2C88               	goto	l4022
  9438  0C59                     u2870:
  9439  0C59                     l4004:
  9440  0C59  01F5               	clrf	___lwdiv@counter
  9441  0C5A  0AF5               	incf	___lwdiv@counter,f
  9442  0C5B  2C65               	goto	l4010
  9443  0C5C                     l4006:
  9444  0C5C  3001               	movlw	1
  9445  0C5D                     u2885:
  9446  0C5D  35F0               	lslf	___lwdiv@divisor,f
  9447  0C5E  0DF1               	rlf	___lwdiv@divisor+1,f
  9448  0C5F  0B89               	decfsz	9,f
  9449  0C60  2C5D               	goto	u2885
  9450  0C61                     l4008:
  9451  0C61  3001               	movlw	1
  9452  0C62  00F4               	movwf	??___lwdiv
  9453  0C63  0874               	movf	??___lwdiv,w
  9454  0C64  07F5               	addwf	___lwdiv@counter,f
  9455  0C65                     l4010:
  9456  0C65  1FF1               	btfss	___lwdiv@divisor+1,7
  9457  0C66  2C68               	goto	u2891
  9458  0C67  2C69               	goto	u2890
  9459  0C68                     u2891:
  9460  0C68  2C5C               	goto	l4006
  9461  0C69                     u2890:
  9462  0C69                     l4012:
  9463  0C69  3001               	movlw	1
  9464  0C6A                     u2905:
  9465  0C6A  35F6               	lslf	___lwdiv@quotient,f
  9466  0C6B  0DF7               	rlf	___lwdiv@quotient+1,f
  9467  0C6C  0B89               	decfsz	9,f
  9468  0C6D  2C6A               	goto	u2905
  9469  0C6E  0871               	movf	___lwdiv@divisor+1,w
  9470  0C6F  0273               	subwf	___lwdiv@dividend+1,w
  9471  0C70  1D03               	skipz
  9472  0C71  2C74               	goto	u2915
  9473  0C72  0870               	movf	___lwdiv@divisor,w
  9474  0C73  0272               	subwf	___lwdiv@dividend,w
  9475  0C74                     u2915:
  9476  0C74  1C03               	skipc
  9477  0C75  2C77               	goto	u2911
  9478  0C76  2C78               	goto	u2910
  9479  0C77                     u2911:
  9480  0C77  2C7D               	goto	l4018
  9481  0C78                     u2910:
  9482  0C78                     l4014:
  9483  0C78  0870               	movf	___lwdiv@divisor,w
  9484  0C79  02F2               	subwf	___lwdiv@dividend,f
  9485  0C7A  0871               	movf	___lwdiv@divisor+1,w
  9486  0C7B  3BF3               	subwfb	___lwdiv@dividend+1,f
  9487  0C7C                     l4016:
  9488  0C7C  1476               	bsf	___lwdiv@quotient,0
  9489  0C7D                     l4018:
  9490  0C7D  3001               	movlw	1
  9491  0C7E                     u2925:
  9492  0C7E  36F1               	lsrf	___lwdiv@divisor+1,f
  9493  0C7F  0CF0               	rrf	___lwdiv@divisor,f
  9494  0C80  0B89               	decfsz	9,f
  9495  0C81  2C7E               	goto	u2925
  9496  0C82                     l4020:
  9497  0C82  3001               	movlw	1
  9498  0C83  02F5               	subwf	___lwdiv@counter,f
  9499  0C84  1D03               	btfss	3,2
  9500  0C85  2C87               	goto	u2931
  9501  0C86  2C88               	goto	u2930
  9502  0C87                     u2931:
  9503  0C87  2C69               	goto	l4012
  9504  0C88                     u2930:
  9505  0C88                     l4022:
  9506  0C88  0877               	movf	___lwdiv@quotient+1,w
  9507  0C89  00F1               	movwf	?___lwdiv+1
  9508  0C8A  0876               	movf	___lwdiv@quotient,w
  9509  0C8B  00F0               	movwf	?___lwdiv
  9510  0C8C                     l1292:
  9511  0C8C  0008               	return
  9512  0C8D                     __end_of___lwdiv:
  9513                           
  9514                           	psect	text49
  9515  09A1                     __ptext49:	
  9516 ;; *************** function ___bmul *****************
  9517 ;; Defined at:
  9518 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul8.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;  multiplier      1    wreg     unsigned char 
  9521 ;;  multiplicand    1    8[COMMON] unsigned char 
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;  multiplier      1   11[COMMON] unsigned char 
  9524 ;;  product         1   10[COMMON] unsigned char 
  9525 ;; Return value:  Size  Location     Type
  9526 ;;                  1    wreg      unsigned char 
  9527 ;; Registers used:
  9528 ;;		wreg, status,2, status,0
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;Total ram usage:        4 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:    6
  9541 ;; This function calls:
  9542 ;;		Nothing
  9543 ;; This function is called by:
  9544 ;;		_setRegistersTable
  9545 ;;		_getRegister
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           
  9550                           ;psect for function ___bmul
  9551  09A1                     ___bmul:
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9555                           ;___bmul@multiplier stored from wreg
  9556  09A1  00FB               	movwf	___bmul@multiplier
  9557  09A2                     l3660:
  9558  09A2  01FA               	clrf	___bmul@product
  9559  09A3                     l3662:
  9560  09A3  1C7B               	btfss	___bmul@multiplier,0
  9561  09A4  29A6               	goto	u2411
  9562  09A5  29A7               	goto	u2410
  9563  09A6                     u2411:
  9564  09A6  29AB               	goto	l3666
  9565  09A7                     u2410:
  9566  09A7                     l3664:
  9567  09A7  0878               	movf	___bmul@multiplicand,w
  9568  09A8  00F9               	movwf	??___bmul
  9569  09A9  0879               	movf	??___bmul,w
  9570  09AA  07FA               	addwf	___bmul@product,f
  9571  09AB                     l3666:
  9572  09AB  1003               	clrc
  9573  09AC  0DF8               	rlf	___bmul@multiplicand,f
  9574  09AD                     l3668:
  9575  09AD  1003               	clrc
  9576  09AE  0CFB               	rrf	___bmul@multiplier,f
  9577  09AF  087B               	movf	___bmul@multiplier,w
  9578  09B0  1D03               	btfss	3,2
  9579  09B1  29B3               	goto	u2421
  9580  09B2  29B4               	goto	u2420
  9581  09B3                     u2421:
  9582  09B3  29A3               	goto	l3662
  9583  09B4                     u2420:
  9584  09B4                     l3670:
  9585  09B4  087A               	movf	___bmul@product,w
  9586  09B5                     l1038:
  9587  09B5  0008               	return
  9588  09B6                     __end_of___bmul:
  9589                           
  9590                           	psect	text50
  9591  0A0C                     __ptext50:	
  9592 ;; *************** function _open *****************
  9593 ;; Defined at:
  9594 ;;		line 111 in file "SpiCommunication.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  this            1    4[COMMON] PTR struct SPI
  9597 ;;		 -> spi(57), 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;		None
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  1    wreg      void 
  9602 ;; Registers used:
  9603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9609 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;Total ram usage:        2 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    8
  9616 ;; This function calls:
  9617 ;;		Absolute function
  9618 ;;		_espi_op
  9619 ;; This function is called by:
  9620 ;;		_NewSpiDriver
  9621 ;;		_appTasks
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _open
  9627  0A0C                     _open:
  9628  0A0C                     l4212:	
  9629                           ;incstack = 0
  9630                           ; Regs used in _open: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9631                           
  9632                           
  9633                           ;SpiCommunication.c: 112:     this->state.b.open = this->hwopen();
  9634  0A0C  0874               	movf	open@this,w
  9635  0A0D  3E1F               	addlw	31
  9636  0A0E  0086               	movwf	6
  9637  0A0F  3002               	movlw	2	; select bank4/5
  9638  0A10  0087               	movwf	7
  9639  0A11  3F41               	moviw [1]fsr1
  9640  0A12  008A               	movwf	10
  9641  0A13  3F40               	moviw [0]fsr1
  9642  0A14  000A               	callw
  9643  0A15  318A               	pagesel	$
  9644  0A16  00F5               	movwf	??_open
  9645  0A17  0874               	movf	open@this,w
  9646  0A18  3E31               	addlw	49
  9647  0A19  0086               	movwf	6
  9648  0A1A  3002               	movlw	2	; select bank4/5
  9649  0A1B  0087               	movwf	7
  9650  0A1C  0801               	movf	1,w
  9651  0A1D  0675               	xorwf	??_open,w
  9652  0A1E  39FE               	andlw	-2
  9653  0A1F  0675               	xorwf	??_open,w
  9654  0A20  0081               	movwf	1
  9655  0A21                     l669:
  9656  0A21  0008               	return
  9657  0A22                     __end_of_open:
  9658                           
  9659                           	psect	text51
  9660  17D7                     __ptext51:	
  9661 ;; *************** function _espi_op *****************
  9662 ;; Defined at:
  9663 ;;		line 22 in file "enhaced_spi.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;		None
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;		None
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  1    wreg      _Bool 
  9670 ;; Registers used:
  9671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;Total ram usage:        0 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    7
  9684 ;; This function calls:
  9685 ;;		_SPI_Open
  9686 ;; This function is called by:
  9687 ;;		_appTasks
  9688 ;;		_espi_rst
  9689 ;;		_open
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _espi_op
  9695  17D7                     _espi_op:
  9696  17D7                     l3608:	
  9697                           ;incstack = 0
  9698                           ; Regs used in _espi_op: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9699                           
  9700                           
  9701                           ;enhaced_spi.c: 23:     return SPI_Open(SPI_DEFAULT);
  9702  17D7  3000               	movlw	0
  9703  17D8  318D  2557  3197   	fcall	_SPI_Open
  9704  17DB                     l836:
  9705  17DB  0008               	return
  9706  17DC                     __end_of_espi_op:
  9707                           
  9708                           	psect	text52
  9709  0D57                     __ptext52:	
  9710 ;; *************** function _SPI_Open *****************
  9711 ;; Defined at:
  9712 ;;		line 74 in file "mcc_generated_files/spi.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  spiUniqueCon    1    wreg     enum E353
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;  spiUniqueCon    1    3[COMMON] enum E353
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  1    wreg      _Bool 
  9719 ;; Registers used:
  9720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        4 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    6
  9733 ;; This function calls:
  9734 ;;		Nothing
  9735 ;; This function is called by:
  9736 ;;		_espi_op
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740                           
  9741                           ;psect for function _SPI_Open
  9742  0D57                     _SPI_Open:
  9743                           
  9744                           ;incstack = 0
  9745                           ; Regs used in _SPI_Open: [wreg-fsr0h+status,2+status,0+pclath]
  9746                           ;SPI_Open@spiUniqueConfiguration stored from wreg
  9747  0D57  00F3               	movwf	SPI_Open@spiUniqueConfiguration
  9748  0D58                     l3588:
  9749                           
  9750                           ;mcc_generated_files/spi.c: 74: _Bool SPI_Open(spi_modes_t spiUniqueConfiguration);mcc_g
      +                          enerated_files/spi.c: 75: {;mcc_generated_files/spi.c: 76:     if(!SSP1CON1bits.SSPEN)
  9751  0D58  0024               	movlb	4	; select bank4
  9752  0D59  1A95               	btfsc	21,5	;volatile
  9753  0D5A  2D5C               	goto	u2351
  9754  0D5B  2D5D               	goto	u2350
  9755  0D5C                     u2351:
  9756  0D5C  2DA4               	goto	l3604
  9757  0D5D                     u2350:
  9758  0D5D                     l3590:
  9759                           
  9760                           ;mcc_generated_files/spi.c: 77:     {;mcc_generated_files/spi.c: 78:         SSP1STAT = 
      +                          spi_configuration[spiUniqueConfiguration].stat;
  9761  0D5D  0873               	movf	SPI_Open@spiUniqueConfiguration,w
  9762  0D5E  00F0               	movwf	??_SPI_Open
  9763  0D5F  01F1               	clrf	??_SPI_Open+1
  9764  0D60  35F0               	lslf	??_SPI_Open,f
  9765  0D61  0DF1               	rlf	??_SPI_Open+1,f
  9766  0D62  35F0               	lslf	??_SPI_Open,f
  9767  0D63  0DF1               	rlf	??_SPI_Open+1,f
  9768  0D64  3001               	movlw	low ((_spi_configuration+1)| (0+32768))
  9769  0D65  0770               	addwf	??_SPI_Open,w
  9770  0D66  0084               	movwf	4
  9771  0D67  3098               	movlw	high ((_spi_configuration+1)| (0+32768))
  9772  0D68  3D71               	addwfc	??_SPI_Open+1,w
  9773  0D69  0085               	movwf	5
  9774  0D6A  0800               	movf	0,w	;code access
  9775  0D6B  0094               	movwf	20	;volatile
  9776                           
  9777                           ;mcc_generated_files/spi.c: 79:         SSP1CON1 = spi_configuration[spiUniqueConfigurat
      +                          ion].con1;
  9778  0D6C  0873               	movf	SPI_Open@spiUniqueConfiguration,w
  9779  0D6D  00F0               	movwf	??_SPI_Open
  9780  0D6E  01F1               	clrf	??_SPI_Open+1
  9781  0D6F  35F0               	lslf	??_SPI_Open,f
  9782  0D70  0DF1               	rlf	??_SPI_Open+1,f
  9783  0D71  35F0               	lslf	??_SPI_Open,f
  9784  0D72  0DF1               	rlf	??_SPI_Open+1,f
  9785  0D73  3000               	movlw	low (_spi_configuration| (0+32768))
  9786  0D74  0770               	addwf	??_SPI_Open,w
  9787  0D75  0084               	movwf	4
  9788  0D76  3098               	movlw	high (_spi_configuration| (0+32768))
  9789  0D77  3D71               	addwfc	??_SPI_Open+1,w
  9790  0D78  0085               	movwf	5
  9791  0D79  0800               	movf	0,w	;code access
  9792  0D7A  0095               	movwf	21	;volatile
  9793  0D7B                     l3592:
  9794                           
  9795                           ;mcc_generated_files/spi.c: 80:         SSP1CON2 = 0x00;
  9796  0D7B  0196               	clrf	22	;volatile
  9797  0D7C                     l3594:
  9798                           
  9799                           ;mcc_generated_files/spi.c: 81:         SSP1ADD = spi_configuration[spiUniqueConfigurati
      +                          on].add;
  9800  0D7C  0873               	movf	SPI_Open@spiUniqueConfiguration,w
  9801  0D7D  00F0               	movwf	??_SPI_Open
  9802  0D7E  01F1               	clrf	??_SPI_Open+1
  9803  0D7F  35F0               	lslf	??_SPI_Open,f
  9804  0D80  0DF1               	rlf	??_SPI_Open+1,f
  9805  0D81  35F0               	lslf	??_SPI_Open,f
  9806  0D82  0DF1               	rlf	??_SPI_Open+1,f
  9807  0D83  3002               	movlw	low ((_spi_configuration+2)| (0+32768))
  9808  0D84  0770               	addwf	??_SPI_Open,w
  9809  0D85  0084               	movwf	4
  9810  0D86  3098               	movlw	high ((_spi_configuration+2)| (0+32768))
  9811  0D87  3D71               	addwfc	??_SPI_Open+1,w
  9812  0D88  0085               	movwf	5
  9813  0D89  0800               	movf	0,w	;code access
  9814  0D8A  0092               	movwf	18	;volatile
  9815  0D8B                     l3596:
  9816                           
  9817                           ;mcc_generated_files/spi.c: 82:         TRISCbits.TRISC0 = spi_configuration[spiUniqueCo
      +                          nfiguration].operation;
  9818  0D8B  0873               	movf	SPI_Open@spiUniqueConfiguration,w
  9819  0D8C  00F0               	movwf	??_SPI_Open
  9820  0D8D  01F1               	clrf	??_SPI_Open+1
  9821  0D8E  35F0               	lslf	??_SPI_Open,f
  9822  0D8F  0DF1               	rlf	??_SPI_Open+1,f
  9823  0D90  35F0               	lslf	??_SPI_Open,f
  9824  0D91  0DF1               	rlf	??_SPI_Open+1,f
  9825  0D92  3003               	movlw	low ((_spi_configuration+3)| (0+32768))
  9826  0D93  0770               	addwf	??_SPI_Open,w
  9827  0D94  0084               	movwf	4
  9828  0D95  3098               	movlw	high ((_spi_configuration+3)| (0+32768))
  9829  0D96  3D71               	addwfc	??_SPI_Open+1,w
  9830  0D97  0085               	movwf	5
  9831  0D98  0800               	movf	0,w	;code access
  9832  0D99  00F2               	movwf	??_SPI_Open+2
  9833  0D9A  0021               	movlb	1	; select bank1
  9834  0D9B  080E               	movf	14,w	;volatile
  9835  0D9C  0672               	xorwf	??_SPI_Open+2,w
  9836  0D9D  39FE               	andlw	-2
  9837  0D9E  0672               	xorwf	??_SPI_Open+2,w
  9838  0D9F  008E               	movwf	14	;volatile
  9839  0DA0                     l3598:
  9840                           
  9841                           ;mcc_generated_files/spi.c: 83:         SSP1CON1bits.SSPEN = 1;
  9842  0DA0  0024               	movlb	4	; select bank4
  9843  0DA1  1695               	bsf	21,5	;volatile
  9844  0DA2                     l3600:
  9845                           
  9846                           ;mcc_generated_files/spi.c: 84:         return 1;
  9847  0DA2  3001               	movlw	1
  9848  0DA3  2DA5               	goto	l253
  9849  0DA4                     l3604:
  9850                           
  9851                           ;mcc_generated_files/spi.c: 86:     return 0;
  9852  0DA4  3000               	movlw	0
  9853  0DA5                     l253:
  9854  0DA5  0008               	return
  9855  0DA6                     __end_of_SPI_Open:
  9856                           
  9857                           	psect	text53
  9858  0894                     __ptext53:	
  9859 ;; *************** function _espi_setInterrupHandler *****************
  9860 ;; Defined at:
  9861 ;;		line 34 in file "enhaced_spi.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;  fun             2    2[COMMON] PTR FTN()void 
  9864 ;;		 -> dataReceived(1), 
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;		None
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, status,2, status,0, pclath, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;Total ram usage:        2 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    7
  9883 ;; This function calls:
  9884 ;;		_SPI_SetInterruptHandler
  9885 ;; This function is called by:
  9886 ;;		_appTasks
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function _espi_setInterrupHandler
  9892  0894                     _espi_setInterrupHandler:
  9893  0894                     l4142:	
  9894                           ;incstack = 0
  9895                           ; Regs used in _espi_setInterrupHandler: [wreg+status,2+status,0+pclath+cstack]
  9896                           
  9897                           
  9898                           ;enhaced_spi.c: 35:     SPI_InterruptHandler = fun;
  9899  0894  0873               	movf	espi_setInterrupHandler@fun+1,w
  9900  0895  0021               	movlb	1	; select bank1
  9901  0896  00DE               	movwf	(_SPI_InterruptHandler+1)^(0+128)
  9902  0897  0872               	movf	espi_setInterrupHandler@fun,w
  9903  0898  00DD               	movwf	_SPI_InterruptHandler^(0+128)
  9904  0899                     l4144:
  9905                           
  9906                           ;enhaced_spi.c: 36:     SPI_SetInterruptHandler(interrupHandler);
  9907  0899  30E0               	movlw	low _interrupHandler
  9908  089A  00F0               	movwf	SPI_SetInterruptHandler@handler
  9909  089B  3009               	movlw	high _interrupHandler
  9910  089C  00F1               	movwf	SPI_SetInterruptHandler@handler+1
  9911  089D  3197  27E2  3188   	fcall	_SPI_SetInterruptHandler
  9912  08A0                     l845:
  9913  08A0  0008               	return
  9914  08A1                     __end_of_espi_setInterrupHandler:
  9915                           
  9916                           	psect	text54
  9917  076C                     __ptext54:	
  9918 ;; *************** function _NewSpiDriver *****************
  9919 ;; Defined at:
  9920 ;;		line 38 in file "SpiCommunication.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;  op              2    0[BANK0 ] PTR FTN()_Bool 
  9923 ;;		 -> espi_op(1), 
  9924 ;;  cl              2    2[BANK0 ] PTR FTN()void 
  9925 ;;		 -> espi_cl(1), 
  9926 ;;  rd              2    4[BANK0 ] PTR FTN()unsigned char 
  9927 ;;		 -> espi_rd(1), 
  9928 ;;  wr1             2    6[BANK0 ] PTR FTN(unsigned char ,)
  9929 ;;		 -> espi_wr1(1), 
  9930 ;;  wr2             2    8[BANK0 ] PTR FTN(unsigned char ,)
  9931 ;;		 -> espi_wr2(1), 
  9932 ;;  rst             2   10[BANK0 ] PTR FTN()void 
  9933 ;;		 -> espi_rst(1), 
  9934 ;;  ie              2   12[BANK0 ] PTR FTN(_Bool ,)void 
  9935 ;;		 -> espi_int(1), 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  spi            57    0[BANK1 ] struct SPI
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  57    0[BANK0 ] struct SPI
  9940 ;; Registers used:
  9941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9947 ;;      Params:         0      57       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Totals:         1      57      57       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;Total ram usage:      115 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    6
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_appTasks
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function _NewSpiDriver
  9963  076C                     _NewSpiDriver:
  9964  076C                     l4096:	
  9965                           ;incstack = 0
  9966                           ; Regs used in _NewSpiDriver: [wreg-fsr1h+status,2+status,0]
  9967                           
  9968                           
  9969                           ;SpiCommunication.c: 39:     Spi spi = {
  9970  076C  30A0               	movlw	low NewSpiDriver@F2536
  9971  076D  0086               	movwf	6
  9972  076E  3004               	movlw	high NewSpiDriver@F2536
  9973  076F  0087               	movwf	7
  9974  0770  30A0               	movlw	low NewSpiDriver@spi
  9975  0771  0084               	movwf	4
  9976  0772  3000               	movlw	high NewSpiDriver@spi
  9977  0773  0085               	movwf	5
  9978  0774  3039               	movlw	57
  9979  0775  00F0               	movwf	??_NewSpiDriver
  9980  0776                     u2980:
  9981  0776  0016               	moviw fsr1++
  9982  0777  001A               	movwi fsr0++
  9983  0778  0BF0               	decfsz	??_NewSpiDriver,f
  9984  0779  2F76               	goto	u2980
  9985  077A                     l4098:
  9986  077A  30A6               	movlw	low _read
  9987  077B  0021               	movlb	1	; select bank1
  9988  077C  00A0               	movwf	NewSpiDriver@spi^(0+128)
  9989  077D  300D               	movlw	high _read
  9990  077E  00A1               	movwf	(NewSpiDriver@spi^(0+128)+1)
  9991  077F                     l4100:
  9992  077F  3005               	movlw	low _write
  9993  0780  00A2               	movwf	(low ((NewSpiDriver@spi| 0+2)))^(0+128)
  9994  0781  300F               	movlw	high _write
  9995  0782  00A3               	movwf	((low ((NewSpiDriver@spi| 0+2)))^(0+128)+1)
  9996  0783                     l4102:
  9997  0783  300C               	movlw	low _open
  9998  0784  00A4               	movwf	(low ((NewSpiDriver@spi| 0+4)))^(0+128)
  9999  0785  300A               	movlw	high _open
 10000  0786  00A5               	movwf	((low ((NewSpiDriver@spi| 0+4)))^(0+128)+1)
 10001  0787                     l4104:
 10002  0787  3000               	movlw	0
 10003  0788  00A6               	movwf	(low ((NewSpiDriver@spi| 0+6)))^(0+128)
 10004  0789  3000               	movlw	0
 10005  078A  00A7               	movwf	((low ((NewSpiDriver@spi| 0+6)))^(0+128)+1)
 10006  078B                     l4106:
 10007  078B  304B               	movlw	low _tasks@SpiCommunication$F2138
 10008  078C  00A8               	movwf	(low ((NewSpiDriver@spi| 0+8)))^(0+128)
 10009  078D  3005               	movlw	high _tasks@SpiCommunication$F2138
 10010  078E  00A9               	movwf	((low ((NewSpiDriver@spi| 0+8)))^(0+128)+1)
 10011  078F                     l4108:
 10012  078F  30E4               	movlw	low _txDone
 10013  0790  00AA               	movwf	(low ((NewSpiDriver@spi| 0+10)))^(0+128)
 10014  0791  3008               	movlw	high _txDone
 10015  0792  00AB               	movwf	((low ((NewSpiDriver@spi| 0+10)))^(0+128)+1)
 10016  0793                     l4110:
 10017  0793  308D               	movlw	low _rxDone
 10018  0794  00AC               	movwf	(low ((NewSpiDriver@spi| 0+12)))^(0+128)
 10019  0795  3009               	movlw	high _rxDone
 10020  0796  00AD               	movwf	((low ((NewSpiDriver@spi| 0+12)))^(0+128)+1)
 10021  0797                     l4112:
 10022  0797  30FA               	movlw	low _setTimeBaseCounter@SpiCommunication$F2153
 10023  0798  00AE               	movwf	(low ((NewSpiDriver@spi| 0+14)))^(0+128)
 10024  0799  3017               	movlw	high _setTimeBaseCounter@SpiCommunication$F2153
 10025  079A  00AF               	movwf	((low ((NewSpiDriver@spi| 0+14)))^(0+128)+1)
 10026  079B                     l4114:
 10027  079B  30CA               	movlw	low _reset
 10028  079C  00B0               	movwf	(low ((NewSpiDriver@spi| 0+16)))^(0+128)
 10029  079D  300C               	movlw	high _reset
 10030  079E  00B1               	movwf	((low ((NewSpiDriver@spi| 0+16)))^(0+128)+1)
 10031  079F                     l4116:
 10032  079F  3088               	movlw	low _exchangeDone
 10033  07A0  00B2               	movwf	(low ((NewSpiDriver@spi| 0+18)))^(0+128)
 10034  07A1  3004               	movlw	high _exchangeDone
 10035  07A2  00B3               	movwf	((low ((NewSpiDriver@spi| 0+18)))^(0+128)+1)
 10036  07A3                     l4118:
 10037  07A3  308D               	movlw	low _healthy
 10038  07A4  00BC               	movwf	(low ((NewSpiDriver@spi| 0+28)))^(0+128)
 10039  07A5  300C               	movlw	high _healthy
 10040  07A6  00BD               	movwf	((low ((NewSpiDriver@spi| 0+28)))^(0+128)+1)
 10041  07A7                     l4120:
 10042  07A7  0020               	movlb	0	; select bank0
 10043  07A8  0821               	movf	NewSpiDriver@op+1,w
 10044  07A9  0021               	movlb	1	; select bank1
 10045  07AA  00C0               	movwf	((low ((NewSpiDriver@spi| 0+31))+1))^(0+128)
 10046  07AB  0020               	movlb	0	; select bank0
 10047  07AC  0820               	movf	NewSpiDriver@op,w
 10048  07AD  0021               	movlb	1	; select bank1
 10049  07AE  00BF               	movwf	(low ((NewSpiDriver@spi| 0+31)))^(0+128)
 10050  07AF                     l4122:
 10051  07AF  0020               	movlb	0	; select bank0
 10052  07B0  0823               	movf	NewSpiDriver@cl+1,w
 10053  07B1  0021               	movlb	1	; select bank1
 10054  07B2  00C2               	movwf	((low ((NewSpiDriver@spi| 0+33))+1))^(0+128)
 10055  07B3  0020               	movlb	0	; select bank0
 10056  07B4  0822               	movf	NewSpiDriver@cl,w
 10057  07B5  0021               	movlb	1	; select bank1
 10058  07B6  00C1               	movwf	(low ((NewSpiDriver@spi| 0+33)))^(0+128)
 10059  07B7                     l4124:
 10060  07B7  0020               	movlb	0	; select bank0
 10061  07B8  082B               	movf	NewSpiDriver@rst+1,w
 10062  07B9  0021               	movlb	1	; select bank1
 10063  07BA  00C4               	movwf	((low ((NewSpiDriver@spi| 0+35))+1))^(0+128)
 10064  07BB  0020               	movlb	0	; select bank0
 10065  07BC  082A               	movf	NewSpiDriver@rst,w
 10066  07BD  0021               	movlb	1	; select bank1
 10067  07BE  00C3               	movwf	(low ((NewSpiDriver@spi| 0+35)))^(0+128)
 10068  07BF                     l4126:
 10069  07BF  0020               	movlb	0	; select bank0
 10070  07C0  0825               	movf	NewSpiDriver@rd+1,w
 10071  07C1  0021               	movlb	1	; select bank1
 10072  07C2  00C6               	movwf	((low ((NewSpiDriver@spi| 0+37))+1))^(0+128)
 10073  07C3  0020               	movlb	0	; select bank0
 10074  07C4  0824               	movf	NewSpiDriver@rd,w
 10075  07C5  0021               	movlb	1	; select bank1
 10076  07C6  00C5               	movwf	(low ((NewSpiDriver@spi| 0+37)))^(0+128)
 10077  07C7                     l4128:
 10078  07C7  0020               	movlb	0	; select bank0
 10079  07C8  0827               	movf	NewSpiDriver@wr1+1,w
 10080  07C9  0021               	movlb	1	; select bank1
 10081  07CA  00C8               	movwf	((low ((NewSpiDriver@spi| 0+39))+1))^(0+128)
 10082  07CB  0020               	movlb	0	; select bank0
 10083  07CC  0826               	movf	NewSpiDriver@wr1,w
 10084  07CD  0021               	movlb	1	; select bank1
 10085  07CE  00C7               	movwf	(low ((NewSpiDriver@spi| 0+39)))^(0+128)
 10086  07CF                     l4130:
 10087  07CF  0020               	movlb	0	; select bank0
 10088  07D0  0829               	movf	NewSpiDriver@wr2+1,w
 10089  07D1  0021               	movlb	1	; select bank1
 10090  07D2  00CA               	movwf	((low ((NewSpiDriver@spi| 0+41))+1))^(0+128)
 10091  07D3  0020               	movlb	0	; select bank0
 10092  07D4  0828               	movf	NewSpiDriver@wr2,w
 10093  07D5  0021               	movlb	1	; select bank1
 10094  07D6  00C9               	movwf	(low ((NewSpiDriver@spi| 0+41)))^(0+128)
 10095  07D7                     l4132:
 10096  07D7  0020               	movlb	0	; select bank0
 10097  07D8  082D               	movf	NewSpiDriver@ie+1,w
 10098  07D9  0021               	movlb	1	; select bank1
 10099  07DA  00CC               	movwf	((low ((NewSpiDriver@spi| 0+43))+1))^(0+128)
 10100  07DB  0020               	movlb	0	; select bank0
 10101  07DC  082C               	movf	NewSpiDriver@ie,w
 10102  07DD  0021               	movlb	1	; select bank1
 10103  07DE  00CB               	movwf	(low ((NewSpiDriver@spi| 0+43)))^(0+128)
 10104  07DF                     l4134:
 10105  07DF  01D1               	clrf	(NewSpiDriver@spi^(0+128)+49)
 10106  07E0                     l4136:
 10107                           
 10108                           ;SpiCommunication.c: 60:     spi.timer = *currentTimeMillis;
 10109  07E0  0020               	movlb	0	; select bank0
 10110  07E1  086D               	movf	_currentTimeMillis@SpiCommunication$F2173,w
 10111  07E2  0086               	movwf	6
 10112  07E3  3001               	movlw	1	; select bank2/3
 10113  07E4  0087               	movwf	7
 10114  07E5  3F40               	moviw [0]fsr1
 10115  07E6  0021               	movlb	1	; select bank1
 10116  07E7  00D2               	movwf	(NewSpiDriver@spi^(0+128)+50)
 10117  07E8  3F41               	moviw [1]fsr1
 10118  07E9  00D3               	movwf	((NewSpiDriver@spi+1)^(0+128)+50)
 10119  07EA  3F42               	moviw [2]fsr1
 10120  07EB  00D4               	movwf	((NewSpiDriver@spi+2)^(0+128)+50)
 10121  07EC  3F43               	moviw [3]fsr1
 10122  07ED  00D5               	movwf	((NewSpiDriver@spi+3)^(0+128)+50)
 10123  07EE                     l4138:
 10124                           
 10125                           ;SpiCommunication.c: 61:     return spi;
 10126  07EE  30A0               	movlw	low NewSpiDriver@spi
 10127  07EF  0086               	movwf	6
 10128  07F0  3000               	movlw	high NewSpiDriver@spi
 10129  07F1  0087               	movwf	7
 10130  07F2  3020               	movlw	low ?_NewSpiDriver
 10131  07F3  0084               	movwf	4
 10132  07F4  3000               	movlw	high ?_NewSpiDriver
 10133  07F5  0085               	movwf	5
 10134  07F6  3039               	movlw	57
 10135  07F7  00F0               	movwf	??_NewSpiDriver
 10136  07F8                     u2990:
 10137  07F8  0016               	moviw fsr1++
 10138  07F9  001A               	movwi fsr0++
 10139  07FA  0BF0               	decfsz	??_NewSpiDriver,f
 10140  07FB  2FF8               	goto	u2990
 10141  07FC                     l643:
 10142  07FC  0008               	return
 10143  07FD                     __end_of_NewSpiDriver:
 10144                           
 10145                           	psect	text55
 10146  0DF6                     __ptext55:	
 10147 ;; *************** function _NewDCMotor *****************
 10148 ;; Defined at:
 10149 ;;		line 22 in file "DCMotor.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;  _setDir         2    0[BANK0 ] PTR FTN(_Bool ,)void 
 10152 ;;		 -> motor2SetDir(1), motor1SetDir(1), 
 10153 ;;  _setSpeed       2    2[BANK0 ] PTR FTN(unsigned short ,
 10154 ;;		 -> EPWM1_LoadDutyValue(1), PWM3_LoadDutyValue(1), 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  m              32   32[BANK0 ] struct DCMOTOR
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  32    0[BANK0 ] struct DCMOTOR
 10159 ;; Registers used:
 10160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         1      64       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:       65 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    6
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_appTasks
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _NewDCMotor
 10182  0DF6                     _NewDCMotor:
 10183  0DF6                     l4060:	
 10184                           ;incstack = 0
 10185                           ; Regs used in _NewDCMotor: [wreg-fsr1h+status,2+status,0]
 10186                           
 10187                           
 10188                           ;DCMotor.c: 23:     DCMotor m = {
 10189  0DF6  3020               	movlw	low NewDCMotor@F128
 10190  0DF7  0086               	movwf	6
 10191  0DF8  3003               	movlw	high NewDCMotor@F128
 10192  0DF9  0087               	movwf	7
 10193  0DFA  3040               	movlw	low NewDCMotor@m
 10194  0DFB  0084               	movwf	4
 10195  0DFC  3000               	movlw	high NewDCMotor@m
 10196  0DFD  0085               	movwf	5
 10197  0DFE  3020               	movlw	32
 10198  0DFF  00F0               	movwf	??_NewDCMotor
 10199  0E00                     u2960:
 10200  0E00  0016               	moviw fsr1++
 10201  0E01  001A               	movwi fsr0++
 10202  0E02  0BF0               	decfsz	??_NewDCMotor,f
 10203  0E03  2E00               	goto	u2960
 10204  0E04                     l4062:
 10205  0E04  3010               	movlw	low _setDir
 10206  0E05  0020               	movlb	0	; select bank0
 10207  0E06  00C0               	movwf	NewDCMotor@m
 10208  0E07  300D               	movlw	high _setDir
 10209  0E08  00C1               	movwf	NewDCMotor@m+1
 10210  0E09                     l4064:
 10211  0E09  301A               	movlw	low _setSpeed
 10212  0E0A  00C2               	movwf	low ((NewDCMotor@m| 0+2))
 10213  0E0B  300C               	movlw	high _setSpeed
 10214  0E0C  00C3               	movwf	(low ((NewDCMotor@m| 0+2))+1)
 10215  0E0D                     l4066:
 10216  0E0D  30EE               	movlw	low _setTimeBaseCounter
 10217  0E0E  00C4               	movwf	low ((NewDCMotor@m| 0+4))
 10218  0E0F  3017               	movlw	high _setTimeBaseCounter
 10219  0E10  00C5               	movwf	(low ((NewDCMotor@m| 0+4))+1)
 10220  0E11                     l4068:
 10221  0E11  300D               	movlw	low _stop
 10222  0E12  00C6               	movwf	low ((NewDCMotor@m| 0+6))
 10223  0E13  3008               	movlw	high _stop
 10224  0E14  00C7               	movwf	(low ((NewDCMotor@m| 0+6))+1)
 10225  0E15                     l4070:
 10226  0E15  301C               	movlw	low _run
 10227  0E16  00C8               	movwf	low ((NewDCMotor@m| 0+8))
 10228  0E17  3008               	movlw	high _run
 10229  0E18  00C9               	movwf	(low ((NewDCMotor@m| 0+8))+1)
 10230  0E19                     l4072:
 10231  0E19  3000               	movlw	0
 10232  0E1A  00CA               	movwf	low ((NewDCMotor@m| 0+10))
 10233  0E1B  3000               	movlw	0
 10234  0E1C  00CB               	movwf	(low ((NewDCMotor@m| 0+10))+1)
 10235  0E1D                     l4074:
 10236  0E1D  3000               	movlw	0
 10237  0E1E  00CC               	movwf	low ((NewDCMotor@m| 0+12))
 10238  0E1F  3000               	movlw	0
 10239  0E20  00CD               	movwf	(low ((NewDCMotor@m| 0+12))+1)
 10240  0E21                     l4076:
 10241  0E21  3000               	movlw	0
 10242  0E22  00CE               	movwf	low ((NewDCMotor@m| 0+14))
 10243  0E23  3000               	movlw	0
 10244  0E24  00CF               	movwf	(low ((NewDCMotor@m| 0+14))+1)
 10245  0E25                     l4078:
 10246  0E25  3072               	movlw	low _tasks
 10247  0E26  00D0               	movwf	low ((NewDCMotor@m| 0+16))
 10248  0E27  3002               	movlw	high _tasks
 10249  0E28  00D1               	movwf	(low ((NewDCMotor@m| 0+16))+1)
 10250  0E29                     l4080:
 10251  0E29  0821               	movf	NewDCMotor@_setDir+1,w
 10252  0E2A  00D3               	movwf	(low ((NewDCMotor@m| 0+18))+1)
 10253  0E2B  0820               	movf	NewDCMotor@_setDir,w
 10254  0E2C  00D2               	movwf	low ((NewDCMotor@m| 0+18))
 10255  0E2D                     l4082:
 10256  0E2D  0823               	movf	NewDCMotor@_setSpeed+1,w
 10257  0E2E  00D5               	movwf	(low ((NewDCMotor@m| 0+20))+1)
 10258  0E2F  0822               	movf	NewDCMotor@_setSpeed,w
 10259  0E30  00D4               	movwf	low ((NewDCMotor@m| 0+20))
 10260  0E31                     l4084:
 10261  0E31  01D7               	clrf	NewDCMotor@m+23
 10262  0E32  0AD7               	incf	NewDCMotor@m+23,f
 10263  0E33                     l4086:
 10264  0E33  01D8               	clrf	NewDCMotor@m+24
 10265  0E34                     l4088:
 10266  0E34  01D9               	clrf	NewDCMotor@m+25
 10267  0E35  01DA               	clrf	NewDCMotor@m+26
 10268  0E36                     l4090:
 10269  0E36  01DF               	clrf	NewDCMotor@m+31
 10270  0E37  0ADF               	incf	NewDCMotor@m+31,f
 10271  0E38                     l4092:
 10272                           
 10273                           ;DCMotor.c: 40:     return m;
 10274  0E38  3040               	movlw	low NewDCMotor@m
 10275  0E39  0086               	movwf	6
 10276  0E3A  3000               	movlw	high NewDCMotor@m
 10277  0E3B  0087               	movwf	7
 10278  0E3C  3020               	movlw	low ?_NewDCMotor
 10279  0E3D  0084               	movwf	4
 10280  0E3E  3000               	movlw	high ?_NewDCMotor
 10281  0E3F  0085               	movwf	5
 10282  0E40  3020               	movlw	32
 10283  0E41  00F0               	movwf	??_NewDCMotor
 10284  0E42                     u2970:
 10285  0E42  0016               	moviw fsr1++
 10286  0E43  001A               	movwi fsr0++
 10287  0E44  0BF0               	decfsz	??_NewDCMotor,f
 10288  0E45  2E42               	goto	u2970
 10289  0E46                     l488:
 10290  0E46  0008               	return
 10291  0E47                     __end_of_NewDCMotor:
 10292                           
 10293                           	psect	text56
 10294  0887                     __ptext56:	
 10295 ;; *************** function _GetTimeSystemInstance *****************
 10296 ;; Defined at:
 10297 ;;		line 36 in file "TimeSystem.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      PTR struct TIMESYSTEM
 10304 ;; Registers used:
 10305 ;;		wreg, status,2, status,0
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        0 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    6
 10318 ;; This function calls:
 10319 ;;		Nothing
 10320 ;; This function is called by:
 10321 ;;		_appTasks
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           
 10326                           ;psect for function _GetTimeSystemInstance
 10327  0887                     _GetTimeSystemInstance:
 10328  0887                     l4054:	
 10329                           ;incstack = 0
 10330                           ; Regs used in _GetTimeSystemInstance: [wreg+status,2+status,0]
 10331                           
 10332                           
 10333                           ;TimeSystem.c: 37:     if (instance.tasks == 0) {
 10334  0887  0022               	movlb	2	; select bank2
 10335  0888  0857               	movf	(low ((_instance| (0+256)+10)))^0,w
 10336  0889  0458               	iorwf	((low ((_instance| (0+256)+10))+1))^0,w
 10337  088A  1D03               	btfss	3,2
 10338  088B  288D               	goto	u2951
 10339  088C  288E               	goto	u2950
 10340  088D                     u2951:
 10341  088D  2892               	goto	l568
 10342  088E                     u2950:
 10343  088E                     l4056:
 10344                           
 10345                           ;TimeSystem.c: 38:         instance.tasks = tasks;
 10346  088E  30F2               	movlw	low _tasks@TimeSystem$F1858
 10347  088F  00D7               	movwf	(low ((_instance| (0+256)+10)))^0
 10348  0890  3008               	movlw	high _tasks@TimeSystem$F1858
 10349  0891  00D8               	movwf	((low ((_instance| (0+256)+10)))^0+1)
 10350  0892                     l568:	
 10351                           ;TimeSystem.c: 39:     }
 10352                           
 10353                           
 10354                           ;TimeSystem.c: 40:     return &instance;
 10355  0892  304D               	movlw	(low (_instance| (0+256)))& (0+255)
 10356  0893                     l569:
 10357  0893  0008               	return
 10358  0894                     __end_of_GetTimeSystemInstance:
 10359                           
 10360                           	psect	text57
 10361  0002                     __ptext57:	
 10362 ;; *************** function _GetCommunicationInstance *****************
 10363 ;; Defined at:
 10364 ;;		line 182 in file "Comm.c"
 10365 ;; Parameters:    Size  Location     Type
 10366 ;;		None
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;		None
 10369 ;; Return value:  Size  Location     Type
 10370 ;;                  1    wreg      PTR struct COMMUNICATION
 10371 ;; Registers used:
 10372 ;;		wreg
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;Total ram usage:        0 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    6
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_appTasks
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           
 10393                           ;psect for function _GetCommunicationInstance
 10394  0002                     _GetCommunicationInstance:
 10395  0002                     l4146:	
 10396                           ;incstack = 0
 10397                           ; Regs used in _GetCommunicationInstance: [wreg]
 10398                           
 10399                           
 10400                           ;Comm.c: 183:     return &instance;
 10401  0002  3063               	movlw	(low (_instance@Comm$F3017| 0))& (0+255)
 10402  0003                     l803:
 10403  0003  0008               	return
 10404  0004                     __end_of_GetCommunicationInstance:
 10405                           
 10406                           	psect	text58
 10407  0A87                     __ptext58:	
 10408 ;; *************** function _SYSTEM_Initialize *****************
 10409 ;; Defined at:
 10410 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;		None
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  1    wreg      void 
 10417 ;; Registers used:
 10418 ;;		wreg, status,2, status,0, pclath, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:        0 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    8
 10431 ;; This function calls:
 10432 ;;		_EPWM1_Initialize
 10433 ;;		_OSCILLATOR_Initialize
 10434 ;;		_PIN_MANAGER_Initialize
 10435 ;;		_PWM3_Initialize
 10436 ;;		_SPI_Initialize
 10437 ;;		_TMR2_Initialize
 10438 ;;		_TMR4_Initialize
 10439 ;;		_TMR6_Initialize
 10440 ;;		_WDT_Initialize
 10441 ;; This function is called by:
 10442 ;;		_main
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function _SYSTEM_Initialize
 10448  0A87                     _SYSTEM_Initialize:
 10449  0A87                     l4300:	
 10450                           ;incstack = 0
 10451                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10452                           
 10453                           
 10454                           ;mcc_generated_files/mcc.c: 53:     SPI_Initialize();
 10455  0A87  3189  2179  318A   	fcall	_SPI_Initialize
 10456                           
 10457                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 10458  0A8A  3189  21F6  318A   	fcall	_PIN_MANAGER_Initialize
 10459                           
 10460                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 10461  0A8D  3188  206E  318A   	fcall	_OSCILLATOR_Initialize
 10462                           
 10463                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 10464  0A90  3197  27CF  318A   	fcall	_WDT_Initialize
 10465                           
 10466                           ;mcc_generated_files/mcc.c: 57:     TMR6_Initialize();
 10467  0A93  3188  2037  318A   	fcall	_TMR6_Initialize
 10468                           
 10469                           ;mcc_generated_files/mcc.c: 58:     EPWM1_Initialize();
 10470  0A96  3189  210F  318A   	fcall	_EPWM1_Initialize
 10471                           
 10472                           ;mcc_generated_files/mcc.c: 59:     TMR4_Initialize();
 10473  0A99  3189  2152  318A   	fcall	_TMR4_Initialize
 10474                           
 10475                           ;mcc_generated_files/mcc.c: 60:     PWM3_Initialize();
 10476  0A9C  3188  202D  318A   	fcall	_PWM3_Initialize
 10477                           
 10478                           ;mcc_generated_files/mcc.c: 61:     TMR2_Initialize();
 10479  0A9F  3188  2014  318A   	fcall	_TMR2_Initialize
 10480  0AA2                     l183:
 10481  0AA2  0008               	return
 10482  0AA3                     __end_of_SYSTEM_Initialize:
 10483                           
 10484                           	psect	text59
 10485  17CF                     __ptext59:	
 10486 ;; *************** function _WDT_Initialize *****************
 10487 ;; Defined at:
 10488 ;;		line 78 in file "mcc_generated_files/mcc.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      void 
 10495 ;; Registers used:
 10496 ;;		wreg
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    6
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_SYSTEM_Initialize
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _WDT_Initialize
 10518  17CF                     _WDT_Initialize:
 10519  17CF                     l2016:	
 10520                           ;incstack = 0
 10521                           ; Regs used in _WDT_Initialize: [wreg]
 10522                           
 10523                           
 10524                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x16;
 10525  17CF  3016               	movlw	22
 10526  17D0  0021               	movlb	1	; select bank1
 10527  17D1  0097               	movwf	23	;volatile
 10528  17D2                     l192:
 10529  17D2  0008               	return
 10530  17D3                     __end_of_WDT_Initialize:
 10531                           
 10532                           	psect	text60
 10533  0837                     __ptext60:	
 10534 ;; *************** function _TMR6_Initialize *****************
 10535 ;; Defined at:
 10536 ;;		line 62 in file "mcc_generated_files/tmr6.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;		None
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;		None
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  1    wreg      void 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;Total ram usage:        0 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    6
 10557 ;; This function calls:
 10558 ;;		Nothing
 10559 ;; This function is called by:
 10560 ;;		_SYSTEM_Initialize
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           
 10565                           ;psect for function _TMR6_Initialize
 10566  0837                     _TMR6_Initialize:
 10567  0837                     l2018:	
 10568                           ;incstack = 0
 10569                           ; Regs used in _TMR6_Initialize: [wreg+status,2]
 10570                           
 10571                           
 10572                           ;mcc_generated_files/tmr6.c: 67:     PR6 = 0x7C;
 10573  0837  307C               	movlw	124
 10574  0838  0028               	movlb	8	; select bank8
 10575  0839  009D               	movwf	29	;volatile
 10576  083A                     l2020:
 10577                           
 10578                           ;mcc_generated_files/tmr6.c: 70:     TMR6 = 0x00;
 10579  083A  019C               	clrf	28	;volatile
 10580  083B                     l2022:
 10581                           
 10582                           ;mcc_generated_files/tmr6.c: 73:     PIR3bits.TMR6IF = 0;
 10583  083B  0020               	movlb	0	; select bank0
 10584  083C  1193               	bcf	19,3	;volatile
 10585  083D                     l2024:
 10586                           
 10587                           ;mcc_generated_files/tmr6.c: 76:     T6CON = 0x07;
 10588  083D  3007               	movlw	7
 10589  083E  0028               	movlb	8	; select bank8
 10590  083F  009E               	movwf	30	;volatile
 10591  0840                     l310:
 10592  0840  0008               	return
 10593  0841                     __end_of_TMR6_Initialize:
 10594                           
 10595                           	psect	text61
 10596  0952                     __ptext61:	
 10597 ;; *************** function _TMR4_Initialize *****************
 10598 ;; Defined at:
 10599 ;;		line 64 in file "mcc_generated_files/tmr4.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      void 
 10606 ;; Registers used:
 10607 ;;		wreg, status,2, status,0, pclath, cstack
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;Total ram usage:        0 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    7
 10620 ;; This function calls:
 10621 ;;		_TMR4_SetInterruptHandler
 10622 ;; This function is called by:
 10623 ;;		_SYSTEM_Initialize
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _TMR4_Initialize
 10629  0952                     _TMR4_Initialize:
 10630  0952                     l4026:	
 10631                           ;incstack = 0
 10632                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10633                           
 10634                           
 10635                           ;mcc_generated_files/tmr4.c: 69:     PR4 = 0x7C;
 10636  0952  307C               	movlw	124
 10637  0953  0028               	movlb	8	; select bank8
 10638  0954  0096               	movwf	22	;volatile
 10639  0955                     l4028:
 10640                           
 10641                           ;mcc_generated_files/tmr4.c: 72:     TMR4 = 0x00;
 10642  0955  0195               	clrf	21	;volatile
 10643  0956                     l4030:
 10644                           
 10645                           ;mcc_generated_files/tmr4.c: 75:     PIR3bits.TMR4IF = 0;
 10646  0956  0020               	movlb	0	; select bank0
 10647  0957  1093               	bcf	19,1	;volatile
 10648  0958                     l4032:
 10649                           
 10650                           ;mcc_generated_files/tmr4.c: 78:     PIE3bits.TMR4IE = 1;
 10651  0958  0021               	movlb	1	; select bank1
 10652  0959  1493               	bsf	19,1	;volatile
 10653  095A                     l4034:
 10654                           
 10655                           ;mcc_generated_files/tmr4.c: 81:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
 10656  095A  30CA               	movlw	low _TMR4_DefaultInterruptHandler
 10657  095B  00F0               	movwf	TMR4_SetInterruptHandler@InterruptHandler
 10658  095C  3017               	movlw	high _TMR4_DefaultInterruptHandler
 10659  095D  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
 10660  095E  3197  27E8  3189   	fcall	_TMR4_SetInterruptHandler
 10661  0961                     l4036:
 10662                           
 10663                           ;mcc_generated_files/tmr4.c: 84:     T4CON = 0x07;
 10664  0961  3007               	movlw	7
 10665  0962  0028               	movlb	8	; select bank8
 10666  0963  0097               	movwf	23	;volatile
 10667  0964                     l69:
 10668  0964  0008               	return
 10669  0965                     __end_of_TMR4_Initialize:
 10670                           
 10671                           	psect	text62
 10672  17E8                     __ptext62:	
 10673 ;; *************** function _TMR4_SetInterruptHandler *****************
 10674 ;; Defined at:
 10675 ;;		line 140 in file "mcc_generated_files/tmr4.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
 10678 ;;		 -> updateMillis(1), TMR4_DefaultInterruptHandler(1), 
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;		None
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      void 
 10683 ;; Registers used:
 10684 ;;		wreg
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;Total ram usage:        2 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    6
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_TMR4_Initialize
 10701 ;;		_appTasks
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           
 10706                           ;psect for function _TMR4_SetInterruptHandler
 10707  17E8                     _TMR4_SetInterruptHandler:
 10708  17E8                     l3834:	
 10709                           ;incstack = 0
 10710                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
 10711                           
 10712                           
 10713                           ;mcc_generated_files/tmr4.c: 141:     TMR4_InterruptHandler = InterruptHandler;
 10714  17E8  0871               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
 10715  17E9  0021               	movlb	1	; select bank1
 10716  17EA  00E0               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
 10717  17EB  0870               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
 10718  17EC  00DF               	movwf	_TMR4_InterruptHandler^(0+128)
 10719  17ED                     l94:
 10720  17ED  0008               	return
 10721  17EE                     __end_of_TMR4_SetInterruptHandler:
 10722                           
 10723                           	psect	text63
 10724  0814                     __ptext63:	
 10725 ;; *************** function _TMR2_Initialize *****************
 10726 ;; Defined at:
 10727 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, status,2
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;Total ram usage:        0 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    6
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_SYSTEM_Initialize
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           
 10756                           ;psect for function _TMR2_Initialize
 10757  0814                     _TMR2_Initialize:
 10758  0814                     l1934:	
 10759                           ;incstack = 0
 10760                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10761                           
 10762                           
 10763                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x7C;
 10764  0814  307C               	movlw	124
 10765  0815  0020               	movlb	0	; select bank0
 10766  0816  009B               	movwf	27	;volatile
 10767  0817                     l1936:
 10768                           
 10769                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 10770  0817  019A               	clrf	26	;volatile
 10771  0818                     l1938:
 10772                           
 10773                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 10774  0818  1091               	bcf	17,1	;volatile
 10775  0819                     l1940:
 10776                           
 10777                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x07;
 10778  0819  3007               	movlw	7
 10779  081A  009C               	movwf	28	;volatile
 10780  081B                     l27:
 10781  081B  0008               	return
 10782  081C                     __end_of_TMR2_Initialize:
 10783                           
 10784                           	psect	text64
 10785  0979                     __ptext64:	
 10786 ;; *************** function _SPI_Initialize *****************
 10787 ;; Defined at:
 10788 ;;		line 62 in file "mcc_generated_files/spi.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;		None
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  1    wreg      void 
 10795 ;; Registers used:
 10796 ;;		wreg, status,2, status,0, pclath, cstack
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;Total ram usage:        0 bytes
 10807 ;; Hardware stack levels used:    1
 10808 ;; Hardware stack levels required when called:    7
 10809 ;; This function calls:
 10810 ;;		_SPI_SetInterruptHandler
 10811 ;; This function is called by:
 10812 ;;		_SYSTEM_Initialize
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           
 10817                           ;psect for function _SPI_Initialize
 10818  0979                     _SPI_Initialize:
 10819  0979                     l4038:	
 10820                           ;incstack = 0
 10821                           ; Regs used in _SPI_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10822                           
 10823                           
 10824                           ;mcc_generated_files/spi.c: 65:     SSP1STAT = 0x40;
 10825  0979  3040               	movlw	64
 10826  097A  0024               	movlb	4	; select bank4
 10827  097B  0094               	movwf	20	;volatile
 10828                           
 10829                           ;mcc_generated_files/spi.c: 66:     SSP1CON1 = 0x05;
 10830  097C  3005               	movlw	5
 10831  097D  0095               	movwf	21	;volatile
 10832  097E                     l4040:
 10833                           
 10834                           ;mcc_generated_files/spi.c: 67:     SSP1ADD = 0x00;
 10835  097E  0192               	clrf	18	;volatile
 10836  097F                     l4042:
 10837                           
 10838                           ;mcc_generated_files/spi.c: 68:     PIE1bits.SSP1IE = 1;
 10839  097F  0021               	movlb	1	; select bank1
 10840  0980  1591               	bsf	17,3	;volatile
 10841  0981                     l4044:
 10842                           
 10843                           ;mcc_generated_files/spi.c: 69:     SPI_SetInterruptHandler(SPI_Isr);
 10844  0981  3065               	movlw	low _SPI_Isr
 10845  0982  00F0               	movwf	SPI_SetInterruptHandler@handler
 10846  0983  3009               	movlw	high _SPI_Isr
 10847  0984  00F1               	movwf	SPI_SetInterruptHandler@handler+1
 10848  0985  3197  27E2  3189   	fcall	_SPI_SetInterruptHandler
 10849  0988                     l4046:
 10850                           
 10851                           ;mcc_generated_files/spi.c: 70:     TRISCbits.TRISC0 = 1;
 10852  0988  0021               	movlb	1	; select bank1
 10853  0989  140E               	bsf	14,0	;volatile
 10854  098A                     l4048:
 10855                           
 10856                           ;mcc_generated_files/spi.c: 71:     SSP1CON1bits.SSPEN = 0;
 10857  098A  0024               	movlb	4	; select bank4
 10858  098B  1295               	bcf	21,5	;volatile
 10859  098C                     l249:
 10860  098C  0008               	return
 10861  098D                     __end_of_SPI_Initialize:
 10862                           
 10863                           	psect	text65
 10864  17E2                     __ptext65:	
 10865 ;; *************** function _SPI_SetInterruptHandler *****************
 10866 ;; Defined at:
 10867 ;;		line 153 in file "mcc_generated_files/spi.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  handler         2    0[COMMON] PTR FTN()void 
 10870 ;;		 -> interrupHandler(1), SPI_Isr(1), 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  1    wreg      void 
 10875 ;; Registers used:
 10876 ;;		wreg
 10877 ;; Tracked objects:
 10878 ;;		On entry : 0/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;Total ram usage:        2 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; Hardware stack levels required when called:    6
 10889 ;; This function calls:
 10890 ;;		Nothing
 10891 ;; This function is called by:
 10892 ;;		_SPI_Initialize
 10893 ;;		_espi_setInterrupHandler
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           
 10898                           ;psect for function _SPI_SetInterruptHandler
 10899  17E2                     _SPI_SetInterruptHandler:
 10900  17E2                     l3836:	
 10901                           ;incstack = 0
 10902                           ; Regs used in _SPI_SetInterruptHandler: [wreg]
 10903                           
 10904                           
 10905                           ;mcc_generated_files/spi.c: 153: void SPI_SetInterruptHandler(spiInterruptHandler_t hand
      +                          ler);mcc_generated_files/spi.c: 154: {;mcc_generated_files/spi.c: 155:     MSSP_Interrup
      +                          tHandler = handler;
 10906  17E2  0871               	movf	SPI_SetInterruptHandler@handler+1,w
 10907  17E3  0021               	movlb	1	; select bank1
 10908  17E4  00EE               	movwf	(_MSSP_InterruptHandler+1)^(0+128)
 10909  17E5  0870               	movf	SPI_SetInterruptHandler@handler,w
 10910  17E6  00ED               	movwf	_MSSP_InterruptHandler^(0+128)
 10911  17E7                     l297:
 10912  17E7  0008               	return
 10913  17E8                     __end_of_SPI_SetInterruptHandler:
 10914                           
 10915                           	psect	text66
 10916  082D                     __ptext66:	
 10917 ;; *************** function _PWM3_Initialize *****************
 10918 ;; Defined at:
 10919 ;;		line 64 in file "mcc_generated_files/pwm3.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      void 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;Total ram usage:        0 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    6
 10940 ;; This function calls:
 10941 ;;		Nothing
 10942 ;; This function is called by:
 10943 ;;		_SYSTEM_Initialize
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           
 10948                           ;psect for function _PWM3_Initialize
 10949  082D                     _PWM3_Initialize:
 10950  082D                     l1928:	
 10951                           ;incstack = 0
 10952                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
 10953                           
 10954                           
 10955                           ;mcc_generated_files/pwm3.c: 69:  CCP3CON = 0x3C;
 10956  082D  303C               	movlw	60
 10957  082E  0026               	movlb	6	; select bank6
 10958  082F  0093               	movwf	19	;volatile
 10959                           
 10960                           ;mcc_generated_files/pwm3.c: 72:  CCPR3L = 0x7C;
 10961  0830  307C               	movlw	124
 10962  0831  0091               	movwf	17	;volatile
 10963  0832                     l1930:
 10964                           
 10965                           ;mcc_generated_files/pwm3.c: 75:  CCPR3H = 0x00;
 10966  0832  0192               	clrf	18	;volatile
 10967  0833                     l1932:
 10968                           
 10969                           ;mcc_generated_files/pwm3.c: 78:  CCPTMRSbits.C3TSEL = 0x0;
 10970  0833  30CF               	movlw	-49
 10971  0834  0025               	movlb	5	; select bank5
 10972  0835  059E               	andwf	30,f	;volatile
 10973  0836                     l11:
 10974  0836  0008               	return
 10975  0837                     __end_of_PWM3_Initialize:
 10976                           
 10977                           	psect	text67
 10978  09F6                     __ptext67:	
 10979 ;; *************** function _PIN_MANAGER_Initialize *****************
 10980 ;; Defined at:
 10981 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		wreg, status,2
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    6
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_SYSTEM_Initialize
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function _PIN_MANAGER_Initialize
 11011  09F6                     _PIN_MANAGER_Initialize:
 11012  09F6                     l1990:	
 11013                           ;incstack = 0
 11014                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11015                           
 11016                           
 11017                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x01;
 11018  09F6  3001               	movlw	1
 11019  09F7  0022               	movlb	2	; select bank2
 11020  09F8  008C               	movwf	12	;volatile
 11021  09F9                     l1992:
 11022                           
 11023                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
 11024  09F9  018E               	clrf	14	;volatile
 11025  09FA                     l1994:
 11026                           
 11027                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x3A;
 11028  09FA  303A               	movlw	58
 11029  09FB  0021               	movlb	1	; select bank1
 11030  09FC  008C               	movwf	12	;volatile
 11031  09FD                     l1996:
 11032                           
 11033                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0B;
 11034  09FD  300B               	movlw	11
 11035  09FE  008E               	movwf	14	;volatile
 11036  09FF                     l1998:
 11037                           
 11038                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x00;
 11039  09FF  0023               	movlb	3	; select bank3
 11040  0A00  018E               	clrf	14	;volatile
 11041                           
 11042                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x12;
 11043  0A01  3012               	movlw	18
 11044  0A02  008C               	movwf	12	;volatile
 11045  0A03                     l2000:
 11046                           
 11047                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 11048  0A03  0024               	movlb	4	; select bank4
 11049  0A04  018C               	clrf	12	;volatile
 11050  0A05                     l2002:
 11051                           
 11052                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 11053  0A05  018E               	clrf	14	;volatile
 11054  0A06                     l2004:
 11055                           
 11056                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 0;
 11057  0A06  0021               	movlb	1	; select bank1
 11058  0A07  1395               	bcf	21,7	;volatile
 11059  0A08                     l2006:
 11060                           
 11061                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
 11062  0A08  0022               	movlb	2	; select bank2
 11063  0A09  019D               	clrf	29	;volatile
 11064  0A0A                     l2008:
 11065                           
 11066                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x00;
 11067  0A0A  019E               	clrf	30	;volatile
 11068  0A0B                     l217:
 11069  0A0B  0008               	return
 11070  0A0C                     __end_of_PIN_MANAGER_Initialize:
 11071                           
 11072                           	psect	text68
 11073  086E                     __ptext68:	
 11074 ;; *************** function _OSCILLATOR_Initialize *****************
 11075 ;; Defined at:
 11076 ;;		line 64 in file "mcc_generated_files/mcc.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;		None
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      void 
 11083 ;; Registers used:
 11084 ;;		wreg, status,2
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;Total ram usage:        0 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    6
 11097 ;; This function calls:
 11098 ;;		Nothing
 11099 ;; This function is called by:
 11100 ;;		_SYSTEM_Initialize
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _OSCILLATOR_Initialize
 11106  086E                     _OSCILLATOR_Initialize:
 11107  086E                     l2010:	
 11108                           ;incstack = 0
 11109                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11110                           
 11111                           
 11112                           ;mcc_generated_files/mcc.c: 67:     OSCCON = 0x38;
 11113  086E  3038               	movlw	56
 11114  086F  0021               	movlb	1	; select bank1
 11115  0870  0099               	movwf	25	;volatile
 11116  0871                     l2012:
 11117                           
 11118                           ;mcc_generated_files/mcc.c: 69:     OSCTUNE = 0x00;
 11119  0871  0198               	clrf	24	;volatile
 11120  0872                     l2014:
 11121                           
 11122                           ;mcc_generated_files/mcc.c: 71:     BORCON = 0x00;
 11123  0872  0022               	movlb	2	; select bank2
 11124  0873  0196               	clrf	22	;volatile
 11125  0874                     l186:	
 11126                           ;mcc_generated_files/mcc.c: 74:     {;mcc_generated_files/mcc.c: 75:     }
 11127                           
 11128                           
 11129                           ;mcc_generated_files/mcc.c: 73:     while(PLLR == 0)
 11130  0874  0021               	movlb	1	; select bank1
 11131  0875  1F1A               	btfss	26,6	;volatile
 11132  0876  2878               	goto	u611
 11133  0877  2879               	goto	u610
 11134  0878                     u611:
 11135  0878  2874               	goto	l186
 11136  0879                     u610:
 11137  0879                     l189:
 11138  0879  0008               	return
 11139  087A                     __end_of_OSCILLATOR_Initialize:
 11140                           
 11141                           	psect	text69
 11142  090F                     __ptext69:	
 11143 ;; *************** function _EPWM1_Initialize *****************
 11144 ;; Defined at:
 11145 ;;		line 64 in file "mcc_generated_files/epwm1.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;		None
 11148 ;; Auto vars:     Size  Location     Type
 11149 ;;		None
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  1    wreg      void 
 11152 ;; Registers used:
 11153 ;;		wreg, status,2, status,0
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;Total ram usage:        0 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:    6
 11166 ;; This function calls:
 11167 ;;		Nothing
 11168 ;; This function is called by:
 11169 ;;		_SYSTEM_Initialize
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _EPWM1_Initialize
 11175  090F                     _EPWM1_Initialize:
 11176  090F                     l1958:	
 11177                           ;incstack = 0
 11178                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
 11179                           
 11180                           
 11181                           ;mcc_generated_files/epwm1.c: 69:  CCP1CON = 0x3C;
 11182  090F  303C               	movlw	60
 11183  0910  0025               	movlb	5	; select bank5
 11184  0911  0093               	movwf	19	;volatile
 11185  0912                     l1960:
 11186                           
 11187                           ;mcc_generated_files/epwm1.c: 72:  ECCP1AS = 0x00;
 11188  0912  0195               	clrf	21	;volatile
 11189  0913                     l1962:
 11190                           
 11191                           ;mcc_generated_files/epwm1.c: 75:  PWM1CON = 0x80;
 11192  0913  3080               	movlw	128
 11193  0914  0094               	movwf	20	;volatile
 11194  0915                     l1964:
 11195                           
 11196                           ;mcc_generated_files/epwm1.c: 78:  PSTR1CON = 0x02;
 11197  0915  3002               	movlw	2
 11198  0916  0096               	movwf	22	;volatile
 11199  0917                     l1966:
 11200                           
 11201                           ;mcc_generated_files/epwm1.c: 81:  CCPR1H = 0x00;
 11202  0917  0192               	clrf	18	;volatile
 11203                           
 11204                           ;mcc_generated_files/epwm1.c: 84:  CCPR1L = 0x7C;
 11205  0918  307C               	movlw	124
 11206  0919  0091               	movwf	17	;volatile
 11207  091A                     l1968:
 11208                           
 11209                           ;mcc_generated_files/epwm1.c: 87:  CCPTMRSbits.C1TSEL = 0x2;
 11210  091A  081E               	movf	30,w	;volatile
 11211  091B  39FC               	andlw	-4
 11212  091C  3802               	iorlw	2
 11213  091D  009E               	movwf	30	;volatile
 11214  091E                     l114:
 11215  091E  0008               	return
 11216  091F                     __end_of_EPWM1_Initialize:
 11217                           
 11218                           	psect	intentry
 11219  0004                     __pintentry:	
 11220 ;; *************** function _INTERRUPT_InterruptManager *****************
 11221 ;; Defined at:
 11222 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;		None
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;		None
 11227 ;; Return value:  Size  Location     Type
 11228 ;;                  1    wreg      void 
 11229 ;; Registers used:
 11230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;Total ram usage:        0 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    5
 11243 ;; This function calls:
 11244 ;;		_SPI_Isr
 11245 ;;		_TMR4_ISR
 11246 ;; This function is called by:
 11247 ;;		Interrupt level 1
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251  0004                     _INTERRUPT_InterruptManager:
 11252                           
 11253                           ;incstack = 0
 11254  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11255                           
 11256                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11257  0005  3180               	pagesel	$
 11258  0006                     i1l3466:
 11259                           
 11260                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 11261  0006  1F0B               	btfss	11,6	;volatile
 11262  0007  2809               	goto	u225_21
 11263  0008  280A               	goto	u225_20
 11264  0009                     u225_21:
 11265  0009  2831               	goto	i1l150
 11266  000A                     u225_20:
 11267  000A                     i1l3468:
 11268                           
 11269                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 11270  000A  0021               	movlb	1	; select bank1
 11271  000B  1D92               	btfss	18,3	;volatile
 11272  000C  280E               	goto	u226_21
 11273  000D  280F               	goto	u226_20
 11274  000E                     u226_21:
 11275  000E  2818               	goto	i1l143
 11276  000F                     u226_20:
 11277  000F                     i1l3470:
 11278  000F  0020               	movlb	0	; select bank0
 11279  0010  1D92               	btfss	18,3	;volatile
 11280  0011  2813               	goto	u227_21
 11281  0012  2814               	goto	u227_20
 11282  0013                     u227_21:
 11283  0013  2818               	goto	i1l143
 11284  0014                     u227_20:
 11285  0014                     i1l3472:
 11286                           
 11287                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             SPI_Isr();
 11288  0014  3189  2165  3180   	fcall	_SPI_Isr
 11289                           
 11290                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 11291  0017  2831               	goto	i1l150
 11292  0018                     i1l143:	
 11293                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 11294                           
 11295  0018  0021               	movlb	1	; select bank1
 11296  0019  1D91               	btfss	17,3	;volatile
 11297  001A  281C               	goto	u228_21
 11298  001B  281D               	goto	u228_20
 11299  001C                     u228_21:
 11300  001C  2823               	goto	i1l145
 11301  001D                     u228_20:
 11302  001D                     i1l3474:
 11303  001D  0020               	movlb	0	; select bank0
 11304  001E  1D91               	btfss	17,3	;volatile
 11305  001F  2821               	goto	u229_21
 11306  0020  2822               	goto	u229_20
 11307  0021                     u229_21:
 11308  0021  2823               	goto	i1l145
 11309  0022                     u229_20:
 11310  0022  2814               	goto	i1l3472
 11311  0023                     i1l145:	
 11312                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE3bits.TMR4IE == 1 && PI
      +                          R3bits.TMR4IF == 1)
 11313                           
 11314  0023  0021               	movlb	1	; select bank1
 11315  0024  1C93               	btfss	19,1	;volatile
 11316  0025  2827               	goto	u230_21
 11317  0026  2828               	goto	u230_20
 11318  0027                     u230_21:
 11319  0027  2831               	goto	i1l144
 11320  0028                     u230_20:
 11321  0028                     i1l3478:
 11322  0028  0020               	movlb	0	; select bank0
 11323  0029  1C93               	btfss	19,1	;volatile
 11324  002A  282C               	goto	u231_21
 11325  002B  282D               	goto	u231_20
 11326  002C                     u231_21:
 11327  002C  2831               	goto	i1l144
 11328  002D                     u231_20:
 11329  002D                     i1l3480:
 11330                           
 11331                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR4_ISR();
 11332  002D  3197  27DC  3180   	fcall	_TMR4_ISR
 11333                           
 11334                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11335  0030  2831               	goto	i1l150
 11336  0031                     i1l144:
 11337  0031                     i1l150:	
 11338                           ;mcc_generated_files/interrupt_manager.c: 73:     }
 11339                           
 11340  0031  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11341  0032  0009               	retfie
 11342  0033                     __end_of_INTERRUPT_InterruptManager:
 11343                           
 11344                           	psect	text71
 11345  17DC                     __ptext71:	
 11346 ;; *************** function _TMR4_ISR *****************
 11347 ;; Defined at:
 11348 ;;		line 119 in file "mcc_generated_files/tmr4.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;		None
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;		None
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2, status,0, pclath, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;Total ram usage:        0 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    2
 11369 ;; This function calls:
 11370 ;;		_TMR4_CallBack
 11371 ;; This function is called by:
 11372 ;;		_INTERRUPT_InterruptManager
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           
 11377                           ;psect for function _TMR4_ISR
 11378  17DC                     _TMR4_ISR:
 11379  17DC                     i1l3390:	
 11380                           ;incstack = 0
 11381                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11382                           
 11383                           
 11384                           ;mcc_generated_files/tmr4.c: 123:     PIR3bits.TMR4IF = 0;
 11385  17DC  0020               	movlb	0	; select bank0
 11386  17DD  1093               	bcf	19,1	;volatile
 11387  17DE                     i1l3392:
 11388                           
 11389                           ;mcc_generated_files/tmr4.c: 127:     TMR4_CallBack();
 11390  17DE  3188  207A  3197   	fcall	_TMR4_CallBack
 11391  17E1                     i1l87:
 11392  17E1  0008               	return
 11393  17E2                     __end_of_TMR4_ISR:
 11394                           
 11395                           	psect	text72
 11396  087A                     __ptext72:	
 11397 ;; *************** function _TMR4_CallBack *****************
 11398 ;; Defined at:
 11399 ;;		line 130 in file "mcc_generated_files/tmr4.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;		None
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, status,2, status,0, pclath, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        0 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    1
 11420 ;; This function calls:
 11421 ;;		Absolute function
 11422 ;;		_TMR4_DefaultInterruptHandler
 11423 ;;		_updateMillis
 11424 ;; This function is called by:
 11425 ;;		_TMR4_ISR
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           
 11430                           ;psect for function _TMR4_CallBack
 11431  087A                     _TMR4_CallBack:
 11432  087A                     i1l3116:	
 11433                           ;incstack = 0
 11434                           ; Regs used in _TMR4_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11435                           
 11436                           
 11437                           ;mcc_generated_files/tmr4.c: 134:     if(TMR4_InterruptHandler)
 11438  087A  0021               	movlb	1	; select bank1
 11439  087B  085F               	movf	_TMR4_InterruptHandler^(0+128),w
 11440  087C  0460               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 11441  087D  1903               	btfsc	3,2
 11442  087E  2880               	goto	u188_21
 11443  087F  2881               	goto	u188_20
 11444  0880                     u188_21:
 11445  0880  2886               	goto	i1l91
 11446  0881                     u188_20:
 11447  0881                     i1l3118:
 11448                           
 11449                           ;mcc_generated_files/tmr4.c: 135:     {;mcc_generated_files/tmr4.c: 136:         TMR4_In
      +                          terruptHandler();
 11450  0881  0860               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 11451  0882  008A               	movwf	10
 11452  0883  085F               	movf	_TMR4_InterruptHandler^(0+128),w
 11453  0884  000A               	callw
 11454  0885  3188               	pagesel	$
 11455  0886                     i1l91:
 11456  0886  0008               	return
 11457  0887                     __end_of_TMR4_CallBack:
 11458                           
 11459                           	psect	text73
 11460  17CA                     __ptext73:	
 11461 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 11462 ;; Defined at:
 11463 ;;		line 144 in file "mcc_generated_files/tmr4.c"
 11464 ;; Parameters:    Size  Location     Type
 11465 ;;		None
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;		None
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  1    wreg      void 
 11470 ;; Registers used:
 11471 ;;		None
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;Total ram usage:        0 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_TMR4_Initialize
 11487 ;;		_TMR4_CallBack
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           
 11492                           ;psect for function _TMR4_DefaultInterruptHandler
 11493  17CA                     _TMR4_DefaultInterruptHandler:
 11494  17CA                     i1l97:	
 11495                           ;incstack = 0
 11496                           ; Regs used in _TMR4_DefaultInterruptHandler: []
 11497                           
 11498  17CA  0008               	return
 11499  17CB                     __end_of_TMR4_DefaultInterruptHandler:
 11500                           
 11501                           	psect	text74
 11502  0862                     __ptext74:	
 11503 ;; *************** function _updateMillis *****************
 11504 ;; Defined at:
 11505 ;;		line 47 in file "TimeSystem.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;		None
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  1    wreg      void 
 11512 ;; Registers used:
 11513 ;;		wreg, status,2, status,0
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        0 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_TMR4_CallBack
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           
 11533                           ;psect for function _updateMillis
 11534  0862                     _updateMillis:
 11535  0862                     i1l2936:	
 11536                           ;incstack = 0
 11537                           ; Regs used in _updateMillis: [wreg+status,2+status,0]
 11538                           
 11539                           
 11540                           ;TimeSystem.c: 48:     instance.currentTimeMillis++;
 11541  0862  3001               	movlw	1
 11542  0863  0022               	movlb	2	; select bank2
 11543  0864  07CD               	addwf	_instance^(0+256),f
 11544  0865  3000               	movlw	0
 11545  0866  3DCE               	addwfc	(_instance+1)^(0+256),f
 11546  0867  3DCF               	addwfc	(_instance+2)^(0+256),f
 11547  0868  3DD0               	addwfc	(_instance+3)^(0+256),f
 11548  0869  3DD1               	addwfc	(_instance+4)^(0+256),f
 11549  086A  3DD2               	addwfc	(_instance+5)^(0+256),f
 11550  086B  3DD3               	addwfc	(_instance+6)^(0+256),f
 11551  086C  3DD4               	addwfc	(_instance+7)^(0+256),f
 11552  086D                     i1l572:
 11553  086D  0008               	return
 11554  086E                     __end_of_updateMillis:
 11555                           
 11556                           	psect	text75
 11557  0900                     __ptext75:	
 11558 ;; *************** function _dataReceived *****************
 11559 ;; Defined at:
 11560 ;;		line 36 in file "app.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;Total ram usage:        1 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    2
 11581 ;; This function calls:
 11582 ;;		Absolute function
 11583 ;;		_exchangeDone
 11584 ;; This function is called by:
 11585 ;;		_appTasks
 11586 ;;		_interrupHandler
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           
 11591                           ;psect for function _dataReceived
 11592  0900                     _dataReceived:
 11593  0900                     i1l2742:	
 11594                           ;incstack = 0
 11595                           ; Regs used in _dataReceived: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11596                           
 11597                           
 11598                           ;app.c: 37:     spi.exchangeDone(&spi);
 11599  0900  3020               	movlw	(low (_spi| (0+512)))& (0+255)
 11600  0901  00F5               	movwf	??_dataReceived
 11601  0902  0875               	movf	??_dataReceived,w
 11602  0903  00F1               	movwf	exchangeDone@this
 11603  0904  3012               	movlw	18
 11604  0905  3E20               	addlw	(low (_spi| (0+512)))& (0+255)
 11605  0906  0086               	movwf	6
 11606  0907  3002               	movlw	2	; select bank4/5
 11607  0908  0087               	movwf	7
 11608  0909  3F41               	moviw [1]fsr1
 11609  090A  008A               	movwf	10
 11610  090B  3F40               	moviw [0]fsr1
 11611  090C  000A               	callw
 11612  090D  3189               	pagesel	$
 11613  090E                     i1l414:
 11614  090E  0008               	return
 11615  090F                     __end_of_dataReceived:
 11616                           
 11617                           	psect	text76
 11618  0488                     __ptext76:	
 11619 ;; *************** function _exchangeDone *****************
 11620 ;; Defined at:
 11621 ;;		line 91 in file "SpiCommunication.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;  this            1    1[COMMON] PTR struct SPI
 11624 ;;		 -> spi(57), 
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;		None
 11627 ;; Return value:  Size  Location     Type
 11628 ;;                  1    wreg      void 
 11629 ;; Registers used:
 11630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11636 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;Total ram usage:        4 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    1
 11643 ;; This function calls:
 11644 ;;		Absolute function
 11645 ;;		_espi_rd
 11646 ;;		_espi_wr1
 11647 ;; This function is called by:
 11648 ;;		_NewSpiDriver
 11649 ;;		_dataReceived
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           
 11654                           ;psect for function _exchangeDone
 11655  0488                     _exchangeDone:
 11656  0488                     i1l2688:	
 11657                           ;incstack = 0
 11658                           ; Regs used in _exchangeDone: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11659                           
 11660                           
 11661                           ;SpiCommunication.c: 92:     if (this->charsToReceive > 0) {
 11662  0488  0871               	movf	exchangeDone@this,w
 11663  0489  3E2D               	addlw	45
 11664  048A  0086               	movwf	6
 11665  048B  3002               	movlw	2	; select bank4/5
 11666  048C  0087               	movwf	7
 11667  048D  3F40               	moviw [0]fsr1
 11668  048E  00F2               	movwf	??_exchangeDone
 11669  048F  3F41               	moviw [1]fsr1
 11670  0490  00F3               	movwf	??_exchangeDone+1
 11671  0491  0873               	movf	??_exchangeDone+1,w
 11672  0492  3A80               	xorlw	128
 11673  0493  00F4               	movwf	??_exchangeDone+2
 11674  0494  3080               	movlw	128
 11675  0495  0274               	subwf	??_exchangeDone+2,w
 11676  0496  1D03               	skipz
 11677  0497  2C9A               	goto	u130_25
 11678  0498  3001               	movlw	1
 11679  0499  0272               	subwf	??_exchangeDone,w
 11680  049A                     u130_25:
 11681  049A  1C03               	skipc
 11682  049B  2C9D               	goto	u130_21
 11683  049C  2C9E               	goto	u130_20
 11684  049D                     u130_21:
 11685  049D  2CE0               	goto	i1l2700
 11686  049E                     u130_20:
 11687  049E                     i1l2690:
 11688                           
 11689                           ;SpiCommunication.c: 93:         *this->dataToRead++ = this->readByte();
 11690  049E  0871               	movf	exchangeDone@this,w
 11691  049F  3E25               	addlw	37
 11692  04A0  0086               	movwf	6
 11693  04A1  3002               	movlw	2	; select bank4/5
 11694  04A2  0087               	movwf	7
 11695  04A3  3F41               	moviw [1]fsr1
 11696  04A4  008A               	movwf	10
 11697  04A5  3F40               	moviw [0]fsr1
 11698  04A6  000A               	callw
 11699  04A7  3184               	pagesel	$
 11700  04A8  00F2               	movwf	??_exchangeDone
 11701  04A9  0871               	movf	exchangeDone@this,w
 11702  04AA  3E36               	addlw	54
 11703  04AB  0086               	movwf	6
 11704  04AC  3002               	movlw	2	; select bank4/5
 11705  04AD  0087               	movwf	7
 11706  04AE  0801               	movf	1,w
 11707  04AF  0086               	movwf	6
 11708  04B0  0187               	clrf	7
 11709  04B1  0872               	movf	??_exchangeDone,w
 11710  04B2  0081               	movwf	1
 11711  04B3                     i1l2692:
 11712  04B3  3001               	movlw	1
 11713  04B4  00F2               	movwf	??_exchangeDone
 11714  04B5  0871               	movf	exchangeDone@this,w
 11715  04B6  3E36               	addlw	54
 11716  04B7  0086               	movwf	6
 11717  04B8  3002               	movlw	2	; select bank4/5
 11718  04B9  0087               	movwf	7
 11719  04BA  0872               	movf	??_exchangeDone,w
 11720  04BB  0781               	addwf	1,f
 11721  04BC                     i1l2694:
 11722                           
 11723                           ;SpiCommunication.c: 94:         this->charsToReceive--;
 11724  04BC  0871               	movf	exchangeDone@this,w
 11725  04BD  3E2D               	addlw	45
 11726  04BE  0086               	movwf	6
 11727  04BF  3002               	movlw	2	; select bank4/5
 11728  04C0  0087               	movwf	7
 11729  04C1  30FF               	movlw	255
 11730  04C2  0781               	addwf	1,f
 11731  04C3  3141               	addfsr 1,1
 11732  04C4  30FF               	movlw	255
 11733  04C5  3D81               	addwfc	1,f
 11734  04C6  317F               	addfsr 1,-1
 11735  04C7                     i1l2696:
 11736                           
 11737                           ;SpiCommunication.c: 95:         if (this->charsToReceive == 0) {
 11738  04C7  0871               	movf	exchangeDone@this,w
 11739  04C8  3E2D               	addlw	45
 11740  04C9  0086               	movwf	6
 11741  04CA  3002               	movlw	2	; select bank4/5
 11742  04CB  0087               	movwf	7
 11743  04CC  0016               	moviw fsr1++
 11744  04CD  0401               	iorwf	1,w
 11745  04CE  1D03               	btfss	3,2
 11746  04CF  2CD1               	goto	u131_21
 11747  04D0  2CD2               	goto	u131_20
 11748  04D1                     u131_21:
 11749  04D1  2CF2               	goto	i1l2702
 11750  04D2                     u131_20:
 11751  04D2                     i1l2698:
 11752                           
 11753                           ;SpiCommunication.c: 96:             this->state.b.receiveComplete = 1;
 11754  04D2  0871               	movf	exchangeDone@this,w
 11755  04D3  3E31               	addlw	49
 11756  04D4  0086               	movwf	6
 11757  04D5  3002               	movlw	2	; select bank4/5
 11758  04D6  0087               	movwf	7
 11759  04D7  1681               	bsf	1,5
 11760                           
 11761                           ;SpiCommunication.c: 97:             this->newData = 1;
 11762  04D8  0871               	movf	exchangeDone@this,w
 11763  04D9  3E38               	addlw	56
 11764  04DA  0086               	movwf	6
 11765  04DB  3002               	movlw	2	; select bank4/5
 11766  04DC  0087               	movwf	7
 11767  04DD  0181               	clrf	1
 11768  04DE  0A81               	incf	1,f
 11769  04DF  2CF2               	goto	i1l2702
 11770  04E0                     i1l2700:
 11771                           
 11772                           ;SpiCommunication.c: 100:         this->rChar = this->readByte();
 11773  04E0  0871               	movf	exchangeDone@this,w
 11774  04E1  3E25               	addlw	37
 11775  04E2  0086               	movwf	6
 11776  04E3  3002               	movlw	2	; select bank4/5
 11777  04E4  0087               	movwf	7
 11778  04E5  3F41               	moviw [1]fsr1
 11779  04E6  008A               	movwf	10
 11780  04E7  3F40               	moviw [0]fsr1
 11781  04E8  000A               	callw
 11782  04E9  3184               	pagesel	$
 11783  04EA  00F2               	movwf	??_exchangeDone
 11784  04EB  0871               	movf	exchangeDone@this,w
 11785  04EC  3E1E               	addlw	30
 11786  04ED  0086               	movwf	6
 11787  04EE  3002               	movlw	2	; select bank4/5
 11788  04EF  0087               	movwf	7
 11789  04F0  0872               	movf	??_exchangeDone,w
 11790  04F1  0081               	movwf	1
 11791  04F2                     i1l2702:
 11792                           
 11793                           ;SpiCommunication.c: 101:     if (this->charsToSend > 0) {
 11794  04F2  0871               	movf	exchangeDone@this,w
 11795  04F3  3E2F               	addlw	47
 11796  04F4  0086               	movwf	6
 11797  04F5  3002               	movlw	2	; select bank4/5
 11798  04F6  0087               	movwf	7
 11799  04F7  3F40               	moviw [0]fsr1
 11800  04F8  00F2               	movwf	??_exchangeDone
 11801  04F9  3F41               	moviw [1]fsr1
 11802  04FA  00F3               	movwf	??_exchangeDone+1
 11803  04FB  0873               	movf	??_exchangeDone+1,w
 11804  04FC  3A80               	xorlw	128
 11805  04FD  00F4               	movwf	??_exchangeDone+2
 11806  04FE  3080               	movlw	128
 11807  04FF  0274               	subwf	??_exchangeDone+2,w
 11808  0500  1D03               	skipz
 11809  0501  2D04               	goto	u132_25
 11810  0502  3001               	movlw	1
 11811  0503  0272               	subwf	??_exchangeDone,w
 11812  0504                     u132_25:
 11813  0504  1C03               	skipc
 11814  0505  2D07               	goto	u132_21
 11815  0506  2D08               	goto	u132_20
 11816  0507                     u132_21:
 11817  0507  2D3C               	goto	i1l2712
 11818  0508                     u132_20:
 11819  0508                     i1l2704:
 11820                           
 11821                           ;SpiCommunication.c: 102:         this->writeByte_1(*this->dataToWrite++);
 11822  0508  0871               	movf	exchangeDone@this,w
 11823  0509  3E37               	addlw	55
 11824  050A  0086               	movwf	6
 11825  050B  3002               	movlw	2	; select bank4/5
 11826  050C  0087               	movwf	7
 11827  050D  3F40               	moviw [0]fsr1
 11828  050E  0084               	movwf	4
 11829  050F  0185               	clrf	5
 11830  0510  0A81               	incf	1,f
 11831  0511  0800               	movf	0,w
 11832  0512  00F2               	movwf	??_exchangeDone
 11833  0513  0872               	movf	??_exchangeDone,w
 11834  0514  00F0               	movwf	espi_wr1@byte
 11835  0515  0871               	movf	exchangeDone@this,w
 11836  0516  3E27               	addlw	39
 11837  0517  0086               	movwf	6
 11838  0518  3002               	movlw	2	; select bank4/5
 11839  0519  0087               	movwf	7
 11840  051A  3F41               	moviw [1]fsr1
 11841  051B  008A               	movwf	10
 11842  051C  3F40               	moviw [0]fsr1
 11843  051D  000A               	callw
 11844  051E  3184               	pagesel	$
 11845  051F                     i1l2706:
 11846                           
 11847                           ;SpiCommunication.c: 103:         this->charsToSend--;
 11848  051F  0871               	movf	exchangeDone@this,w
 11849  0520  3E2F               	addlw	47
 11850  0521  0086               	movwf	6
 11851  0522  3002               	movlw	2	; select bank4/5
 11852  0523  0087               	movwf	7
 11853  0524  30FF               	movlw	255
 11854  0525  0781               	addwf	1,f
 11855  0526  3141               	addfsr 1,1
 11856  0527  30FF               	movlw	255
 11857  0528  3D81               	addwfc	1,f
 11858  0529  317F               	addfsr 1,-1
 11859  052A                     i1l2708:
 11860                           
 11861                           ;SpiCommunication.c: 104:         if (this->charsToSend == 0)
 11862  052A  0871               	movf	exchangeDone@this,w
 11863  052B  3E2F               	addlw	47
 11864  052C  0086               	movwf	6
 11865  052D  3002               	movlw	2	; select bank4/5
 11866  052E  0087               	movwf	7
 11867  052F  0016               	moviw fsr1++
 11868  0530  0401               	iorwf	1,w
 11869  0531  1D03               	btfss	3,2
 11870  0532  2D34               	goto	u133_21
 11871  0533  2D35               	goto	u133_20
 11872  0534                     u133_21:
 11873  0534  2D4A               	goto	i1l666
 11874  0535                     u133_20:
 11875  0535                     i1l2710:
 11876                           
 11877                           ;SpiCommunication.c: 105:             this->state.b.sendComplete = 1;
 11878  0535  0871               	movf	exchangeDone@this,w
 11879  0536  3E31               	addlw	49
 11880  0537  0086               	movwf	6
 11881  0538  3002               	movlw	2	; select bank4/5
 11882  0539  0087               	movwf	7
 11883  053A  1601               	bsf	1,4
 11884  053B  2D4A               	goto	i1l666
 11885  053C                     i1l2712:
 11886                           
 11887                           ;SpiCommunication.c: 107:         this->writeByte_1(0xFF);
 11888  053C  30FF               	movlw	255
 11889  053D  00F2               	movwf	??_exchangeDone
 11890  053E  0872               	movf	??_exchangeDone,w
 11891  053F  00F0               	movwf	espi_wr1@byte
 11892  0540  0871               	movf	exchangeDone@this,w
 11893  0541  3E27               	addlw	39
 11894  0542  0086               	movwf	6
 11895  0543  3002               	movlw	2	; select bank4/5
 11896  0544  0087               	movwf	7
 11897  0545  3F41               	moviw [1]fsr1
 11898  0546  008A               	movwf	10
 11899  0547  3F40               	moviw [0]fsr1
 11900  0548  000A               	callw
 11901  0549  3184               	pagesel	$
 11902  054A                     i1l666:
 11903  054A  0008               	return
 11904  054B                     __end_of_exchangeDone:
 11905                           
 11906                           	psect	text77
 11907  17CB                     __ptext77:	
 11908 ;; *************** function _espi_wr1 *****************
 11909 ;; Defined at:
 11910 ;;		line 26 in file "enhaced_spi.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;  byte            1    0[COMMON] unsigned char 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  1    wreg      void 
 11917 ;; Registers used:
 11918 ;;		wreg
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11924 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;Total ram usage:        1 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; This function calls:
 11931 ;;		Nothing
 11932 ;; This function is called by:
 11933 ;;		_appTasks
 11934 ;;		_exchangeDone
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _espi_wr1
 11940  17CB                     _espi_wr1:
 11941  17CB                     i1l2652:	
 11942                           ;incstack = 0
 11943                           ; Regs used in _espi_wr1: [wreg]
 11944                           
 11945                           
 11946                           ;enhaced_spi.c: 27:     SSP1BUF = byte;
 11947  17CB  0870               	movf	espi_wr1@byte,w
 11948  17CC  0024               	movlb	4	; select bank4
 11949  17CD  0091               	movwf	17	;volatile
 11950  17CE                     i1l839:
 11951  17CE  0008               	return
 11952  17CF                     __end_of_espi_wr1:
 11953                           
 11954                           	psect	text78
 11955  07FD                     __ptext78:	
 11956 ;; *************** function _espi_rd *****************
 11957 ;; Defined at:
 11958 ;;		line 39 in file "enhaced_spi.c"
 11959 ;; Parameters:    Size  Location     Type
 11960 ;;		None
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;		None
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  1    wreg      unsigned char 
 11965 ;; Registers used:
 11966 ;;		wreg
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;Total ram usage:        0 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; This function calls:
 11979 ;;		Nothing
 11980 ;; This function is called by:
 11981 ;;		_appTasks
 11982 ;;		_exchangeDone
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           
 11987                           ;psect for function _espi_rd
 11988  07FD                     _espi_rd:
 11989  07FD                     i1l2656:	
 11990                           ;incstack = 0
 11991                           ; Regs used in _espi_rd: [wreg]
 11992                           
 11993                           
 11994                           ;enhaced_spi.c: 40:     return SSP1BUF;
 11995  07FD  0024               	movlb	4	; select bank4
 11996  07FE  0811               	movf	17,w	;volatile
 11997  07FF                     i1l848:
 11998  07FF  0008               	return
 11999  0800                     __end_of_espi_rd:
 12000                           
 12001                           	psect	text79
 12002  0965                     __ptext79:	
 12003 ;; *************** function _SPI_Isr *****************
 12004 ;; Defined at:
 12005 ;;		line 143 in file "mcc_generated_files/spi.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;		None
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;		None
 12010 ;; Return value:  Size  Location     Type
 12011 ;;                  1    wreg      void 
 12012 ;; Registers used:
 12013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;Total ram usage:        0 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    4
 12026 ;; This function calls:
 12027 ;;		Absolute function
 12028 ;;		_SPI_Isr
 12029 ;;		_interrupHandler
 12030 ;; This function is called by:
 12031 ;;		_INTERRUPT_InterruptManager
 12032 ;;		_SPI_Initialize
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           
 12037                           ;psect for function _SPI_Isr
 12038  0965                     _SPI_Isr:
 12039  0965                     i1l3120:	
 12040                           ;incstack = 0
 12041                           ; Regs used in _SPI_Isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12042                           
 12043                           
 12044                           ;mcc_generated_files/spi.c: 145:     if(PIR1bits.SSP1IF == 1){
 12045  0965  0020               	movlb	0	; select bank0
 12046  0966  1D91               	btfss	17,3	;volatile
 12047  0967  2969               	goto	u189_21
 12048  0968  296A               	goto	u189_20
 12049  0969                     u189_21:
 12050  0969  2978               	goto	i1l294
 12051  096A                     u189_20:
 12052  096A                     i1l3122:
 12053                           
 12054                           ;mcc_generated_files/spi.c: 146:         if(MSSP_InterruptHandler){
 12055  096A  0021               	movlb	1	; select bank1
 12056  096B  086D               	movf	_MSSP_InterruptHandler^(0+128),w
 12057  096C  046E               	iorwf	(_MSSP_InterruptHandler+1)^(0+128),w
 12058  096D  1903               	btfsc	3,2
 12059  096E  2970               	goto	u190_21
 12060  096F  2971               	goto	u190_20
 12061  0970                     u190_21:
 12062  0970  2976               	goto	i1l3126
 12063  0971                     u190_20:
 12064  0971                     i1l3124:
 12065                           
 12066                           ;mcc_generated_files/spi.c: 147:             MSSP_InterruptHandler();
 12067  0971  086E               	movf	(_MSSP_InterruptHandler+1)^(0+128),w
 12068  0972  008A               	movwf	10
 12069  0973  086D               	movf	_MSSP_InterruptHandler^(0+128),w
 12070  0974  000A               	callw
 12071  0975  3189               	pagesel	$
 12072  0976                     i1l3126:
 12073                           
 12074                           ;mcc_generated_files/spi.c: 149:         PIR1bits.SSP1IF= 0;
 12075  0976  0020               	movlb	0	; select bank0
 12076  0977  1191               	bcf	17,3	;volatile
 12077  0978                     i1l294:
 12078  0978  0008               	return
 12079  0979                     __end_of_SPI_Isr:
 12080                           
 12081                           	psect	text80
 12082  09E0                     __ptext80:	
 12083 ;; *************** function _interrupHandler *****************
 12084 ;; Defined at:
 12085 ;;		line 8 in file "enhaced_spi.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;		None
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;		None
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  1    wreg      void 
 12092 ;; Registers used:
 12093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;Total ram usage:        0 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    3
 12106 ;; This function calls:
 12107 ;;		Absolute function
 12108 ;;		_dataReceived
 12109 ;; This function is called by:
 12110 ;;		_espi_setInterrupHandler
 12111 ;;		_SPI_Isr
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           
 12116                           ;psect for function _interrupHandler
 12117  09E0                     _interrupHandler:
 12118  09E0                     i1l3072:	
 12119                           ;incstack = 0
 12120                           ; Regs used in _interrupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12121                           
 12122                           
 12123                           ;enhaced_spi.c: 9:     if (PIR2bits.BCL1IF) {
 12124  09E0  0020               	movlb	0	; select bank0
 12125  09E1  1D92               	btfss	18,3	;volatile
 12126  09E2  29E4               	goto	u180_21
 12127  09E3  29E5               	goto	u180_20
 12128  09E4                     u180_21:
 12129  09E4  29EF               	goto	i1l3076
 12130  09E5                     u180_20:
 12131  09E5                     i1l3074:
 12132                           
 12133                           ;enhaced_spi.c: 10:         PIR2bits.BCL1IF = 0;
 12134  09E5  1192               	bcf	18,3	;volatile
 12135                           
 12136                           ;enhaced_spi.c: 11:         PIE2bits.BCL1IE = 0;
 12137  09E6  0021               	movlb	1	; select bank1
 12138  09E7  1192               	bcf	18,3	;volatile
 12139                           
 12140                           ;enhaced_spi.c: 12:         PIE1bits.SSP1IE = 0;
 12141  09E8  1191               	bcf	17,3	;volatile
 12142  09E9  0000               	nop	;# 
 12143                           
 12144                           ;enhaced_spi.c: 14:         PIE1bits.SSP1IE = 1;
 12145  09EA  0021               	movlb	1	; select bank1
 12146  09EB  1591               	bsf	17,3	;volatile
 12147                           
 12148                           ;enhaced_spi.c: 15:         PIE2bits.BCL1IE = 1;
 12149  09EC  1592               	bsf	18,3	;volatile
 12150                           
 12151                           ;enhaced_spi.c: 16:         PIE1bits.SSP1IE = 1;
 12152  09ED  1591               	bsf	17,3	;volatile
 12153                           
 12154                           ;enhaced_spi.c: 17:     } else
 12155  09EE  29F5               	goto	i1l833
 12156  09EF                     i1l3076:
 12157                           
 12158                           ;enhaced_spi.c: 18:         SPI_InterruptHandler();
 12159  09EF  0021               	movlb	1	; select bank1
 12160  09F0  085E               	movf	(_SPI_InterruptHandler+1)^(0+128),w
 12161  09F1  008A               	movwf	10
 12162  09F2  085D               	movf	_SPI_InterruptHandler^(0+128),w
 12163  09F3  000A               	callw
 12164  09F4  3189               	pagesel	$
 12165  09F5                     i1l833:
 12166  09F5  0008               	return
 12167  09F6                     __end_of_interrupHandler:
 12168  007E                     btemp	set	126	;btemp
 12169  007E                     int$flags	set	126
 12170  007E                     wtemp0	set	126
 12171                           
 12172                           	psect	config
 12173                           
 12174                           ;Config register CONFIG1 @ 0x8007
 12175                           ;	Oscillator Selection
 12176                           ;	FOSC = HS, HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2
      +                           pins
 12177                           ;	Watchdog Timer Enable
 12178                           ;	WDTE = ON, WDT enabled
 12179                           ;	Power-up Timer Enable
 12180                           ;	PWRTE = OFF, PWRT disabled
 12181                           ;	MCLR Pin Function Select
 12182                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
 12183                           ;	Flash Program Memory Code Protection
 12184                           ;	CP = OFF, Program memory code protection is disabled
 12185                           ;	Data Memory Code Protection
 12186                           ;	CPD = OFF, Data memory code protection is disabled
 12187                           ;	Brown-out Reset Enable
 12188                           ;	BOREN = ON, Brown-out Reset enabled
 12189                           ;	Clock Out Enable
 12190                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 12191                           ;	Internal/External Switchover
 12192                           ;	IESO = ON, Internal/External Switchover mode is enabled
 12193                           ;	Fail-Safe Clock Monitor Enable
 12194                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 12195  8007                     	org	32775
 12196  8007  3FBA               	dw	16314
 12197                           
 12198                           ;Config register CONFIG2 @ 0x8008
 12199                           ;	Flash Memory Self-Write Protection
 12200                           ;	WRT = OFF, Write protection off
 12201                           ;	PLL Enable
 12202                           ;	PLLEN = ON, 4x PLL enabled
 12203                           ;	Stack Overflow/Underflow Reset Enable
 12204                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 12205                           ;	Brown-out Reset Voltage Selection
 12206                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 12207                           ;	Low-Voltage Programming Enable
 12208                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 12209  8008                     	org	32776
 12210  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        124
    BSS         359
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      80
    BANK1            80     57      79
    BANK2            80     40      77
    BANK3            80      0      64
    BANK4            80      0      57
    BANK5            80      0      54
    BANK6            80      0      59
    BANK7            80      0      54
    BANK8            80      0      67
    BANK9            80      0      57
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    table.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    table.action	PTR FTN()void  size(2) Largest target is 0
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    S824$5$0	PTR struct DCMOTOR size(1) Largest target is 0

    S824$6$0	PTR struct DCMOTOR size(1) Largest target is 0

    S824$7$0	PTR struct DCMOTOR size(1) Largest target is 0

    S809$3$0	PTR struct TIMER size(1) Largest target is 0

    S809$4$0	PTR struct TIMER size(1) Largest target is 0

    S780$3$0	PTR struct TIMER size(1) Largest target is 0

    S780$4$1	PTR FTN()void  size(2) Largest target is 0

    S780$4$0	PTR struct TIMER size(1) Largest target is 0

    S904$3$0	PTR struct SPI size(1) Largest target is 0

    ?_GetCommunicationInstance.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    ?_GetCommunicationInstance.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    ?_GetCommunicationInstance.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    ?_GetCommunicationInstance.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    ?_GetCommunicationInstance.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    ?_GetCommunicationInstance.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    ?_GetCommunicationInstance.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    ?_GetCommunicationInstance.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    ?_GetCommunicationInstance.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    ?_GetCommunicationInstance.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    ?_GetCommunicationInstance.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    ?_GetCommunicationInstance.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    ?_GetCommunicationInstance.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_GetCommunicationInstance.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_GetCommunicationInstance.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_GetCommunicationInstance.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_GetCommunicationInstance.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    ?_GetCommunicationInstance.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    ?_GetCommunicationInstance.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    ?_GetCommunicationInstance.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    ?_GetCommunicationInstance.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    ?_GetCommunicationInstance.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    ?_GetCommunicationInstance.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    ?_GetCommunicationInstance.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    ?_GetCommunicationInstance.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    ?_GetCommunicationInstance.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    ?_GetCommunicationInstance.regsTable	PTR struct COMM_TABLE size(1) Largest target is 54
		 -> table(BANK5[54]), 

    ?_GetCommunicationInstance.commDriver	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    ?_GetCommunicationInstance.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@Comm$F2954(), 

    ?_GetCommunicationInstance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    ?_getRegister.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    ?_getRegister.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    S904$5$0	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    S904$6$0	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    S904$1$1	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), 

    S904$1$0	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    S904$0$1	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), 

    S904$0$0	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    S904$8$0	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    ?_NewSpiDriver.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    ?_NewSpiDriver.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    ?_NewSpiDriver.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    ?_NewSpiDriver.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    ?_NewSpiDriver.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    ?_NewSpiDriver.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    ?_NewSpiDriver.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    ?_NewSpiDriver.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    ?_NewSpiDriver.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    ?_NewSpiDriver.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    ?_NewSpiDriver.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_NewSpiDriver.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_NewSpiDriver.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_NewSpiDriver.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_NewSpiDriver.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    ?_NewSpiDriver.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    ?_NewSpiDriver.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    ?_NewSpiDriver.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    ?_NewSpiDriver.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    ?_NewSpiDriver.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    ?_NewSpiDriver.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    ?_NewSpiDriver.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    ?_NewSpiDriver.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    ?_NewSpiDriver.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    ?_NewTimer.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    ?_NewTimer.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    ?_NewTimer.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    ?_NewTimer.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    S780$2$0	PTR struct TIMER size(1) Largest target is 0

    ?_GetTimeSystemInstance.removeTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> removeTimer(), 

    ?_GetTimeSystemInstance.addTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> addTimer(), 

    ?_GetTimeSystemInstance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@TimeSystem$F1858(), Absolute function(), 

    ?_GetTimeSystemInstance.updateMillis	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), 

    ?_NewDCMotor.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    ?_NewDCMotor.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    ?_NewDCMotor.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    ?_NewDCMotor.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    ?_NewDCMotor.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    ?_NewDCMotor.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    ?_NewDCMotor.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    ?_NewDCMotor.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    ?_NewDCMotor.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    ?_NewDCMotor.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    ?_NewDCMotor.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    S824$8$0	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    S904$4$0	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    S824$1$0	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    S1058$1$0	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    S1037$0$0	PTR struct COMM_REG size(1) Largest target is 40
		 -> appTasks@regs(BANK2[40]), 

    S904$2$0	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    S904$7$0	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    S824$2$0	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    S824$3$0	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    S824$4$0	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    S824$0$0	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    S904$9$0	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    S904$14$0	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    currentTimeMillis	PTR unsigned long  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@dest	PTR void  size(1) Largest target is 54
		 -> table(BANK5[54]), 

    memset@s	PTR unsigned char  size(1) Largest target is 54
		 -> table(BANK5[54]), 

    memcpy@d1	PTR void  size(2) Largest target is 54
		 -> outFrame(BANK1[5]), table(BANK5[54]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 54
		 -> outFrame(BANK1[5]), table(BANK5[54]), 

    memcpy@s1	PTR const void  size(2) Largest target is 40
		 -> inputFrame(BANK1[5]), appTasks@regs(BANK2[40]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 40
		 -> inputFrame(BANK1[5]), appTasks@regs(BANK2[40]), 

    espi_setInterrupHandler@fun	PTR FTN()void  size(2) Largest target is 1
		 -> dataReceived(), 

    SPI_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> dataReceived(), Absolute function(), 

    sp__GetCommunicationInstance.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    sp__GetCommunicationInstance.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    sp__GetCommunicationInstance.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    sp__GetCommunicationInstance.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    sp__GetCommunicationInstance.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    sp__GetCommunicationInstance.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    sp__GetCommunicationInstance.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    sp__GetCommunicationInstance.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    sp__GetCommunicationInstance.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    sp__GetCommunicationInstance.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    sp__GetCommunicationInstance.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    sp__GetCommunicationInstance.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    sp__GetCommunicationInstance.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__GetCommunicationInstance.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__GetCommunicationInstance.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__GetCommunicationInstance.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__GetCommunicationInstance.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    sp__GetCommunicationInstance.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    sp__GetCommunicationInstance.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    sp__GetCommunicationInstance.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    sp__GetCommunicationInstance.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    sp__GetCommunicationInstance.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    sp__GetCommunicationInstance.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    sp__GetCommunicationInstance.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    sp__GetCommunicationInstance.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    sp__GetCommunicationInstance.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    sp__GetCommunicationInstance.regsTable	PTR struct COMM_TABLE size(1) Largest target is 54
		 -> table(BANK5[54]), 

    sp__GetCommunicationInstance.commDriver	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    sp__GetCommunicationInstance.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@Comm$F2954(), 

    sp__GetCommunicationInstance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    setTimeBaseCounter@Comm$F2954@timeMillis	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    sp__getRegister	PTR struct COMM_REG size(1) Largest target is 54
		 -> table.regs(BANK5[50]), table(BANK5[54]), NULL(NULL[0]), 

    setRegistersTable@tab	PTR struct COMM_REG size(1) Largest target is 40
		 -> appTasks@regs(BANK2[40]), 

    sp__memset	PTR void  size(1) Largest target is 54
		 -> table(BANK5[54]), 

    reg0.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    reg0.action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    F441.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    F441.action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    sp__memcpy	PTR void  size(2) Largest target is 54
		 -> outFrame(BANK1[5]), table(BANK5[54]), 

    getSUM@buff	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), inputFrame(BANK1[5]), 

    instance.commDriver.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    instance.commDriver.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    instance.commDriver.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    instance.commDriver.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    instance.commDriver.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    instance.commDriver.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    instance.commDriver.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    instance.commDriver.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    instance.commDriver.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    instance.commDriver.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    instance.commDriver.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    instance.commDriver.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    instance.commDriver.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    instance.commDriver.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    instance.commDriver.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    instance.commDriver.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    instance.commDriver.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    instance.commDriver.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    instance.commDriver.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    instance.commDriver.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    instance.commDriver.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    instance.commDriver.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    instance.commDriver.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    instance.commDriver.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    currentTimeMillis@Comm$F3024	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    commandHandler@reg.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    commandHandler@reg.action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    sp_S1037$2	PTR struct COMM_REG size(1) Largest target is 54
		 -> table(BANK5[54]), NULL(NULL[0]), 

    commandHandler@reg	PTR struct COMM_REG size(1) Largest target is 54
		 -> table.regs(BANK5[50]), table(BANK5[54]), NULL(NULL[0]), 

    instance.regsTable	PTR struct COMM_TABLE size(1) Largest target is 54
		 -> table(BANK5[54]), 

    instance.commDriver	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    instance.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@Comm$F2954(), 

    instance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    table.regs.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    table.regs.action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    table.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    table.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    tasks@SpiCommunication$F2138@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    tasks@SpiCommunication$F2138@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    tasks@SpiCommunication$F2138@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tasks@SpiCommunication$F2138@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tasks@SpiCommunication$F2138@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tasks@SpiCommunication$F2138@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tasks@SpiCommunication$F2138@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    tasks@SpiCommunication$F2138@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    tasks@SpiCommunication$F2138@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    tasks@SpiCommunication$F2138@this	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    reset@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    reset@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    reset@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    reset@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    reset@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    reset@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    reset@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    reset@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    reset@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    reset@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    reset@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    reset@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    reset@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    reset@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    reset@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    reset@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    reset@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    reset@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    reset@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    reset@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    reset@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    reset@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    reset@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    reset@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    reset@this	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    setTimeBaseCounter@SpiCommunication$F2153@timeMillis	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    healthy@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    healthy@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    healthy@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    healthy@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    healthy@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    healthy@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    healthy@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    healthy@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    healthy@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    healthy@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    healthy@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    healthy@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    healthy@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    healthy@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    healthy@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    healthy@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    healthy@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    healthy@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    healthy@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    healthy@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    healthy@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    healthy@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    healthy@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    healthy@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    healthy@this	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    rxDone@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    rxDone@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    rxDone@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    rxDone@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    rxDone@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    rxDone@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    rxDone@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    rxDone@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    rxDone@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    rxDone@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    rxDone@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    rxDone@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    rxDone@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    rxDone@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    rxDone@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    rxDone@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    rxDone@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    rxDone@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    rxDone@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    rxDone@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    rxDone@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    rxDone@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    rxDone@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    rxDone@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    rxDone@this	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    txDone@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    txDone@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    txDone@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    txDone@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    txDone@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    txDone@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    txDone@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    txDone@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    txDone@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    txDone@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    txDone@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    txDone@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    txDone@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    txDone@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    txDone@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    txDone@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    txDone@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    txDone@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    txDone@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    txDone@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    txDone@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    txDone@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    txDone@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    txDone@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    txDone@this	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    close@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    close@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    close@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    close@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    close@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    close@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    close@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    close@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    close@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    close@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    close@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    close@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    close@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    close@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    close@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    close@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    close@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    close@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    close@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    close@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    close@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    close@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    close@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    close@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    open@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    open@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    open@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    open@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    open@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    open@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    open@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    open@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    open@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    open@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    open@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    open@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    open@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    open@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    open@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    open@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    open@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    open@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    open@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    open@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    open@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    open@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    open@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    open@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    open@this	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    exchangeDone@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    exchangeDone@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    exchangeDone@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    exchangeDone@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    exchangeDone@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    exchangeDone@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    exchangeDone@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    exchangeDone@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    exchangeDone@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    exchangeDone@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    exchangeDone@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    exchangeDone@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    exchangeDone@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    exchangeDone@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    exchangeDone@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    exchangeDone@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    exchangeDone@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    exchangeDone@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    exchangeDone@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    exchangeDone@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    exchangeDone@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    exchangeDone@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    exchangeDone@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    exchangeDone@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    exchangeDone@this	PTR struct SPI size(1) Largest target is 59
		 -> spi(BANK4[57]), 

    write@data	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), 

    write@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    write@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    write@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    write@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    write@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    write@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    write@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    write@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    write@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    write@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    write@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    write@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    write@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    write@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    write@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    write@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    write@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    write@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    write@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    write@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    write@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    write@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    write@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    write@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    write@this	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    read@data	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), 

    read@this.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    read@this.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    read@this.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    read@this.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    read@this.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    read@this.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    read@this.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    read@this.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    read@this.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    read@this.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    read@this.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    read@this.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    read@this.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    read@this.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    read@this.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    read@this.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    read@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    read@this.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    read@this.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    read@this.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    read@this.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    read@this.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    read@this.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    read@this.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    read@this	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    currentTimeMillis@SpiCommunication$F2173	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    NewSpiDriver@ie	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), 

    NewSpiDriver@wr2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), 

    NewSpiDriver@wr1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), 

    NewSpiDriver@rd	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), 

    NewSpiDriver@rst	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), 

    NewSpiDriver@cl	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), 

    NewSpiDriver@op	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), 

    spi.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    spi.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    spi.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    spi.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    spi.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    spi.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    spi.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    spi.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    spi.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    spi.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    spi.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    spi.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    spi.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    spi.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    spi.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    spi.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    spi.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    spi.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    spi.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    spi.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    F2536.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    F2536.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    F2536.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    F2536.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    F2536.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    F2536.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    F2536.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    F2536.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    F2536.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    F2536.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    F2536.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    F2536.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    F2536.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    F2536.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    F2536.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    F2536.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    F2536.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    F2536.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    F2536.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    F2536.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    F2536.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    F2536.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    F2536.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    F2536.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    __run@function	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    setCallback@this.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    setCallback@this.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    setCallback@this.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    setCallback@this.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    isDone@this.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    isDone@this.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    isDone@this.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    isDone@this.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    resetTimer@this.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    resetTimer@this.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    resetTimer@this.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    resetTimer@this.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    tmr.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    tmr.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    tmr.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    F121.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    F121.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    F121.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    F121.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    timers.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    timers.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    timers.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    timers.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    timers	PTR struct TIMER[5] size(1) Largest target is 0

    sp__GetTimeSystemInstance.removeTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> removeTimer(), 

    sp__GetTimeSystemInstance.addTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> addTimer(), 

    sp__GetTimeSystemInstance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@TimeSystem$F1858(), Absolute function(), 

    sp__GetTimeSystemInstance.updateMillis	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), 

    instance.removeTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> removeTimer(), 

    instance.addTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> addTimer(), 

    instance.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@TimeSystem$F1858(), Absolute function(), 

    instance.updateMillis	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), 

    tasks@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    tasks@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    tasks@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    tasks@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    tasks@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    tasks@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    tasks@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    tasks@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    tasks@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    tasks@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    tasks@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    tasks@this	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    slowDown@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    slowDown@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    slowDown@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    slowDown@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    slowDown@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    slowDown@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    slowDown@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    slowDown@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    slowDown@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    slowDown@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    slowDown@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    accelerate@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    accelerate@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    accelerate@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    accelerate@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    accelerate@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    accelerate@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    accelerate@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    accelerate@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    accelerate@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    accelerate@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    accelerate@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    changeDir@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    changeDir@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    changeDir@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    changeDir@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    changeDir@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    changeDir@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    changeDir@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    changeDir@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    changeDir@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    changeDir@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    changeDir@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    run@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    run@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    run@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    run@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    run@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    run@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    run@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    run@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    run@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    run@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    run@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    run@this	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    stop@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    stop@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    stop@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    stop@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    stop@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    stop@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    stop@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    stop@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    stop@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    stop@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    stop@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    stop@this	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    setTimeBaseCounter@timeMillis	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    setSpeed@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    setSpeed@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    setSpeed@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    setSpeed@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    setSpeed@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    setSpeed@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    setSpeed@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    setSpeed@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    setSpeed@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    setSpeed@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    setSpeed@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    setSpeed@this	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    timeBase	PTR unsigned long  size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    setDir@this.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    setDir@this.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    setDir@this.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    setDir@this.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    setDir@this.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    setDir@this.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    setDir@this.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    setDir@this.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    setDir@this.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    setDir@this.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    setDir@this.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    setDir@this	PTR struct DCMOTOR size(1) Largest target is 32
		 -> motor2(BANK3[32]), motor1(BANK3[32]), 

    NewDCMotor@_setSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), PWM3_LoadDutyValue(), 

    NewDCMotor@_setDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), 

    m.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    m.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    m.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    m.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    m.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    m.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    m.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    m.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    m.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    m.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    m.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    F128.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    F128.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    F128.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    F128.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    F128.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    F128.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    F128.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    F128.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    F128.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    F128.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    F128.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    comm.commDriver.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    comm.commDriver.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    comm.commDriver.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    comm.commDriver.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    comm.commDriver.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    comm.commDriver.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    comm.commDriver.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    comm.commDriver.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    comm.commDriver.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    comm.commDriver.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    comm.commDriver.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.commDriver.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.commDriver.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.commDriver.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.commDriver.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    comm.commDriver.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    comm.commDriver.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    comm.commDriver.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    comm.commDriver.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    comm.commDriver.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    comm.commDriver.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    comm.commDriver.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    comm.commDriver.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    comm.commDriver.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    comm.regsTable.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    comm.regsTable.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    S1031COMM_REG$val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    appTasks@F3078.val	PTR unsigned short  size(2) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), speedm2(BANK2[2]), speedm1(BANK2[2]), 

    S1031COMM_REG$action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    appTasks@F3078.action	PTR FTN()void  size(2) Largest target is 1
		 -> stopMotors(), runMotors(), setMotor2Counterclockwise(), setMotor2Clockwise(), 
		 -> setMotor1Counterclockwise(), setMotor1Clockwise(), Absolute function(), 

    S1037COMM_TABLE$getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    comm.getRegister	PTR FTN(unsigned char ,)PTR struct COMM_REG size(2) Largest target is 59
		 -> getRegister(), NULL(NULL[0]), spi(BANK4[57]), 

    S1037COMM_TABLE$setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    comm.setRegistersTable	PTR FTN(PTR struct COMM_REG,unsigned char ,)void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    comm.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    comm.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    comm.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    comm.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    comm.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    comm.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    comm.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    comm.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    comm.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    comm.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    comm.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    comm.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    comm.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    comm.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    comm.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    comm.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    comm.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    comm.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    comm.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    comm.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    comm.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    S1058COMMUNICATION$regsTable	PTR struct COMM_TABLE size(1) Largest target is 54
		 -> table(BANK5[54]), 

    comm.regsTable	PTR struct COMM_TABLE size(1) Largest target is 54
		 -> table(BANK5[54]), 

    S1058COMMUNICATION$commDriver	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    comm.commDriver	PTR struct SPI size(1) Largest target is 59
		 -> NULL(NULL[0]), spi(BANK4[57]), 

    S1058COMMUNICATION$setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@Comm$F2954(), 

    comm.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@Comm$F2954(), 

    S1058COMMUNICATION$tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    comm.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@Comm$F2950(), setRegistersTable(), 

    sp__GetCommunicationInstance	PTR struct COMMUNICATION size(1) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), 

    comm	PTR struct COMMUNICATION size(1) Largest target is 10
		 -> instance@Comm$F3017(BANK0[8]), NULL(NULL[0]), 

    S809TIMESYSTEM$removeTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> removeTimer(), 

    time.removeTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> removeTimer(), 

    S809TIMESYSTEM$addTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> addTimer(), 

    time.addTimer	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> addTimer(), 

    S809TIMESYSTEM$tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@TimeSystem$F1858(), Absolute function(), 

    time.tasks	PTR FTN()void  size(2) Largest target is 1
		 -> tasks@TimeSystem$F1858(), Absolute function(), 

    S809TIMESYSTEM$updateMillis	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), 

    time.updateMillis	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), 

    sp__GetTimeSystemInstance	PTR struct TIMESYSTEM size(1) Largest target is 16
		 -> instance(BANK2[16]), 

    time	PTR struct TIMESYSTEM size(1) Largest target is 16
		 -> instance(BANK2[16]), NULL(NULL[0]), 

    S904SPI$dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    spi.dataToWrite	PTR unsigned char  size(1) Largest target is 5
		 -> outFrame(BANK1[5]), NULL(NULL[0]), 

    S904SPI$dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    spi.dataToRead	PTR unsigned char  size(1) Largest target is 5
		 -> inputFrame(BANK1[5]), NULL(NULL[0]), 

    S904SPI$hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    spi.hwInterrupEnable	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> espi_int(), Absolute function(), 

    S904SPI$writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    spi.writeByte_2	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr2(), Absolute function(), 

    S904SPI$writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    spi.writeByte_1	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> espi_wr1(), Absolute function(), 

    S904SPI$readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    spi.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> espi_rd(), Absolute function(), 

    S904SPI$hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    spi.hwreset	PTR FTN()void  size(2) Largest target is 1
		 -> espi_rst(), Absolute function(), 

    S904SPI$hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    spi.hwclose	PTR FTN()void  size(2) Largest target is 1
		 -> espi_cl(), Absolute function(), 

    S904SPI$hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    spi.hwopen	PTR FTN()_Bool  size(2) Largest target is 1
		 -> espi_op(), Absolute function(), 

    S904SPI$healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    spi.healthy	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> healthy(), Absolute function(), 

    S904SPI$errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.errorCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S904SPI$byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.byteReadCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S904SPI$writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.writeCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S904SPI$readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spi.readCallBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S904SPI$exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    spi.exchangeDone	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> exchangeDone(), Absolute function(), 

    S904SPI$reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    spi.reset	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> reset(), Absolute function(), 

    S904SPI$setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    spi.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter@SpiCommunication$F2153(), Absolute function(), 

    S904SPI$rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    spi.rxDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> rxDone(), Absolute function(), 

    S904SPI$txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    spi.txDone	PTR FTN(PTR struct SPI,)_Bool  size(2) Largest target is 1
		 -> txDone(), Absolute function(), 

    S904SPI$tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    spi.tasks	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> tasks@SpiCommunication$F2138(), Absolute function(), 

    S904SPI$close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    spi.close	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 1
		 -> close(), Absolute function(), 

    S904SPI$open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    spi.open	PTR FTN(PTR struct SPI,)void  size(2) Largest target is 59
		 -> open(), NULL(NULL[0]), spi(BANK4[57]), Absolute function(), 

    S904SPI$write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    spi.write	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> write(), Absolute function(), 

    S904SPI$read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    spi.read	PTR FTN(PTR struct SPI,PTR unsigned char ,unsigned char ,)int  size(2) Largest target is 2
		 -> read(), Absolute function(), 

    motor2.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    motor2.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    motor2.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    motor2.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    motor2.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    motor2.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    motor2.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    motor2.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    motor2.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    motor2.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    motor2.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    S824DCMOTOR$hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    motor1.hwSetSpeed	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> EPWM1_LoadDutyValue(), Absolute function(), PWM3_LoadDutyValue(), 

    S824DCMOTOR$hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    motor1.hwSetDir	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> motor2SetDir(), motor1SetDir(), Absolute function(), 

    S824DCMOTOR$tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    motor1.tasks	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> tasks(), Absolute function(), 

    S824DCMOTOR$changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    motor1.changeDir	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> changeDir(), Absolute function(), 

    S824DCMOTOR$slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    motor1.slowDown	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> slowDown(), Absolute function(), 

    S824DCMOTOR$accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    motor1.accelerate	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> accelerate(), Absolute function(), 

    S824DCMOTOR$run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    motor1.run	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> run(), Absolute function(), 

    S824DCMOTOR$stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    motor1.stop	PTR FTN(PTR struct DCMOTOR,)void  size(2) Largest target is 1
		 -> stop(), Absolute function(), 

    S824DCMOTOR$setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    motor1.setTimeBaseCounter	PTR FTN(PTR unsigned long ,)void  size(2) Largest target is 1
		 -> setTimeBaseCounter(), Absolute function(), 

    S824DCMOTOR$setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    motor1.setSpeed	PTR FTN(PTR struct DCMOTOR,unsigned short ,)void  size(2) Largest target is 1
		 -> setSpeed(), Absolute function(), 

    S824DCMOTOR$setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    motor1.setDir	PTR FTN(PTR struct DCMOTOR,_Bool ,)void  size(2) Largest target is 1
		 -> setDir(), Absolute function(), 

    tmr3.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr3.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    tmr3.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    tmr3.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    tmr2.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr2.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    tmr2.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    tmr2.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    S780TIMER$callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr1.callBack	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S780TIMER$setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    tmr1.setCallback	PTR FTN(PTR struct TIMER,PTR FTN()void ,)void  size(2) Largest target is 1
		 -> setCallback(), Absolute function(), 

    S780TIMER$reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    tmr1.reset	PTR FTN(PTR struct TIMER,)void  size(2) Largest target is 1
		 -> resetTimer(), Absolute function(), 

    S780TIMER$isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    tmr1.isDone	PTR FTN(PTR struct TIMER,)_Bool  size(2) Largest target is 1
		 -> isDone(), Absolute function(), 

    SPI_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> interrupHandler(), SPI_Isr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> interrupHandler(), SPI_Isr(), Absolute function(), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> updateMillis(), Absolute function(), TMR4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _appTasks->_setRegistersTable
    _wdt->_healthy
    _tasks@SpiCommunication$F2138->_reset
    _transferFrames->_memcpy
    _outputW->_write
    _write->_espi_wr2
    _inputR->_read
    _commandHandler->_getRegister
    _stopMotors->_stop
    _setDir->_EPWM1_LoadDutyValue
    _setDir->_PWM3_LoadDutyValue
    _runMotors->_run
    _reset@Comm$F2985->_reset
    _reset->_espi_rst
    _getRegister->___bmul
    _tasks->_EPWM1_LoadDutyValue
    _tasks->_PWM3_LoadDutyValue
    _getHWSpeed->___lmul
    _setRegistersTable->___bmul
    _setRegistersTable->_memcpy
    ___bmul->___lwdiv
    _espi_op->_SPI_Open
    _espi_setInterrupHandler->_SPI_SetInterruptHandler
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _SPI_Initialize->_SPI_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _dataReceived->_exchangeDone
    _exchangeDone->_espi_wr1
    _exchangeDone->_espi_wr1
    _interrupHandler->_dataReceived
    _dataReceived->_exchangeDone
    _interrupHandler->_dataReceived

Critical Paths under _main in BANK0

    _main->_appTasks
    _appTasks->_NewDCMotor
    _tasks@Comm$F2950->_commandHandler
    _commandHandler->_setMotor1Clockwise
    _commandHandler->_setMotor1Counterclockwise
    _commandHandler->_setMotor2Clockwise
    _commandHandler->_setMotor2Counterclockwise
    _setMotor2Counterclockwise->_setDir
    _setMotor2Clockwise->_setDir
    _setMotor1Counterclockwise->_setDir
    _setMotor1Clockwise->_setDir
    _setDir->_EPWM1_LoadDutyValue
    _setDir->_PWM3_LoadDutyValue
    _tasks->_EPWM1_LoadDutyValue
    _tasks->_PWM3_LoadDutyValue
    _getHWSpeed->___aldiv
    _PWM3_LoadDutyValue->_getHWSpeed
    _EPWM1_LoadDutyValue->_getHWSpeed

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _appTasks->_NewSpiDriver

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_appTasks

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26619
                  _SYSTEM_Initialize
                           _appTasks
 ---------------------------------------------------------------------------------
 (1) _appTasks                                            42    42      0   26081
                                             64 BANK0      2     2      0
                                              0 BANK2     40    40      0
                   Absolute function *
           _GetCommunicationInstance
              _GetTimeSystemInstance
                         _NewDCMotor
                       _NewSpiDriver
           _TMR4_SetInterruptHandler
            _espi_setInterrupHandler
                               _open *
                          _runMotors
                  _setRegistersTable *
                           _setSpeed *
                 _setTimeBaseCounter *
      _setTimeBaseCounter@Comm$F2954 *
_setTimeBaseCounter@SpiCommunication *
                              _tasks *
                   _tasks@Comm$F2950 *
       _tasks@SpiCommunication$F2138 *
             _tasks@TimeSystem$F1858 *
                                _wdt
 ---------------------------------------------------------------------------------
 (2) _wdt                                                  1     1      0     152
                                              9 COMMON     1     1      0
                   Absolute function *
                            _healthy *
 ---------------------------------------------------------------------------------
 (3) _healthy                                              9     8      1     152
                                              0 COMMON     9     8      1
 ---------------------------------------------------------------------------------
 (2) _tasks@TimeSystem$F1858                               2     2      0     161
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _tasks@SpiCommunication$F2138                         9     8      1    2154
                                              7 COMMON     1     0      1
                                              0 BANK0      8     8      0
                   Absolute function *
                              ___run
                              _reset *
 ---------------------------------------------------------------------------------
 (3) ___run                                                2     0      2     507
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _tasks@Comm$F2950                                     4     4      0   12246
                                             24 BANK0      4     4      0
                   Absolute function *
                     _commandHandler
                             _inputR
                            _outputW
                              _reset *
                             _rxDone *
                     _transferFrames
                             _txDone *
 ---------------------------------------------------------------------------------
 (3) _txDone                                               3     2      1     121
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _transferFrames                                       0     0      0     776
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _rxDone                                               1     0      1     152
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) _outputW                                              5     3      2     760
                                              8 COMMON     5     3      2
                   Absolute function *
                              _write *
 ---------------------------------------------------------------------------------
 (4) _write                                                7     4      3     760
                                              1 COMMON     7     4      3
                   Absolute function *
                           _espi_wr2 *
 ---------------------------------------------------------------------------------
 (3) _inputR                                               3     3      0     487
                                              7 COMMON     3     3      0
                   Absolute function *
                               _read *
 ---------------------------------------------------------------------------------
 (4) _read                                                 7     4      3     487
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (3) _commandHandler                                       3     3      0    8827
                                             21 BANK0      3     3      0
                   Absolute function *
                    _creatErrorFrame
                        _getRegister *
                             _getSUM
                   _reset@Comm$F2985
                          _runMotors *
                 _setMotor1Clockwise *
          _setMotor1Counterclockwise *
                 _setMotor2Clockwise *
          _setMotor2Counterclockwise *
                         _stopMotors *
 ---------------------------------------------------------------------------------
 (4) _stopMotors                                           1     1      0     211
                                              1 COMMON     1     1      0
                   Absolute function *
                               _stop *
 ---------------------------------------------------------------------------------
 (5) _stop                                                 1     0      1     211
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _setMotor2Counterclockwise                            1     1      0    1531
                                             20 BANK0      1     1      0
                   Absolute function *
                             _setDir *
 ---------------------------------------------------------------------------------
 (4) _setMotor2Clockwise                                   1     1      0    1531
                                             20 BANK0      1     1      0
                   Absolute function *
                             _setDir *
 ---------------------------------------------------------------------------------
 (4) _setMotor1Counterclockwise                            1     1      0    1531
                                             20 BANK0      1     1      0
                   Absolute function *
                             _setDir *
 ---------------------------------------------------------------------------------
 (4) _setMotor1Clockwise                                   1     1      0    1531
                                             20 BANK0      1     1      0
                   Absolute function *
                             _setDir *
 ---------------------------------------------------------------------------------
 (5) _setDir                                               6     4      2    1531
                                             14 BANK0      6     4      2
                   Absolute function *
                _EPWM1_LoadDutyValue *
                 _PWM3_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (4) _runMotors                                            1     1      0     211
                                              1 COMMON     1     1      0
                   Absolute function *
                                _run *
 ---------------------------------------------------------------------------------
 (5) _run                                                  1     0      1     211
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _reset@Comm$F2985                                     1     1      0    1123
                                              7 COMMON     1     1      0
                   Absolute function *
                              _reset *
 ---------------------------------------------------------------------------------
 (3) _reset                                                2     1      1    1123
                                              5 COMMON     2     1      1
                   Absolute function *
                           _espi_int *
                           _espi_rst *
                           _espi_wr2 *
 ---------------------------------------------------------------------------------
 (4) _espi_wr2                                             1     0      1     211
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _espi_rst                                             1     1      0     124
                                              4 COMMON     1     1      0
                            _espi_op
 ---------------------------------------------------------------------------------
 (4) _espi_int                                             1     0      1     211
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _getSUM                                               5     4      1     461
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _getRegister                                          3     2      1     508
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _creatErrorFrame                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _tasks                                                9     8      1    2898
                                             14 BANK0      9     8      1
                   Absolute function *
                _EPWM1_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                         _getHWSpeed
                       _motor1SetDir *
                       _motor2SetDir *
 ---------------------------------------------------------------------------------
 (3) _motor2SetDir                                         1     0      1     121
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) _motor1SetDir                                         1     0      1      31
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) _getHWSpeed                                           6     4      2    1493
                                              6 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     683
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (6) _PWM3_LoadDutyValue                                   4     2      2      62
                                             12 COMMON     2     2      0
                                             12 BANK0      2     0      2
                         _getHWSpeed (ARG)
 ---------------------------------------------------------------------------------
 (6) _EPWM1_LoadDutyValue                                  4     2      2     422
                                             12 COMMON     2     2      0
                                             12 BANK0      2     0      2
                         _getHWSpeed (ARG)
 ---------------------------------------------------------------------------------
 (2) _setTimeBaseCounter@SpiCommunication$F2153            2     1      1     121
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setTimeBaseCounter@Comm$F2954                        2     1      1     121
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setTimeBaseCounter                                   2     1      1     121
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setSpeed                                             5     2      3     937
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (2) _setRegistersTable                                   11     9      2    3075
                                             12 COMMON     2     0      2
                                              0 BANK0      9     9      0
                             ___bmul
                            ___lwdiv
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                              10     6      4    1297
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              12     6      6     776
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     469
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     226
                                              8 COMMON     4     3      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _open                                                 2     1      1     276
                                              4 COMMON     2     1      1
                   Absolute function *
                            _espi_op *
 ---------------------------------------------------------------------------------
 (5) _espi_op                                              0     0      0     124
                           _SPI_Open
 ---------------------------------------------------------------------------------
 (6) _SPI_Open                                             4     4      0     124
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _espi_setInterrupHandler                              2     0      2     419
                                              2 COMMON     2     0      2
            _SPI_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _NewSpiDriver                                       115    58     57    1790
                                              0 COMMON     1     1      0
                                              0 BANK0     57     0     57
                                              0 BANK1     57    57      0
 ---------------------------------------------------------------------------------
 (2) _NewDCMotor                                          65    33     32    1093
                                              0 COMMON     1     1      0
                                              0 BANK0     64    32     32
 ---------------------------------------------------------------------------------
 (2) _GetTimeSystemInstance                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetCommunicationInstance                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     538
                   _EPWM1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                     _SPI_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     269
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2     269
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0     269
            _SPI_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _SPI_SetInterruptHandler                              2     0      2     269
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0    9576
                            _SPI_Isr
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0       0
                      _TMR4_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR4_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
                       _updateMillis *
 ---------------------------------------------------------------------------------
 (12) _updateMillis                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _dataReceived                                        1     1      0    1596
                                              5 COMMON     1     1      0
                   Absolute function *
                       _exchangeDone *
 ---------------------------------------------------------------------------------
 (13) _exchangeDone                                        4     3      1     798
                                              1 COMMON     4     3      1
                   Absolute function *
                            _espi_rd *
                           _espi_wr1 *
 ---------------------------------------------------------------------------------
 (14) _espi_wr1                                            1     0      1     174
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _espi_rd                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _exchangeDone                                        4     3      1     798
                                              1 COMMON     4     3      1
                   Absolute function *
                            _espi_rd *
                           _espi_wr1 *
 ---------------------------------------------------------------------------------
 (11) _interrupHandler                                     0     0      0    3192
                   Absolute function *
                       _dataReceived *
 ---------------------------------------------------------------------------------
 (12) _dataReceived                                        1     1      0    1596
                                              5 COMMON     1     1      0
                   Absolute function *
                       _exchangeDone *
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _espi_wr1                                            1     0      1     174
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _espi_rd                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _SPI_Isr                                             0     0      0    9576
                   Absolute function *
                            _SPI_Isr *
                    _interrupHandler *
 ---------------------------------------------------------------------------------
 (11) _interrupHandler                                     0     0      0    3192
                   Absolute function *
                       _dataReceived *
 ---------------------------------------------------------------------------------
 (10) _SPI_Isr                                             0     0      0    9576
                   Absolute function *
                            _SPI_Isr *
                    _interrupHandler *
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _SPI_Initialize
       _SPI_SetInterruptHandler
     _TMR2_Initialize
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _TMR6_Initialize
     _WDT_Initialize
   _appTasks
     Absolute function(Fake) *
     _GetCommunicationInstance *
     _GetTimeSystemInstance *
     _NewDCMotor *
     _NewSpiDriver *
     _TMR4_SetInterruptHandler *
     _espi_setInterrupHandler *
       _SPI_SetInterruptHandler
     _open *
       Absolute function(Fake) *
       _espi_op *
         _SPI_Open
     _runMotors *
       Absolute function(Fake) *
       _run *
     _setRegistersTable *
       ___bmul
         ___lwdiv (ARG)
       ___lwdiv
       _memcpy
       _memset
     _setSpeed *
     _setTimeBaseCounter *
     _setTimeBaseCounter@Comm$F2954 *
     _setTimeBaseCounter@SpiCommunication$F2153 *
     _tasks *
       Absolute function(Fake) *
       _EPWM1_LoadDutyValue *
         _getHWSpeed (ARG)
           ___aldiv
           ___lmul
       _PWM3_LoadDutyValue *
         _getHWSpeed (ARG)
           ___aldiv
           ___lmul
       _getHWSpeed *
         ___aldiv
         ___lmul
       _motor1SetDir *
       _motor2SetDir *
     _tasks@Comm$F2950 *
       Absolute function(Fake) *
       _commandHandler *
         Absolute function(Fake) *
         _creatErrorFrame *
         _getRegister *
           ___bmul
             ___lwdiv (ARG)
         _getSUM *
         _reset@Comm$F2985 *
           Absolute function(Fake) *
           _reset *
             Absolute function(Fake) *
             _espi_int *
             _espi_rst *
               _espi_op
                 _SPI_Open
             _espi_wr2 *
         _runMotors *
           Absolute function(Fake) *
           _run *
         _setMotor1Clockwise *
           Absolute function(Fake) *
           _setDir *
             Absolute function(Fake) *
             _EPWM1_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
             _PWM3_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
         _setMotor1Counterclockwise *
           Absolute function(Fake) *
           _setDir *
             Absolute function(Fake) *
             _EPWM1_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
             _PWM3_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
         _setMotor2Clockwise *
           Absolute function(Fake) *
           _setDir *
             Absolute function(Fake) *
             _EPWM1_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
             _PWM3_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
         _setMotor2Counterclockwise *
           Absolute function(Fake) *
           _setDir *
             Absolute function(Fake) *
             _EPWM1_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
             _PWM3_LoadDutyValue *
               _getHWSpeed (ARG)
                 ___aldiv
                 ___lmul
         _stopMotors *
           Absolute function(Fake) *
           _stop *
       _inputR *
         Absolute function(Fake) *
         _read *
       _outputW *
         Absolute function(Fake) *
         _write *
           Absolute function(Fake) *
           _espi_wr2 *
       _reset *
         Absolute function(Fake) *
         _espi_int *
         _espi_rst *
           _espi_op
             _SPI_Open
         _espi_wr2 *
       _rxDone *
       _transferFrames *
         _memcpy
       _txDone *
     _tasks@SpiCommunication$F2138 *
       Absolute function(Fake) *
       ___run *
       _reset *
         Absolute function(Fake) *
         _espi_int *
         _espi_rst *
           _espi_op
             _SPI_Open
         _espi_wr2 *
     _tasks@TimeSystem$F1858 *
     _wdt *
       Absolute function(Fake) *
       _healthy *

 _INTERRUPT_InterruptManager (ROOT)
   _SPI_Isr
     Absolute function(Fake) *
     _interrupHandler *
       Absolute function(Fake) *
       _dataReceived *
         Absolute function(Fake) *
         _exchangeDone *
           Absolute function(Fake) *
           _espi_rd *
           _espi_wr1 *
   _TMR4_ISR
     _TMR4_CallBack
       Absolute function(Fake) *
       _TMR4_DefaultInterruptHandler *
       _updateMillis *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     28      4D       9       96.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      39      13       71.2%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      36      15       67.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      3B      17       73.8%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      36      19       67.5%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     296      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      43      22       83.8%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      39      24       71.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     296      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Jul 03 14:56:54 2020

                                     _SPI_Initialize 0979                                 __end_of_dataReceived 090F  
                     ?_setTimeBaseCounter@Comm$F2956 0070                                       ___bmul@product 007A  
                                                 l11 0836                                                   l14 0A51  
                                                 l27 081B                                                   l69 0964  
                                                 l94 17ED                                                  l114 091E  
                                                l117 0A6B                                                  l310 0840  
                                                l217 0A0B                                                  l411 09CA  
                                                l253 0DA5                                                  l501 17F3  
                                                l421 0854                                                  l430 0849  
                                                l183 0AA2                                                  l423 0856  
                                                l192 17D2                                                  l432 084B  
                                                l504 0813                                                  l249 098C  
                                                l441 08E3                                                  l186 0874  
                                                l418 0851                                                  l450 0ABF  
                                                l427 0846                                                  l507 0823  
                                                l435 08D5                                                  l540 0F04  
                                                l444 08C7                                                  l189 0879  
                                                l461 0271                                                  l438 08BA  
                                                l447 0ADC                                                  l800 17F9  
                                                l536 03A6                                                  l297 17E7  
                                                l803 0003                                                  l643 07FC  
                                                l492 0D56                                                  l581 08FF  
                                                l806 093F                                                  l638 0800  
                                                l655 0F6F                                                  l568 0892  
                                                l488 0E46                                                  l648 0DF5  
                                                l752 0B01                                                  l569 0893  
                                                l497 0C49                                                  l761 0A86  
                                                l737 06BE                                                  l498 0C50  
                                                l842 17D6                                                  l690 0D0F  
                                                l746 06A5                                                  l755 0B53  
                                                l675 08F1                                                  l836 17DB  
                                                l772 0E9B                                                  l860 08AA  
                                                l764 092E                                                  l684 0CC9  
                                                l845 08A0                                                  l669 0A21  
                                                l862 08AD                                                  l782 03E8  
                                                l790 0487                                                  l687 17FF  
                                                l767 0951                                                  l679 09A0  
                                                l857 0A37                                                  l699 0607  
                                                l797 0BB0                                                  _PR2 001B  
                                                _PR4 0416                                                  u610 0879  
                                                _PR6 041D                                                  u611 0878  
                     SPI_SetInterruptHandler@handler 0070                                                  _spi 0220  
                                                _wdt 09B6                                                  _run 081C  
                                    _TMR2_Initialize 0814                                                  wreg 0009  
                                               l2000 0A03                                                 l2010 086E  
                                               l2002 0A05                                                 l1026 0BE3  
                                               l2012 0871                                                 l2004 0A06  
                                               l2020 083A                                                 l2014 0872  
                                               l2006 0A08                                                 l2022 083B  
                                               l1038 09B5                                                 l2008 0A0A  
                                               l2024 083D                                                 l2016 17CF  
                                               l2018 0837                                                 l1077 0F83  
                                               l1087 0FFF                                                 l4000 0C51  
                                               l4010 0C65                                                 l4002 0C53  
                                               l4100 077F                                                 l1292 0C8C  
                                               l4020 0C82                                                 l4012 0C69  
                                               l4004 0C59                                                 l4030 0956  
                                               l4110 0793                                                 l4102 0783  
                                               l4014 0C78                                                 l4006 0C5C  
                                               l4022 0C88                                                 l4040 097E  
                                               l4032 0958                                                 l4120 07A7  
                                               l4112 0797                                                 l4104 0787  
                                               l4016 0C7C                                                 l4008 0C61  
                                               l4200 08F2                                                 l4042 097F  
                                               l4034 095A                                                 l4026 0952  
                                               l4130 07CF                                                 l4122 07AF  
                                               l4114 079B                                                 l4106 078B  
                                               l4018 0C7D                                                 l1474 0B7F  
                                               l4202 08F4                                                 l4210 08F8  
                                               l4050 09B6                                                 l4044 0981  
                                               l4036 0961                                                 l4028 0955  
                                               l4300 0A87                                                 l4060 0DF6  
                                               l4132 07D7                                                 l4124 07B7  
                                               l4116 079F                                                 l4108 078F  
                                               l4212 0A0C                                                 l4220 055D  
                                               l4052 09C9                                                 l4046 0988  
                                               l4038 0979                                                 l4054 0887  
                                               l4070 0E15                                                 l4062 0E04  
                                               l4134 07DF                                                 l4126 07BF  
                                               l4118 07A3                                                 l4142 0894  
                                               l1478 076B                                                 l4150 0C1A  
                                               l4214 17FA                                                 l4230 0593  
                                               l4222 0569                                                 l4310 00DE  
                                               l4302 00AE                                                 l4048 098A  
                                               l4056 088E                                                 l4080 0E29  
                                               l4072 0E19                                                 l4064 0E09  
                                               l4136 07E0                                                 l4128 07C7  
                                               l4144 0899                                                 l3600 0DA2  
                                               l4240 0E47                                                 l4152 0C2D  
                                               l4160 0272                                                 l4232 05B2  
                                               l4224 0572                                                 l4216 054B  
                                               l4208 08F4                                                 l4320 014E  
                                               l4312 00F8                                                 l4304 00AF  
                                               l1930 0832                                                 l4146 0002  
                                               l4090 0E36                                                 l4082 0E2D  
                                               l4074 0E1D                                                 l4066 0E0D  
                                               l4138 07EE                                                 l4242 0E56  
                                               l4154 0C36                                                 l4170 029E  
                                               l4162 0273                                                 l4250 03A8  
                                               l4234 05E2                                                 l4226 057E  
                                               l4218 0554                                                 l4330 0195  
                                               l4322 015D                                                 l4314 0108  
                                               l4306 00B7                                                 l1932 0833  
                                               l1940 0819                                                 l4092 0E38  
                                               l4084 0E31                                                 l4076 0E21  
                                               l4068 0E11                                                 l3604 0DA4  
                                               l4244 0E62                                                 l4156 0C40  
                                               l3612 0A38                                                 l4180 02ED  
                                               l4172 02A4                                                 l4164 027D  
                                               l3620 0A27                                                 l4260 03D3  
                                               l4252 03AB                                                 l4236 05EE  
                                               l4228 0587                                                 l4340 01D4  
                                               l4332 01A5                                                 l4324 0165  
                                               l4316 0137                                                 l4308 00C3  
                                               l1934 0814                                                 l4086 0E33  
                                               l4078 0E25                                                 l4246 0E75  
                                               l4158 17EE                                                 l3614 0A52  
                                               l4190 0382                                                 l4182 031D  
                                               l4174 02C0                                                 l4166 028B  
                                               l3630 08A6                                                 l3622 0A2A  
                                               l3702 0DF1                                                 l3710 0F19  
                                               l4270 041A                                                 l4262 03D9  
                                               l4254 03B1                                                 l4238 05FD  
                                               l4350 0215                                                 l4342 01DF  
                                               l4334 01B9                                                 l4326 0174  
                                               l4318 013E                                                 l1960 0912  
                                               l1928 082D                                                 l1936 0817  
                                               l4088 0E34                                                 l4096 076C  
                                               l3608 17D7                                                 l3800 0F87  
                                               l4184 032E                                                 l4176 02CA  
                                               l4168 0294                                                 l3624 0A2D  
                                               l3616 17D3                                                 l3640 0D3D  
                                               l3632 0D10                                                 l3712 0F4C  
                                               l3720 0F66                                                 l4272 041B  
                                               l4264 03E2                                                 l4256 03BA  
                                               l4248 03A7                                                 l4360 0247  
                                               l4352 0220                                                 l4344 01EE  
                                               l4336 01CD                                                 l4328 018A  
                                               l1962 0913                                                 l1938 0818  
                                               l4098 077A                                                 l3810 0FA9  
                                               l3802 0F92                                                 l4186 0348  
                                               l4178 02E5                                                 l4194 038A  
                                               l3730 0A70                                                 l3626 0A32  
                                               l3618 0A22                                                 l3650 0CDF  
                                               l3634 0D1C                                                 l3642 080D  
                                               l3714 0F63                                                 l3706 0F05  
                                               l4282 0443                                                 l4274 0429  
                                               l4266 03EB                                                 l4258 03BF  
                                               l4354 0224                                                 l4346 01F7  
                                               l4338 01D0                                                 l1964 0915  
                                               l3660 09A2                                                 l3820 0FD9  
                                               l3812 0FB4                                                 l3804 0F96  
                                               l4188 0352                                                 l3732 0A77  
                                               l3628 08A1                                                 l3652 0CE8  
                                               l3644 081C                                                 l3636 0D2A  
                                               l3900 0619                                                 l3708 0F0E  
                                               l3724 0F6B                                                 l4460 0479  
                                               l4284 046E                                                 l4276 042C  
                                               l4268 03EF                                                 l4292 0470  
                                               l4356 0238                                                 l4348 0206  
                                               l4364 025C                                                 l4372 0857  
                                               l1966 0917                                                 l1958 090F  
                                               l1990 09F6                                                 l3590 0D5D  
                                               l3670 09B4                                                 l3662 09A3  
                                               l3750 0B5D                                                 l3830 0FF7  
                                               l3822 0FDA                                                 l3814 0FB8  
                                               l3806 0F9E                                                 l4462 0398  
                                               l3734 0A7B                                                 l3654 0CF3  
                                               l3646 0CCA                                                 l3742 092F  
                                               l3638 0D34                                                 l3910 0627  
                                               l3902 061B                                                 l4278 043F  
                                               l4358 0243                                                 l4366 026E  
                                               l4374 085A                                                 l1968 091A  
                                               l1992 09F9                                                 l3592 0D7B  
                                               l3664 09A7                                                 l3752 0B65  
                                               l3824 0FE1                                                 l3816 0FBF  
                                               l3808 0FA6                                                 l3840 0841  
                                               l3760 0B85                                                 l3736 0A7F  
                                               l3728 0A6D                                                 l3656 0CFB  
                                               l3648 0CD5                                                 l3744 0931  
                                               l3680 08BB                                                 l3920 0657  
                                               l3912 0628                                                 l4376 085B  
                                               l1994 09FA                                                 l3834 17E8  
                                               l3594 0D7C                                                 l3666 09AB  
                                               l3754 0B69                                                 l4298 17F4  
                                               l3818 0FD1                                                 l3826 0FE7  
                                               l3850 0EA9                                                 l3842 0E9C  
                                               l3746 0940                                                 l3738 0A85  
                                               l3658 0D03                                                 l3674 08C8  
                                               l3682 0AC0                                                 l3930 068F  
                                               l3922 065C                                                 l3914 0637  
                                               l3690 0DBA                                                 l4458 0266  
                                               l4378 085C                                                 l1996 09FD  
                                               l3836 17E2                                                 l3596 0D8B  
                                               l3588 0D58                                                 l3668 09AD  
                                               l3756 0B73                                                 l3748 0B54  
                                               l3828 0FEC                                                 l3780 0BB1  
                                               l3860 0EBF                                                 l3852 0EB2  
                                               l3844 0EA6                                                 l3772 0BA4  
                                               l3684 0AA3                                                 l3676 08AE  
                                               l3932 0691                                                 l3924 0667  
                                               l3916 063E                                                 l3908 061F  
                                               l3692 0DE9                                                 l3940 0ADD  
                                               l1998 09FF                                                 l3598 0DA0  
                                               l3790 0BDB                                                 l3782 0BB9  
                                               l3862 0EDC                                                 l3838 084C  
                                               l3774 0BA9                                                 l3766 0B87  
                                               l3758 0B80                                                 l3678 08D6  
                                               l3926 0671                                                 l3918 0652  
                                               l3934 06A6                                                 l3686 0DA6  
                                               l3942 0AEB                                                 l3960 06CB  
                                               l3784 0BBD                                                 l3768 0B99  
                                               l3776 0BAF                                                 l3936 06AD  
                                               l3928 0684                                                 l3688 0DAF  
                                               l3880 099F                                                 l3872 098D  
                                               l3952 091F                                                 l3970 06F1  
                                               l3962 06D3                                                 l3954 06C0  
                                               l3794 0F70                                                 l3786 0BC5  
                                               l3858 0EB7                                                 l3938 06B0  
                                               l3698 0DEC                                                 l3946 0B2A  
                                               l3874 0997                                                 l3866 0800  
                                               l3980 071C                                                 l3972 06FA  
                                               l3964 06DF                                                 l3956 06C4  
                                               l3796 0F72                                                 l3788 0BCC  
                                               l3948 0B38                                                 l3876 099D  
                                               l3868 08E4                                                 l3892 0CC8  
                                               l3884 0C8D                                                 l3990 0750  
                                               l3982 0731                                                 l3974 0706  
                                               l3798 0F76                                                 l3886 0C96  
                                               l3992 0755                                                 l3976 0712  
                                               l3968 06E9                                                 l3896 0608  
                                               l3888 0CC6                                                 l3994 075D  
                                               l3986 073B                                                 l3898 060B  
                                               l3996 0761                                                 l3988 074C  
                                               l3998 0765                                                 ?_wdt 0070  
                                               ?_run 0070                                                 u3000 0C2D  
                                               u3001 0C2C                                                 u3010 0C36  
                                               u3011 0C35                                                 u3020 027D  
                                               u3100 0572                                                 u3005 0C29  
                                               u3021 027C                                                 u3101 0571  
                                               _LATA 010C                                                 u3030 029E  
                                               u3110 0587                                                 u3031 029D  
                                               u3111 0586                                                 _LATC 010E  
                                               u3040 02CA                                                 u2400 0D1C  
                                               u3200 043F                                                 u3120 05B2  
                                               u3041 02C9                                                 u2401 0D1B  
                                               u3201 043E                                                 u3121 05B1  
                                               u2410 09A7                                                 u3050 031D  
                                               u3210 046E                                                 u3130 05E2  
                                               u2411 09A6                                                 u3051 031C  
                                               u3211 046D                                                 u3131 05E1  
                                               u2420 09B4                                                 u3140 0E52  
                                               u3060 0382                                                 u2500 0B99  
                                               u3220 00DA                                                 u2421 09B3  
                                               u3061 0381                                                 u2501 0B98  
                                               u3125 05AE                                                 u2350 0D5D  
                                               u3150 0E97                                                 u2510 0BAF  
                                               u2430 0DAF                                                 u3070 08FF  
                                               u3230 00F4                                                 u2351 0D5C  
                                               u2511 0BAE                                                 u2431 0DAE  
                                               u3071 08FE                                                 u2600 0FB8  
                                               u2520 0BBD                                                 u2440 0DBA  
                                               u3160 03BA                                                 u3080 0554  
                                               u3240 0133                                                 u2601 0FB7  
                                               u2521 0BBC                                                 u2441 0DB9  
                                               u3161 03B9                                                 u3081 0553  
                                               u2450 0F0E                                                 u3170 03D3  
                                               u3090 055D                                                 u3250 0170  
                                               u2451 0F0D                                                 u3171 03D2  
                                               u3091 055C                                                 u2620 0FD1  
                                               u2380 0A37                                                 u2460 0F19  
                                               u2700 08F0                                                 u3180 03E2  
                                               u3260 0220                                                 u2365 0A49  
                                               u2621 0FD0                                                 u2381 0A36  
                                               u2461 0F18                                                 u2701 08EE  
                                               u3181 03E1                                                 u3261 021F  
                                               u2550 0BDB                                                 u2470 0A85  
                                               u2390 08A6                                                 u2710 08F1  
                                               u3190 041A                                                 u3270 0243  
                                               u2375 0A63                                                 u2615 0FB9  
                                               u2551 0BDA                                                 u2535 0BC6  
                                               u2471 0A84                                                 u2391 08A5  
                                               u3191 0419                                                 u3271 0242  
                                               u2480 0B7F                                                 u2640 0FE7  
                                               u2560 0F76                                                 u2800 068F  
                                               u2720 0997                                                 u2481 0B7E  
                                               u2641 0FE6                                                 u2625 0FCD  
                                               u2561 0F75                                                 u2545 0BCD  
                                               u2801 068E                                                 u2721 0996  
                                               u3265 021C                                                 u2650 0FEC  
                                               u2570 0F87                                                 u2490 0B85  
                                               u2810 06AD                                                 u2730 0C96  
                                               u2651 0FEB                                                 u2635 0FDB  
                                               u2571 0F86                                                 u2491 0B84  
                                               u2811 06AC                                                 u2731 0C95  
                                               u3275 023F                                                 u2820 06CA  
                                               u2580 0FA6                                                 u2660 0851  
                                               u2740 0CC6                                                 u2821 06C9  
                                               u2581 0FA5                                                 u2661 0850  
                                               u2741 0CC5                                                 u2910 0C78  
                                               u2830 06E8                                                 u2670 0846  
                                               u2750 0619                                                 u2911 0C77  
                                               u2831 06E7                                                 u2671 0845  
                                               u2751 0618                                                 u2840 071B  
                                               u2680 0EA6                                                 u2760 0627  
                                               u2905 0C6A                                                 u2841 071A  
                                               u2681 0EA5                                                 u2761 0626  
                                               u2930 0C88                                                 u2850 073A  
                                               u2690 0EB2                                                 u2770 0657  
                                               u2931 0C87                                                 u2915 0C74  
                                               u2851 0739                                                 u2595 0FAA  
                                               u2691 0EB1                                                 u2771 0656  
                                               u2860 076B                                                 u2780 065C  
                                               u2940 09C9                                                 u2925 0C7E  
                                               u2861 076A                                                 u2781 065B  
                                               u2941 09C8                                                 u2950 088E  
                                               u2870 0C59                                                 u2790 0667  
                                               u2951 088D                                                 u2871 0C58  
                                               u2791 0666                                                 u2960 0E00  
                                               u2970 0E42                                                 u2890 0C69  
                                               u2891 0C68                                                 u2980 0776  
                                               u2885 0C5D                                                 u2990 07F8  
                                               i1l91 0886                                                 i1l87 17E1  
                                               i1l97 17CA                                                 _PLLR 04D6  
                                               _TMR2 001A                                                 _TMR4 0415  
                                               _TMR6 041C                                                 _WPUA 020C  
                                               _WPUC 020E                                                 _buff 00E1  
                                               _comm 0166                                                 _main 0857  
                                               _read 0DA6                                                 _tmr1 03BB  
                                               _tmr2 03A0                                                 _tmr3 0448  
                                               _open 0A0C                                                 _time 0167  
                                               fsr0h 0005                                                 fsr1h 0007  
                                               indf0 0000                                                 fsr0l 0004  
                                               indf1 0001                                                 fsr1l 0006  
                                               btemp 007E                                                 _stop 080D  
                                    __end_of_SPI_Isr 0979                            __size_of_tasks@Comm$F2950 00E1  
                                               start 0033                               __end_of_SPI_Initialize 098D  
                              ??_EPWM1_LoadDutyValue 007C                                    ___bmul@multiplier 007B  
                         ??_TMR4_SetInterruptHandler 0072                           ?_setMotor1Counterclockwise 0070  
                        __size_of_setMotor1Clockwise 000E                              ?_tasks@TimeSystem$F1859 0070  
                                              ??_wdt 0079                                                ??_run 0071  
                    __end_of_SPI_SetInterruptHandler 17E8                       __size_of_OSCILLATOR_Initialize 000C  
                        __size_of_setMotor2Clockwise 000E                                    NewDCMotor@_setDir 0020  
                      __end_of_OSCILLATOR_Initialize 087A                                      __end_of___aldiv 1000  
                                  ??_creatErrorFrame 0070                                                ?_main 0070  
                                              ?_read 0070                                                ?_open 0074  
                                              ?_stop 0070                          __size_of_setTimeBaseCounter 0006  
                                              _T2CON 001C                                                _T4CON 0417  
                                              _T6CON 041E                                      __end_of___lwdiv 0C8D  
                                              i1l150 0031                                                i1l143 0018  
                                              i1l144 0031                                                i1l145 0023  
                                              i1l414 090E                                                i1l294 0978  
                                              i1l572 086D                                                i1l833 09F5  
                                              i1l666 054A                                                i1l839 17CE  
                                              i1l848 07FF                                                _TRISA 008C  
                                              _TRISC 008E                                      _TMR4_Initialize 0952  
                                ___lmul@multiplicand 0074                                      __end_of_healthy 0CCA  
                                   __end_of_TMR4_ISR 17E2                                                ___run 0800  
                       _currentTimeMillis@Comm$F3024 006B                                           _NewDCMotor 0DF6  
                                              _close 0000                                      __end_of_espi_rd 0800  
                                    __end_of_espi_op 17DC                                       _WDT_Initialize 17CF  
                                              _table 02A0                                                _reset 0CCA  
                                              _tasks 0272                                                _state 0168  
                                              _write 0F05                                     __end_of_SPI_Open 0DA6  
                            __end_of_PWM3_Initialize 0837                                                pclath 000A  
                                      ?_NewSpiDriver 0020                             __end_of_reset@Comm$F2985 0940  
                                      ?_exchangeDone 0071                                                status 0003  
                                              wtemp0 007E                                      __end_of_outputW 0B54  
                                    ?_SPI_Initialize 0070                                     ?_interrupHandler 0070  
                                    __initialization 0035                       __end_of_tasks@TimeSystem$F1858 0900  
                                     _transferFrames 091F                                         __end_of_main 0862  
                                       __end_of_read 0DF6                                         __end_of_open 0A22  
                                       __end_of_stop 0814                              __end_of_TMR2_Initialize 081C  
                        ?_INTERRUPT_InterruptManager 0070                                               ??_main 007E  
                                             ??_read 0073                                               ??_open 0075  
                                             ??_stop 0071                           ?_setMotor2Counterclockwise 0070  
                  __size_of_GetCommunicationInstance 0002                            ?_GetCommunicationInstance 0070  
                           ?_espi_setInterrupHandler 0072                               __end_of_WDT_Initialize 17D3  
                                    _TMR6_Initialize 0837                                               ?___run 0070  
                               __size_of_getRegister 0031                                               _CCPR1H 0292  
                                             _CCPR3H 0312                                               _CCPR1L 0291  
                                             _CCPR3L 0311                                               ?_reset 0075  
                                          ??_SPI_Isr 0070                                               ?_tasks 002E  
                                             _ANSELA 018C                                               _ANSELC 018E  
                                             _BORCON 0116                                               ?_write 0071  
                                     ??_NewSpiDriver 0070                                               i1l3120 0965  
                                             i1l3122 096A                                               i1l3124 0971  
                                             i1l3116 087A                                               i1l3126 0976  
                                             i1l3118 0881                                               i1l3072 09E0  
                                             i1l3074 09E5                                               i1l3076 09EF  
                                             i1l2700 04E0                                               i1l2710 0535  
                                             i1l2702 04F2                                               i1l2704 0508  
                                             i1l2712 053C                                               u130_20 049E  
                                             u130_21 049D                                               i1l2706 051F  
                                             i1l2652 17CB                                               i1l2708 052A  
                                             u130_25 049A                                               i1l2742 0900  
                                             i1l3390 17DC                                               i1l3470 000F  
                                             i1l2656 07FD                                               u131_20 04D2  
                                             i1l3392 17DE                                               i1l3480 002D  
                                             i1l3472 0014                                               u131_21 04D1  
                                             i1l2690 049E                                               i1l3474 001D  
                                             i1l3466 0006                                               i1l2692 04B3  
                                             i1l3468 000A                                               i1l2694 04BC  
                                             i1l3478 0028                                               u132_20 0508  
                                             i1l2696 04C7                                               i1l2688 0488  
                                             i1l2936 0862                                               u132_21 0507  
                                             i1l2698 04D2                                               u132_25 0504  
                                             u133_20 0535                                               u133_21 0534  
                                             u230_20 0028                                               u230_21 0027  
                                             u231_20 002D                                               u231_21 002C  
                                             u225_20 000A                                               u225_21 0009  
                                             u226_20 000F                                               u226_21 000E  
                                             u227_20 0014                                               u227_21 0013  
                                             u180_20 09E5                                               u228_20 001D  
                                             u180_21 09E4                                               u228_21 001C  
                                             u229_20 0022                                               u229_21 0021  
                                             u190_20 0971                                               u190_21 0970  
                                     ??_exchangeDone 0072                                               u188_20 0881  
                                             u188_21 0880                                               u189_20 096A  
                                             u189_21 0969                                               _OSCCON 0099  
                                             _WDTCON 0097                                __size_of_dataReceived 000F  
                                   __end_of_appTasks 0272                               __end_of_transferFrames 092F  
                                             ___bmul 09A1                                               ___lmul 0BB1  
                        __size_of_PWM3_LoadDutyValue 001A                                            ??___aldiv 0078  
                                             _getSUM 0A6C                                            ??___lwdiv 0074  
                                             _isDone 0000                              setRegistersTable@length 007D  
                                     NewSpiDriver@cl 0022                                       NewSpiDriver@ie 002C  
                                     NewSpiDriver@rd 0024                                       NewSpiDriver@op 0020  
                                   __end_of_espi_wr1 17CF                                     __end_of_espi_wr2 17D7  
                                   __end_of_espi_int 08AE                         setTimeBaseCounter@timeMillis 0070  
                                   __end_of_espi_rst 0A38                                               _memcpy 0B54  
                                             _memset 06BF                              __end_of_TMR4_Initialize 0965  
                                             _inputR 0ADD                                               _setDir 0D10  
                                             _rxDone 098D                                               _motor1 01C0  
                                             _motor2 01A0                                               _txDone 08E4  
                                             _timers 015D                                            ??_healthy 0071  
setTimeBaseCounter@SpiCommunication$F2153@timeMillis 0070                                     __end_of_setSpeed 0C51  
               __end_of_TMR4_DefaultInterruptHandler 17CB                __size_of_TMR4_DefaultInterruptHandler 0001  
                       _TMR4_DefaultInterruptHandler 17CA                                            ??_espi_rd 0070  
                                          ??_espi_op 0074                                   getRegister@address 007C  
                                  commandHandler@reg 0037                                      ?_WDT_Initialize 0070  
                                        ?_NewDCMotor 0020             TMR4_SetInterruptHandler@InterruptHandler 0070  
                                       _dataReceived 0900                                            ??_outputW 007A  
                                   ?_PWM3_Initialize 0070                                     ??_commandHandler 0035  
                                  _SYSTEM_Initialize 0A87                              __end_of__initialization 00AA  
                   __size_of_SPI_SetInterruptHandler 0006                                     _tasks@Comm$F2950 03A7  
                                 ?_SYSTEM_Initialize 0070                                      ?_transferFrames 0070  
                                ___bmul@multiplicand 0078                                    ?_EPWM1_Initialize 0070  
                                     __pcstackCOMMON 0070                                __end_of_TMR4_CallBack 0887  
                                       __pidataBANK0 0824                                         __pidataBANK2 09CB  
                                       __pidataBANK5 0BE4                                         __pidataBANK8 0B02  
                                ??_SYSTEM_Initialize 0072                                        __end_of___run 0801  
                                          ?_TMR4_ISR 0070                                   ??_EPWM1_Initialize 0070  
                               setRegistersTable@tab 007C                                           _accelerate 0000  
                                      __end_of_reset 0D10                                        __end_of_tasks 03A7  
                                      __end_of_write 0F70                                     ?_TMR2_Initialize 0070  
                            __end_of_TMR6_Initialize 0841                                            ?_SPI_Open 0070  
                                     _OPTION_REGbits 0095                        ?_TMR4_DefaultInterruptHandler 0070  
                                       NewTimer@F121 0340                                              ??___run 0072  
                          __end_of_SYSTEM_Initialize 0AA3                                              ??_reset 0076  
                                            ??_tasks 002F                                              ??_write 0074  
                                         __pbssBANK0 006B                                           __pbssBANK1 00D9  
                                         __pbssBANK2 015D                                           __pbssBANK3 01A0  
                                         __pbssBANK4 0220                                           __pbssBANK6 0320  
                                         __pbssBANK7 03A0                                           __pbssBANK8 0448  
                                         __pbssBANK9 04A0                                _TMR4_InterruptHandler 00DF  
                              _GetTimeSystemInstance 0887                                           _getHWSpeed 0E9C  
                                    _creatErrorFrame 0940                                           __pmaintext 0857  
                                NewDCMotor@_setSpeed 0022                                              ?___bmul 0078  
                                            ?___lmul 0070                          ??_setMotor1Counterclockwise 0034  
                                         ??_TMR4_ISR 0070                                              ?_getSUM 0070  
                                         __pintentry 0004                                  __size_of_NewDCMotor 0051  
                                            _CCP1CON 0293                                              _CCP3CON 0313  
                                            _ECCP1AS 0295                                              ?_memcpy 0070  
                                            ?_memset 0070                                       ___lmul@product 0078  
                                            ?_inputR 0070                                              ?_setDir 002E  
                               __end_of_NewSpiDriver 07FD                                     ?_TMR4_Initialize 0070  
                                            ?_rxDone 0070                                              _APFCON0 011D  
                                            _APFCON1 011E                                              ?_txDone 0070  
                                         ??_SPI_Open 0070                                 __end_of_exchangeDone 054B  
                   tasks@SpiCommunication$F2138@this 0077                                         espi_wr1@byte 0070  
                                       espi_wr2@byte 0070                                            ?_appTasks 0070  
                                            _OSCTUNE 0098                                              _PWM1CON 0294  
                                 __size_of_runMotors 001D                                              _SSP1ADD 0212  
                                            _SSP1BUF 0211                                              _SPI_Isr 0965  
                                      ?_motor1SetDir 0070                                        ?_motor2SetDir 0070  
  __end_of_setTimeBaseCounter@SpiCommunication$F2153 1800   __size_of_setTimeBaseCounter@SpiCommunication$F2153 0006  
          _setTimeBaseCounter@SpiCommunication$F2153 17FA           ?_setTimeBaseCounter@SpiCommunication$F2155 0070  
        ??_setTimeBaseCounter@SpiCommunication$F2157 0071                          __end_of_EPWM1_LoadDutyValue 0A6C  
                                   ??_SPI_Initialize 0072                                            ?_espi_wr1 0070  
                                          ?_espi_wr2 0070                                            ?_espi_int 0070  
                                          ?_espi_rst 0070                                    ?_reset@Comm$F2986 0070  
                                 ??_reset@Comm$F2988 0077                                            ?_setSpeed 0070  
                         __end_of_setMotor1Clockwise 08D6                     __end_of_GetCommunicationInstance 0004  
                               _SPI_InterruptHandler 00DD                                              ___aldiv 0F70  
                                    __size_of___bmul 0015                           __end_of_setMotor2Clockwise 08E4  
                                    __size_of___lmul 0033                                              ___lwdiv 0C51  
                                    __size_of_getSUM 001B                 __end_of_tasks@SpiCommunication$F2138 0608  
              __size_of_tasks@SpiCommunication$F2138 00BD                         _tasks@SpiCommunication$F2138 054B  
                         __end_of_setTimeBaseCounter 17F4              setTimeBaseCounter@Comm$F2954@timeMillis 0070  
                                    __size_of_memcpy 002C                                      __size_of_memset 00AD  
                                   ?_TMR6_Initialize 0070                                      __size_of_inputR 0025  
                                    __size_of_setDir 0047                                              _nTimers 006E  
                                    __size_of_rxDone 0014                                              __ptext1 00AE  
                                            __ptext2 09B6                                              __ptext3 0C8D  
                                            __ptext4 08F2                                              __ptext5 054B  
                                            __ptext6 0800                                              __ptext7 03A7  
                                            __ptext8 08E4                                              __ptext9 091F  
                                            _healthy 0C8D                                      __size_of_txDone 000E  
                                    NewSpiDriver@wr1 0026                                      NewSpiDriver@wr2 0028  
                                    NewSpiDriver@spi 00A0                                      NewSpiDriver@rst 002A  
                        ??_setMotor2Counterclockwise 0034                                              _espi_cl 0000  
                              _OSCILLATOR_Initialize 086E                                              _espi_rd 07FD  
                                            _espi_op 17D7                                            _T2CONbits 001C  
                                       __size_of_wdt 0015                                         __size_of_run 0008  
                                            getSUM@i 0073                                              getSUM@n 0070  
                                   ___aldiv@dividend 0074                                            _T4CONbits 0417  
                           ??_PIN_MANAGER_Initialize 0070                    __size_of_TMR4_SetInterruptHandler 0006  
                                         _inputFrame 00E8                            ?_TMR4_SetInterruptHandler 0070  
                                          _T6CONbits 041E                                           ??_appTasks 0060  
                                            _speedm1 016B                                              _speedm2 0169  
                          _setMotor1Counterclockwise 08AE                                       ??_motor1SetDir 0071  
                                     ??_motor2SetDir 0071                                           getSUM@buff 0074  
                         __size_of_SYSTEM_Initialize 001C                                              _outputW 0B2A  
                                            clrloop0 0802                                 end_of_initialization 00AA  
                     ??_TMR4_DefaultInterruptHandler 0070                              __end_of_creatErrorFrame 0952  
                            _SPI_SetInterruptHandler 17E2                                              memcpy@d 0078  
                                            memcpy@n 0074                                              memcpy@s 007A  
                                         ??_espi_wr1 0071                                           ??_espi_wr2 0071  
                                         ??_espi_int 0071                                              init_ram 0807  
                                         ??_espi_rst 0074                                              memset@c 0070  
                                            memset@k 0077                                              memset@n 0072  
                                            memset@s 0079                               ?_GetTimeSystemInstance 0070  
                                            initloop 0808                     __size_of_espi_setInterrupHandler 000D  
                                        ?_getHWSpeed 0026                                           _resetTimer 0000  
                                         ??_setSpeed 0073                                              run@this 0070  
                                   ___aldiv@quotient 0022                                    __end_of_runMotors 0ADD  
                                   ??_WDT_Initialize 0070                             __size_of_interrupHandler 0016  
                      ?_tasks@SpiCommunication$F2140 0077                                    _spi_configuration 1800  
                           __end_of_tasks@Comm$F2950 0488                                        ??_getRegister 007D  
                                          _TRISCbits 008E                                    setSpeed@speed_X10 0071  
                                       ??_NewDCMotor 0070                                     ??_transferFrames 007C  
                          _setMotor2Counterclockwise 08BB                                       ___run@function 0070  
                                         _stopMotors 0AA3                                        ?_updateMillis 0070  
                         __end_of_PWM3_LoadDutyValue 0A52                                __size_of_NewSpiDriver 0091  
                              __size_of_exchangeDone 00C3                                setRegistersTable@F441 0148  
                                     __end_of___bmul 09B6                            __end_of_spi_configuration 1804  
                                     __end_of___lmul 0BE4                                   __end_of_NewDCMotor 0E47  
                           _GetCommunicationInstance 0002                                       __end_of_getSUM 0A87  
                                  __size_of_TMR4_ISR 0006                                setRegistersTable@reg0 0024  
                                     __end_of_memcpy 0B80                               ?_OSCILLATOR_Initialize 0070  
                                     __end_of_memset 076C                                       __end_of_inputR 0B02  
                                     __end_of_setDir 0D57                                       __end_of_rxDone 09A1  
                                     __end_of_txDone 08F2                                     _state@Comm$F3023 006C  
                                  __size_of_SPI_Open 004F                                  __size_of_getHWSpeed 0069  
                                start_initialization 0035                            __size_of_EPWM1_Initialize 0010  
                    __size_of_PIN_MANAGER_Initialize 0016                                          __end_of_wdt 09CB  
                                        __end_of_run 0824                            ??_SPI_SetInterruptHandler 0072  
                                    motor1SetDir@dir 0070                         EPWM1_LoadDutyValue@dutyValue 002C  
                                __end_of_getRegister 0BB1                                     ?_creatErrorFrame 0070  
                                       _NewSpiDriver 076C                                           read@length 0072  
                                       _exchangeDone 0488                             ??_tasks@TimeSystem$F1861 0070  
                                     ??_updateMillis 0070                                           espi_int@ie 0070  
                                    motor2SetDir@dir 0070                       SPI_Open@spiUniqueConfiguration 0073  
                           __size_of_PWM3_Initialize 000A                                             ??___bmul 0079  
                                           ??___lmul 0078                                          _CCPTMRSbits 029E  
                                           ??_getSUM 0071                                 __end_of_motor1SetDir 0857  
                               __end_of_motor2SetDir 084C                                          __pdataBANK0 0062  
                                        __pdataBANK2 0148                                          __pdataBANK5 02A0  
                                        __pdataBANK8 0420                                             ??_memcpy 0076  
                                           ??_memset 0074                                             ??_inputR 0077  
                                           ??_setDir 0030                                             ??_rxDone 0071  
                                           ??_txDone 0071                                           memset@dest 0076  
                                          ___latbits 0002                                        __pcstackBANK0 0020  
                                      __pcstackBANK1 00A0                                        __pcstackBANK2 0120  
                     ??_tasks@SpiCommunication$F2142 0020                             __size_of_TMR2_Initialize 0008  
                                  ??_interrupHandler 0076                                             ?_SPI_Isr 0070  
                             __size_of_TMR4_CallBack 000D                                    __size_of_appTasks 01C4  
                            _espi_setInterrupHandler 0894                                           setDir@this 002E  
                                      appTasks@F3078 0420                                            _changeDir 0000  
                                          __pnvBANK1 00ED                                          ?_stopMotors 0070  
                 __size_of_setMotor1Counterclockwise 000D                                    __size_of_espi_wr1 0004  
                                  __size_of_espi_wr2 0004                                    __size_of_espi_int 000D  
                                  __size_of_espi_rst 0016                                    NewSpiDriver@F2536 04A0  
                                   ___lwdiv@dividend 0072                               _PIN_MANAGER_Initialize 09F6  
                         espi_setInterrupHandler@fun 0072                                    _setRegistersTable 0E47  
                                           ?___aldiv 0070                              __size_of_commandHandler 00B7  
                   __end_of_TMR4_SetInterruptHandler 17EE                                    __size_of_setSpeed 0037  
                                           ?___lwdiv 0070                                   ?_setRegistersTable 007C  
                       ??_INTERRUPT_InterruptManager 0070                                           rxDone@this 0070  
                          __size_of_reset@Comm$F2985 0011                                             ?_healthy 0070  
                                 _setMotor1Clockwise 08C8                                             ?_espi_rd 0070  
                                           ?_espi_op 0070                                  ??_setRegistersTable 0020  
                                        _getRegister 0B80                                   _setMotor2Clockwise 08D6  
                           __size_of_TMR4_Initialize 0013                                       __size_of___run 0001  
                                   ___lwdiv@quotient 0076                                   _setTimeBaseCounter 17EE  
                                ?_setMotor1Clockwise 0070                                             ?_outputW 0078  
                            ??_GetTimeSystemInstance 0070                                       __size_of_reset 0046  
                                     __size_of_tasks 0135                                       __size_of_write 006B  
                    ??_setTimeBaseCounter@Comm$F2958 0071                                  ?_setMotor2Clockwise 0070  
                                    ___aldiv@divisor 0070                                           txDone@this 0070  
                                    ___aldiv@counter 0020                                             _LATAbits 010C  
                                          getSUM@out 0072                                             _LATCbits 010E  
                                ?_setTimeBaseCounter 0070                      __size_of_tasks@TimeSystem$F1858 000E  
                                       ??_getHWSpeed 007C                                            clear_ram0 0801  
                                           _PIE1bits 0091                                             _PIE2bits 0092  
                                           _PIE3bits 0093                            __end_of_setRegistersTable 0E9C  
                __size_of_INTERRUPT_InterruptManager 002F                                          write@length 0073  
                                           _PIR1bits 0011                                             _PIR2bits 0012  
                                           _PIR3bits 0013                    __end_of_setMotor1Counterclockwise 08BB  
                                       getHWSpeed@sp 0028                         __size_of_EPWM1_LoadDutyValue 001A  
                               ??_setMotor1Clockwise 0034                                             _SSP1CON1 0215  
                                           _SSP1CON2 0216                                             _TMR4_ISR 17DC  
                                      _TMR4_CallBack 087A                                             _PSTR1CON 0296  
                                           _SSP1STAT 0214                   __size_of_setMotor2Counterclockwise 000D  
                               ??_setMotor2Clockwise 0034                                            _runMotors 0AC0  
                                           _SPI_Open 0D57                                    ??_PWM3_Initialize 0070  
                               ??_setTimeBaseCounter 0071                                 __end_of_updateMillis 086E  
                                  ?_tasks@Comm$F2951 0070                                     _EPWM1_Initialize 090F  
                                __size_of_stopMotors 001D                                         setSpeed@this 0070  
                                 __end_of_getHWSpeed 0F05                                   ??_tasks@Comm$F2953 0038  
                           __size_of_TMR6_Initialize 000A                                        ?_dataReceived 0070  
                          ??_espi_setInterrupHandler 0074                                    ___lmul@multiplier 0070  
           _currentTimeMillis@SpiCommunication$F2173 006D                                     __size_of_SPI_Isr 0014  
                                  ??_TMR2_Initialize 0070                           ??_GetCommunicationInstance 0070  
                              __size_of_motor1SetDir 000B                                __size_of_motor2SetDir 000B  
                                          memcpy@tmp 0077                                       ?_TMR4_CallBack 0070  
                            __size_of_SPI_Initialize 0014                              ??_OSCILLATOR_Initialize 0070  
                                   __size_of___aldiv 0090                                     __size_of___lwdiv 003C  
                                           _addTimer 0000                    __end_of_setMotor2Counterclockwise 08C8  
                                         ?_runMotors 0070                                       _timeoutCounter 00D9  
                           _TMR4_SetInterruptHandler 17E8                               _tasks@TimeSystem$F1858 08F2  
                                 _PWM3_LoadDutyValue 0A38                                     __size_of_healthy 003D  
                                          setDir@dir 002F                                     __size_of_espi_rd 0003  
                                   __size_of_espi_op 0005                                      ___lwdiv@divisor 0070  
                                     ??_dataReceived 0075                                             _appTasks 00AE  
                                    ___lwdiv@counter 0075                                             __speedm1 0164  
                                           __speedm2 0162                                             __ptext10 098D  
                                           __ptext11 0B2A                                             __ptext20 08C8  
                                           __ptext12 0F05                                             __ptext21 0AA3  
                                           __ptext13 0ADD                                             __ptext30 0A6C  
                                           __ptext22 080D                                             __ptext14 0DA6  
                                           __ptext31 0B80                                             __ptext23 0D10  
                                           __ptext15 0608                                             __ptext40 0A38  
                                           __ptext32 0940                                             __ptext24 081C  
                                           __ptext16 0AC0                                             __ptext41 17FA  
                                           __ptext33 0272                                             __ptext25 092F  
                                           __ptext17 08BB                                             __ptext50 0A0C  
                                           __ptext42 17F4                                             __ptext34 084C  
                                           __ptext26 0CCA                                             __ptext18 08D6  
                                           __ptext51 17D7                                             __ptext43 17EE  
                                           __ptext35 0841                                             __ptext27 17D3  
                                           __ptext19 08AE                                             __ptext60 0837  
                                           __ptext52 0D57                                             __ptext44 0C1A  
                                           __ptext36 0E9C                                             __ptext28 0A22  
                                           __ptext61 0952                                             __ptext53 0894  
                                           __ptext45 0E47                                             __ptext37 0BB1  
                                           __ptext29 08A1                                             __ptext62 17E8  
                                           __ptext54 076C                                             __ptext46 06BF  
                                           __ptext38 0F70                                             __ptext71 17DC  
                                           __ptext63 0814                                             __ptext55 0DF6  
                                           __ptext47 0B54                                             __ptext39 0A52  
                                           __ptext80 09E0                                             __ptext72 087A  
                                           __ptext64 0979                                             __ptext56 0887  
                                           __ptext48 0C51                                             __ptext73 17CA  
                                           __ptext65 17E2                                             __ptext57 0002  
                                           __ptext49 09A1                                             __ptext74 0862  
                                           __ptext66 082D                                             __ptext58 0A87  
                                ?_PWM3_LoadDutyValue 002C                                             __ptext75 0900  
                                           __ptext67 09F6                                             __ptext59 17CF  
                                           __ptext76 0488                                             __ptext68 086E  
                                           __ptext77 17CB                                             __ptext69 090F  
                                           __ptext78 07FD                                             __ptext79 0965  
                                       _SSP1CON1bits 0215                                         appTasks@regs 0120  
                                       _motor1SetDir 084C                                         _motor2SetDir 0841  
                                   __size_of_outputW 002A                              tasks@TimeSystem$F1858@i 0071  
                                          reset@this 0075                                             _espi_wr1 17CB  
                                           _espi_wr2 17D3                                             _espi_int 08A1  
                                           _espi_rst 0A22                                    ??_TMR4_Initialize 0072  
                                      __size_of_main 000B                                        __size_of_read 0050  
                                      __size_of_open 0016                                        __size_of_stop 0007  
                                          tasks@this 002E                                             _instance 014D  
              __end_of_setTimeBaseCounter@Comm$F2954 17FA               __size_of_setTimeBaseCounter@Comm$F2954 0006  
                      _setTimeBaseCounter@Comm$F2954 17F4                           __size_of_setRegistersTable 0055  
                                           _setSpeed 0C1A                                          _setCallback 0000  
                                           _timeBase 006F                                             _outFrame 00E3  
                               ??_PWM3_LoadDutyValue 007C                                       _commandHandler 0608  
                                           _sequence 0062                      __end_of_espi_setInterrupHandler 08A1  
                                           int$flags 007E                                             _slowDown 0000  
                                     NewDCMotor@F128 0320                   __end_of_INTERRUPT_InterruptManager 0033  
                         _INTERRUPT_InterruptManager 0004                                      _interrupHandler 09E0  
                                       _SSP1STATbits 0214                                     _reset@Comm$F2985 092F  
                                         _INTCONbits 000B                                             read@data 0071  
                                           read@this 0070                                             memcpy@d1 0070  
                                           memcpy@s1 0072                                    _currentTimeMillis 00E2  
                            __size_of_WDT_Initialize 0004                                             intlevel1 0000  
                                getHWSpeed@speed_X10 0026                                             open@this 0074  
                            ?_PIN_MANAGER_Initialize 0070                                    ??_TMR6_Initialize 0070  
                                       ??_stopMotors 0071                                          _removeTimer 0000  
                                       getRegister@i 0020                               __end_of_commandHandler 06BF  
                                    ??_TMR4_CallBack 0070                                            write@data 0072  
                                          write@this 0071                             __size_of_creatErrorFrame 0012  
                            __size_of_transferFrames 0010                                  _instance@Comm$F3017 0063  
                        PWM3_LoadDutyValue@dutyValue 002C                                __size_of_updateMillis 000C  
                                   exchangeDone@this 0071                                          ??_runMotors 0071  
                                      __pstringtext1 1800                                             stop@this 0070  
                           ?_SPI_SetInterruptHandler 0070                                         ?_getRegister 007C  
                                       ___aldiv@sign 0021                                   __end_of_stopMotors 0AC0  
                                _EPWM1_LoadDutyValue 0A52                                          healthy@this 0070  
                     __end_of_PIN_MANAGER_Initialize 0A0C                       __size_of_GetTimeSystemInstance 000D  
                      __end_of_GetTimeSystemInstance 0894                                          NewDCMotor@m 0040  
                              _MSSP_InterruptHandler 00ED                                      _PWM3_Initialize 082D  
                                       _updateMillis 0862                                      ?_commandHandler 0070  
                            __end_of_interrupHandler 09F6                             __end_of_EPWM1_Initialize 091F  
                               ?_EPWM1_LoadDutyValue 002C  
